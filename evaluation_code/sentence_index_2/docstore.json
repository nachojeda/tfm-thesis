{"docstore/metadata": {"c0bb2ec3-b919-4928-822a-daece61ddf9f": {"doc_hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e"}, "7d977aea-b846-4b28-8c2f-15198263d988": {"doc_hash": "3289728c0705f201683b46382a6f628a09340b284469704b814d7386860d0a35", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ae3da133-41bb-48d6-b9d7-1563b5536cd2": {"doc_hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "eb515e0d-0781-454f-9adf-82ba61d14cfe": {"doc_hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "5b0241c9-bb29-4b50-b1e5-4d90b7af2a59": {"doc_hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "306e8fd1-30cb-4b73-8baf-981a283b0b6e": {"doc_hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a53cbcfb-b8c8-4e04-811d-eaca46f50fc9": {"doc_hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "514dd39d-9e22-4d7e-aac6-76b10b19c327": {"doc_hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f0b22973-3a27-440c-ad39-f31ea5a4c240": {"doc_hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "acc4ef1b-f70e-437c-85cb-db15d1d6c231": {"doc_hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "40e3c0be-9c18-430e-9ebf-c0b91dc5ca95": {"doc_hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b1d7a124-aa09-43e4-8055-5a241d0013cf": {"doc_hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "56a4a9d8-0574-4ffe-824b-2b173475156f": {"doc_hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c6974a26-ffe1-4258-845b-08ac93497c34": {"doc_hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "493ea385-1542-4d27-b9d5-c0c48726a5cb": {"doc_hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "96e48f1d-a1b7-4d68-a2bc-9c311355a50f": {"doc_hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "657858c6-0191-4942-be8b-657491187e59": {"doc_hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0234cf98-e705-41f6-8d72-ca62889e98b1": {"doc_hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "da7d7fe9-f8ea-440b-9d72-b652e14531d3": {"doc_hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "64960949-0550-4701-be29-a58945dc56d7": {"doc_hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c0825598-ff1b-41d8-a62b-2d5af4c9d4f6": {"doc_hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "8efa1ddd-12e6-4a50-872c-7e7fb96029cb": {"doc_hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "97204230-7d05-4d90-a2cd-61c6b728dd92": {"doc_hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "571f142e-0567-4bbf-ab1d-f6adb2548ea7": {"doc_hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c84bb2be-863c-45ba-bc33-8a3b48995e3b": {"doc_hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "80b80005-34a5-424f-97d7-38650ae1399a": {"doc_hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0f7ab5e1-7571-46b8-9ebb-0ad80979d330": {"doc_hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ec24fcbb-6083-4f2b-a021-e2ffc1b61b4b": {"doc_hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0820e01f-7960-4d8b-9d93-76eddea5d440": {"doc_hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b0d59e80-93a3-4989-8605-b82082b9739d": {"doc_hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2668f1f2-ad2e-4e58-9260-6f82026de51b": {"doc_hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e76fbce5-f639-4ccc-8ba5-03c9a6f0de81": {"doc_hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e354ea6b-e9b0-48df-8440-6dde75b2993b": {"doc_hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "8de0f5e2-5002-4e53-962c-589d3cdc004e": {"doc_hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f7a47ced-cfb9-4018-9166-166041fcc1ce": {"doc_hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7be1920e-0fbc-4eec-9add-7a3dd2d9d5ad": {"doc_hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ca99c613-7a9e-42cf-b3b7-b4fd7bdd4c7d": {"doc_hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "db40e284-5e65-42ac-8f50-5e059ed4a309": {"doc_hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a58df4b9-5144-4856-b2b0-7713addf97ad": {"doc_hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "357d2574-a371-49df-b178-eb5cda95bcd4": {"doc_hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "26d4dcdb-68bf-4d74-99f7-a124d2bbc98f": {"doc_hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7c9ce843-6fec-4374-8ad6-2f66b6bc7410": {"doc_hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f3844dc9-3cd6-4f0b-9164-2b1fc248d79b": {"doc_hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e6ea9f33-4be2-4147-a7ef-0496716f6095": {"doc_hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "17a79e0b-5fb8-4ee2-93f9-1f34d1cbe6d6": {"doc_hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "acb5016e-568f-4ca5-922d-5f6142fe8e59": {"doc_hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "af5a4505-0f9f-4fec-9b3c-7de6ed9daf42": {"doc_hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "d59a11bd-1bf1-4f6f-a25d-40ee6b5e4408": {"doc_hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0cb24c87-db11-4316-9919-0c4433d07e9b": {"doc_hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f750aa59-52f3-4bab-b6a5-d2ff55b3d102": {"doc_hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "38c62408-91c1-4d22-a21c-ba5a586c364d": {"doc_hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a2c47aa6-a2ab-46c4-87b9-6fa8c6229638": {"doc_hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "921b0380-94bc-4998-9540-502fdae5f310": {"doc_hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b5ded902-f530-4973-9cb5-04ccbd445d56": {"doc_hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a195498e-4c95-42fe-b3d7-2c6130ffaa4a": {"doc_hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9cb3716a-f958-4fd6-a79f-5b7adb06f5bf": {"doc_hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7031bf94-c7e9-4318-9ae9-e0d36992ff5e": {"doc_hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "009128c4-951a-453a-9f4a-32703bf47a7f": {"doc_hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "05cac70a-20e0-4117-bf62-ba7a6788fc17": {"doc_hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "be7405f4-3b6d-4c06-892b-3460550939da": {"doc_hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6814fc5f-87f0-4d9a-917d-624af8e142da": {"doc_hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a516d7f0-1969-495e-9e6c-da0282577802": {"doc_hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "bf30bafe-b6ca-439a-896d-e3ab0e39f1e0": {"doc_hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6f9ea990-ef04-4798-9d9f-00429718cde7": {"doc_hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a616492d-b519-4773-9425-d251d4d7f21c": {"doc_hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "8935938a-5e89-40c3-9836-cb83fe60274f": {"doc_hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e3578190-7f0f-4371-a82e-9f88cc97a72b": {"doc_hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "db6c2ba8-0d2f-476f-87a3-99cedaf7d8ae": {"doc_hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6af0fe96-43ee-4e3c-9d21-fa680793f21b": {"doc_hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2bb734cf-a5e7-494d-a8a8-b118f2ae4cbb": {"doc_hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4e208599-32f9-4531-b6d4-856c3921b48e": {"doc_hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "12e22c45-8a9a-49c4-a524-6a543f341e7e": {"doc_hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "df8a007e-b97b-4233-b5b6-766026d2c9df": {"doc_hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e83b8184-6d48-4724-a372-f64b16477d69": {"doc_hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ded1c147-465d-478f-add8-152824f768ec": {"doc_hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0186d006-875e-4f8b-b5fd-8dc80646a88b": {"doc_hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "dcc39074-bcb5-4b7a-b73a-3c018b0bfadf": {"doc_hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0b3f725f-ef38-4391-af2c-f67c42807fba": {"doc_hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "d99df5e4-0bb9-4de1-8911-8b2c6cf02faf": {"doc_hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e366ced6-91be-45d0-a4de-41412883d2e0": {"doc_hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1f9aa8a2-f160-47fd-a76e-4694b2b584b5": {"doc_hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c120a26f-d33b-4612-a350-42cca70d9e0a": {"doc_hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ee4c4ad8-4c73-4e6d-9329-aad46019453c": {"doc_hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "58b01272-1d4c-491b-bba5-5930a5ba8db4": {"doc_hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c1a1c043-ff69-4e42-84ce-e3265fef9334": {"doc_hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9e3cc167-6fc4-4225-b2ad-fec3d46c8044": {"doc_hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "963e2fea-633e-43d8-a46d-f2ab59dc86ec": {"doc_hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "88d07ca3-30ff-4a24-9ef9-38b983b3429e": {"doc_hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0235db11-9f91-4ea3-84fe-718c3324e24d": {"doc_hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7c39a871-8a82-44cc-81c3-3115d102b952": {"doc_hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0b16fb1e-d0cd-4c6b-acd8-7eac406bece2": {"doc_hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0faaaf6c-dd07-4285-aecc-bea63e8baa89": {"doc_hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "47bc6e37-8cab-49bd-a27e-90fc8b6e8902": {"doc_hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e2ecf01f-a8ec-454c-bcd7-136bd0d13130": {"doc_hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "70be4d00-a733-48c6-b865-cffaad835a24": {"doc_hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "81b1dde7-2fc8-4dd8-bcc3-bf318e8ee329": {"doc_hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "88333afa-d9a9-40a6-b8a4-56e457f4473c": {"doc_hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4f3977e3-8a29-4551-8a1d-a297ce078e80": {"doc_hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f0443e2f-1630-446b-8308-257dc6b2dff6": {"doc_hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4e103e10-fcbb-47dd-bf10-88d574873f38": {"doc_hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "11d2c647-3939-4f1b-9971-abc4fa71af22": {"doc_hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "134b664f-504d-446b-a3a3-9b6be377d52c": {"doc_hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "cc8d17cc-d9b0-4ccd-a424-4f68f102302a": {"doc_hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4074611a-652e-4674-b691-72eaea87730f": {"doc_hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "343832e8-b73d-4c34-9b89-6860f978a045": {"doc_hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "81795e78-149b-42cf-af24-b71f252b6807": {"doc_hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "29f1edc5-2a79-4766-bc99-6e118b991f37": {"doc_hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4540548c-17f6-4f28-9f55-232ec2a2c6b5": {"doc_hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "faa4c0e5-ed56-4d65-9726-643575ed2508": {"doc_hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "71e14351-6d9f-43fe-8ce5-705df3460b50": {"doc_hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0566433b-d39c-4efb-8413-c03705156961": {"doc_hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "66f3f839-c2c2-4b6e-9503-8898f962384f": {"doc_hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "13cb726a-e88b-47cf-ae32-33cf2168fa16": {"doc_hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ce9e74ee-fd2a-406f-a8f0-ef3c7f588960": {"doc_hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "cb2553b8-5453-4db7-b9e2-c4243fec7a18": {"doc_hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0d6df087-993e-4d7c-beb7-5841cb230b4c": {"doc_hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b0a400ef-9637-4189-93b5-a6564f5fd749": {"doc_hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "eaa2c36a-7afe-49a8-a058-e67f0221b658": {"doc_hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "bf13ee4d-4159-4383-adf5-67b857263377": {"doc_hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "17f13d04-70ee-42ab-9071-87f38aa40527": {"doc_hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "08d45d9d-8980-4563-8f72-6926ea2fdc02": {"doc_hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "11f8c432-81c3-4721-a9fb-6f8c9e7fab8a": {"doc_hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "eb4a9275-7c57-414d-b81a-6bcc102f3b99": {"doc_hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "d756225f-fe80-4437-8cfb-3116b96edf12": {"doc_hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "da0331bc-5c4d-43de-ac35-952d5e5ef258": {"doc_hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "70310144-1651-48c2-bc89-6249d170d716": {"doc_hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "317bcbf5-2b82-4cfb-b567-d5bd91b7fa1e": {"doc_hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1ef6415f-a507-4510-9b31-478a31adc9be": {"doc_hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "14d8456e-d843-400c-9da6-fb336d2cde3a": {"doc_hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1cac58d9-f34c-497c-8239-0ce5251e18b5": {"doc_hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6efac16c-1af8-4924-8660-649c4332a3b1": {"doc_hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4ef994b4-9846-44cf-8e1a-26c54baaa968": {"doc_hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6a446516-1302-4557-ad94-435fb631e89c": {"doc_hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1e25264d-e5e9-46e0-a31e-81b43f07ab26": {"doc_hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c1d4ba13-34a3-4a9f-b16a-e0ed339df62e": {"doc_hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ed09576e-260f-4834-af24-ae30102ef823": {"doc_hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9b8d69af-2e60-47ce-86de-00654a58d49f": {"doc_hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "885b4009-96d5-45a7-a1bc-7466eaa9ccaa": {"doc_hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "172c0148-ae59-4520-a846-58a63dab3e84": {"doc_hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7c8c03e0-b6d7-4664-9e78-98da56508562": {"doc_hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ff686851-c01e-4785-b534-7b164cf06d9e": {"doc_hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1433f97f-acc9-4a64-92b5-90c9792358a0": {"doc_hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "01843387-f23b-46b7-8748-aca8f6f66626": {"doc_hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "72edd542-14f8-427e-816e-0af0203bd762": {"doc_hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "380bcff7-c5cb-4048-be60-3b6e8e1a0e7c": {"doc_hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6ad2a372-628f-4841-afa0-cacb856d495f": {"doc_hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "47a5ee1b-20e4-405c-afd4-2f2a30045ba4": {"doc_hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "aa302ad9-2c53-43e4-a958-5fe5c7a47ef0": {"doc_hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f9b87d8d-b420-4b4e-b571-583616a11776": {"doc_hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b9c95e27-2791-41c2-ad31-6f327abd8b19": {"doc_hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "d8eed128-93ea-4422-a7b0-7da23cd02176": {"doc_hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7daa41a9-ad27-42ea-8fd1-d81e015282be": {"doc_hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "fa5ead81-da0d-4c02-b3ef-58a8b0145080": {"doc_hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ed1063c6-378a-4462-9b2e-3431ce0432e6": {"doc_hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "493699c8-1115-47d1-91fc-369b24d15583": {"doc_hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "53989144-2a45-4ab3-aff6-c4859b32a359": {"doc_hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e3ec8d78-70af-4fae-8dad-259132426462": {"doc_hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "df98e7e2-33a7-46c1-a015-b0ff2b2b5bf7": {"doc_hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2603a8b1-6c71-4f8a-a478-23827f938b77": {"doc_hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c9c13937-ceff-4157-89d4-cdbc24fce78c": {"doc_hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "421653b2-3ca8-4dad-a7ca-f59db757b11d": {"doc_hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c2257d87-d8d9-4688-89ee-d92a5cf121f2": {"doc_hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "31a9db87-4c07-4ded-aa81-5b678dc53ddb": {"doc_hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "56ad54b4-39a1-423b-9221-cebd11cb1535": {"doc_hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e14099c0-6838-46a6-bde3-a27ba473acf7": {"doc_hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "27d89205-04a5-42b2-b584-25b54a2c5e3a": {"doc_hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "382c985f-7e83-4bd4-b0cf-40a9ec0bbabf": {"doc_hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "fdd5e355-ae59-4891-afbe-b5efd7ba62c7": {"doc_hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c1a3d6a3-7dad-489c-a76f-dcac66f60a9a": {"doc_hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "ac0d6164-b5be-4dea-860d-2c41bc1f91e7": {"doc_hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6445f9f5-054e-4d50-ae42-ff9b9c93de6c": {"doc_hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2c9921d9-3942-4f50-a022-d7138b1f7bb5": {"doc_hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2bda91ad-676e-4f0a-966b-67c6b5ab87e1": {"doc_hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "8ba53524-5eec-47ab-97a8-5705be2afc48": {"doc_hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "10e1364c-a3cb-444e-806c-2f8ed3286691": {"doc_hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a47f6843-dff6-45a7-a258-0e6252b87f1a": {"doc_hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4ccbf5e4-8c55-4405-a8ae-f2911bb43668": {"doc_hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "8de4dc05-24ed-487e-972a-7706bfd8513f": {"doc_hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "d9e5e954-f046-4b50-bb71-2ba21546fcf0": {"doc_hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "bcc44948-5a80-4d69-85d1-680beb4506f8": {"doc_hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c77a5570-3f3b-42f4-be16-0534053ce0c0": {"doc_hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4e894602-9242-4ff0-893a-bc2779f62383": {"doc_hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6bc83d17-6a53-42b5-9c42-cd27ffc64791": {"doc_hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2a56f9d4-c714-402e-a581-806be4eea15f": {"doc_hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1e177e7c-b119-427a-964f-3feee02c777f": {"doc_hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "df23d43e-1716-4858-a2a7-6def496078af": {"doc_hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "25864782-247c-4fb1-9921-1cfc9520a0e7": {"doc_hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1e3256ae-dea0-49b4-bb23-e781bccfc588": {"doc_hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "98786c6f-b387-4437-a9ec-a5c86362103e": {"doc_hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e4147ce1-30b9-41c9-bdb7-2d348354faa2": {"doc_hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "23a2285e-8cab-4323-92b1-f5512c04e83d": {"doc_hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f1951da2-be88-415d-9225-5c9c46b6d949": {"doc_hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "cbb3f5eb-76de-4c57-ab3d-a3b930dc78b7": {"doc_hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "81afce5c-9508-4f64-89a9-79a4e611dc57": {"doc_hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4a305916-d769-4287-8343-38c10426cd5f": {"doc_hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "417bfb71-6976-4075-b8de-8d86115d999a": {"doc_hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "79686c43-8185-45f1-9a0f-07b8ac630d2b": {"doc_hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "bbcc8129-b03f-4d78-9698-39941bc7f325": {"doc_hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1dbce497-4cd2-4af7-98f9-66d70fbd9682": {"doc_hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "037f6c8a-a99f-4110-a9c8-1c6ceb24f9ba": {"doc_hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9c27a5af-226c-4683-b297-de1d0ddf1c0b": {"doc_hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9e3f8be3-8586-4765-a653-23cd33eb94ef": {"doc_hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6401c647-e2c4-4292-94c0-7be9d74ac6c9": {"doc_hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6be37ae7-c407-428a-a78b-031d040ae12c": {"doc_hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6146e95f-de56-4efa-bd12-0e3f52b25ce0": {"doc_hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7080a58f-7673-4cfb-a349-9070fa075bc5": {"doc_hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "26d02779-f73b-4de3-ac0e-9c77f0efc158": {"doc_hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2935fdaf-0b7a-4dae-a719-23d396f722de": {"doc_hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "8517f9be-b680-41d5-bc3e-6f41fecef6fb": {"doc_hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9273c2fa-f8e0-4bdd-9bd4-853bd0fe5f2a": {"doc_hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6e28a749-85ea-4e3f-8be5-825a0a392337": {"doc_hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c3ab43e0-15f1-4d63-b961-2cabc05b99a3": {"doc_hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "38db8015-33e8-4835-9f62-e025e0ec9948": {"doc_hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c71e3a0b-c1dd-4766-b35f-cb166d35cc60": {"doc_hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f08f732d-5787-4bc6-9859-736e345dd848": {"doc_hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "69f7e83d-4447-4a3c-b82c-97eea5d3473d": {"doc_hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "21834ee3-66a1-494b-ad54-799b3ba0de2e": {"doc_hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "3ca59a3e-8014-4a25-8f16-918955fd53d3": {"doc_hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "e726fcc4-cd5a-409a-94b1-844b34d5b966": {"doc_hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "cd623b80-c5f1-4ac4-aeb7-46ec43bc8623": {"doc_hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "13d0759f-f770-41a2-8b5a-4501bec0eaf1": {"doc_hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "66f02d76-ebf6-441a-be1e-c4e7464be62f": {"doc_hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9132cedb-2eae-4392-9546-c2baa4b76a27": {"doc_hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7440cde8-8a4c-436d-ac6c-82689a25a536": {"doc_hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6f4ffab7-c5c9-4e63-8642-1696a8dcacea": {"doc_hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "33f98a89-00ba-42da-9ef6-76578d2da972": {"doc_hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f5bb923b-0143-4712-9dfd-c8a78df37618": {"doc_hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "03a5b238-c617-4352-9174-9c6704dee3f5": {"doc_hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a19ec2b0-57c5-40a1-a1d5-d29d6879fb69": {"doc_hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0f353364-7c9b-42c0-a833-f6be07d666d1": {"doc_hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b7e0dccf-e687-4af8-8b6d-15384bed2280": {"doc_hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "6aed7f16-9f27-457e-b853-710f09282aa9": {"doc_hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0b49253f-6d77-42f4-8842-5c9ff7f5127d": {"doc_hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1811178e-8522-422c-8b67-492cb99653bf": {"doc_hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "af9a7f1d-c5ca-4aa3-944d-53d394d33f81": {"doc_hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4b154943-09a2-4683-bfca-f5c271971d6e": {"doc_hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "dc458765-5b32-487b-bb92-081ee4a2e8f6": {"doc_hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "fa94b373-0f02-49e1-a74b-abce227db642": {"doc_hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "160719d5-4658-4ec5-badc-3e28ffa9df4e": {"doc_hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1ffd554d-100e-4c48-88f8-9fd677220fda": {"doc_hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "bcdabaed-3d5f-42b4-a49f-a0b75feb5adf": {"doc_hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "f649fdd1-a021-4868-9088-a11593f46faa": {"doc_hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a72baed6-896f-465f-a48d-4de6898881d4": {"doc_hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "091b31d6-655f-49ce-b6e5-5b19b37c3827": {"doc_hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "cda66ed3-ebec-4f19-8f20-ee2823695c29": {"doc_hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "adcade97-ec51-4729-88e7-ff564769a2f5": {"doc_hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0fd48060-5c91-4dd9-8400-d1152bb6fa1d": {"doc_hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "25ed5bdc-d0c5-4757-abbe-6569467a6a5e": {"doc_hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "289b7fec-b9a3-4f95-88a6-648de5d104f8": {"doc_hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "9bf46313-da2a-4a80-be03-a72616ef43ad": {"doc_hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "932146c7-0a65-4e47-86ad-c7baec6e8593": {"doc_hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1084eb82-e7b5-45f3-859d-e5722980b891": {"doc_hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "03614dff-210b-42d3-933b-7b2436625b70": {"doc_hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "063fdab0-f91a-492c-bfb3-df009a71c1dd": {"doc_hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "68b72124-dc24-4150-a42f-8e6856e96eee": {"doc_hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0ae2785c-c615-448e-892d-f81ed5ffce97": {"doc_hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "09511f02-0426-4214-ad02-ef45dc0a6d83": {"doc_hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0faf47f0-a2c7-4b1e-a72d-24b0ef5a7ae7": {"doc_hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "fc232a62-1a1b-4a2b-aa5f-62490741e4d2": {"doc_hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "c1dcb122-ab9d-43f4-ab7a-28a1f10adafc": {"doc_hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a39f99b8-c30f-4114-aca5-5f6122ec39b3": {"doc_hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "80bd519c-c966-4998-850e-2d7651edd013": {"doc_hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "1f7d3f41-487e-4dc0-adab-df0bdc67225c": {"doc_hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2d87345f-f8df-439e-bcea-84cbdccc333c": {"doc_hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "80296f03-e31d-406e-ae5f-83b919ebf383": {"doc_hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "37b83876-2a0f-4a04-9db6-ecafd3441ec3": {"doc_hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "784b6842-3659-4779-837c-af52bc2155ee": {"doc_hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "82a04cbd-359a-4d70-af3e-2d37cf11be47": {"doc_hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "b5ba7e5c-f790-4261-a735-f3340cef853f": {"doc_hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "624ef28a-13da-42a4-b00c-7eb85fc9a133": {"doc_hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "3eddac65-81a6-4d6b-94ae-425ebfd7a342": {"doc_hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "11e585db-2673-4b0f-8465-77551d57f8c1": {"doc_hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2a41e4ad-e290-4bbf-888d-c862c18d9faa": {"doc_hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "accb1c45-f327-44e8-895e-cc1e8620c620": {"doc_hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "349930de-b47e-4889-a71a-6f3ac5740c7a": {"doc_hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "a55c0d6c-647c-44e3-b58e-59157b29ea92": {"doc_hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "84a6397b-3012-48b2-a2b0-6c4ec07eae0d": {"doc_hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0bf6c4ec-69a8-4531-81bd-a114a119cdd5": {"doc_hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "577cddd3-a56c-47a1-a62b-8e51c801db7e": {"doc_hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "d72f8a0a-ec4f-48b9-8779-fa17215e46e6": {"doc_hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "927bbc4e-031b-409c-9617-ed85c4e91bf9": {"doc_hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "2fba7e33-374c-4da9-8fdd-44a1016af36a": {"doc_hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "4eb2b539-7afc-4441-9fae-3978344115fe": {"doc_hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "7dd03a4d-9670-480b-b17d-432541322779": {"doc_hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "743389cc-285f-43b0-bc53-829426fc44b1": {"doc_hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}, "0ba96198-2e26-4113-a6f7-ee5212fafd9d": {"doc_hash": "8d77459b8be2b95ef185499fabf082d83096113e57464684ceec6de056d85888", "ref_doc_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f"}}, "docstore/data": {"7d977aea-b846-4b28-8c2f-15198263d988": {"__data__": {"id_": "7d977aea-b846-4b28-8c2f-15198263d988", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. ", "original_text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae3da133-41bb-48d6-b9d7-1563b5536cd2", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. ", "original_text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. "}, "hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "class_name": "RelatedNodeInfo"}}, "hash": "3289728c0705f201683b46382a6f628a09340b284469704b814d7386860d0a35", "text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. ", "start_char_idx": 0, "end_char_idx": 565, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae3da133-41bb-48d6-b9d7-1563b5536cd2": {"__data__": {"id_": "ae3da133-41bb-48d6-b9d7-1563b5536cd2", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. ", "original_text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d977aea-b846-4b28-8c2f-15198263d988", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. ", "original_text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. "}, "hash": "3289728c0705f201683b46382a6f628a09340b284469704b814d7386860d0a35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb515e0d-0781-454f-9adf-82ba61d14cfe", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. ", "original_text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. "}, "hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "class_name": "RelatedNodeInfo"}}, "hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. ", "start_char_idx": 565, "end_char_idx": 661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb515e0d-0781-454f-9adf-82ba61d14cfe": {"__data__": {"id_": "eb515e0d-0781-454f-9adf-82ba61d14cfe", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. ", "original_text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae3da133-41bb-48d6-b9d7-1563b5536cd2", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. ", "original_text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. "}, "hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b0241c9-bb29-4b50-b1e5-4d90b7af2a59", "node_type": "1", "metadata": {"window": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. ", "original_text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. "}, "hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "class_name": "RelatedNodeInfo"}}, "hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. ", "start_char_idx": 661, "end_char_idx": 816, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b0241c9-bb29-4b50-b1e5-4d90b7af2a59": {"__data__": {"id_": "5b0241c9-bb29-4b50-b1e5-4d90b7af2a59", "embedding": null, "metadata": {"window": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. ", "original_text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb515e0d-0781-454f-9adf-82ba61d14cfe", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. ", "original_text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. "}, "hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "306e8fd1-30cb-4b73-8baf-981a283b0b6e", "node_type": "1", "metadata": {"window": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n", "original_text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. "}, "hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "class_name": "RelatedNodeInfo"}}, "hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. ", "start_char_idx": 816, "end_char_idx": 984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "306e8fd1-30cb-4b73-8baf-981a283b0b6e": {"__data__": {"id_": "306e8fd1-30cb-4b73-8baf-981a283b0b6e", "embedding": null, "metadata": {"window": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n", "original_text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b0241c9-bb29-4b50-b1e5-4d90b7af2a59", "node_type": "1", "metadata": {"window": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. ", "original_text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. "}, "hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a53cbcfb-b8c8-4e04-811d-eaca46f50fc9", "node_type": "1", "metadata": {"window": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. ", "original_text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n"}, "hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "class_name": "RelatedNodeInfo"}}, "hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. ", "start_char_idx": 984, "end_char_idx": 1145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a53cbcfb-b8c8-4e04-811d-eaca46f50fc9": {"__data__": {"id_": "a53cbcfb-b8c8-4e04-811d-eaca46f50fc9", "embedding": null, "metadata": {"window": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. ", "original_text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "306e8fd1-30cb-4b73-8baf-981a283b0b6e", "node_type": "1", "metadata": {"window": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n", "original_text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. "}, "hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "514dd39d-9e22-4d7e-aac6-76b10b19c327", "node_type": "1", "metadata": {"window": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n", "original_text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. "}, "hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "class_name": "RelatedNodeInfo"}}, "hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n", "start_char_idx": 1145, "end_char_idx": 1396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "514dd39d-9e22-4d7e-aac6-76b10b19c327": {"__data__": {"id_": "514dd39d-9e22-4d7e-aac6-76b10b19c327", "embedding": null, "metadata": {"window": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n", "original_text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a53cbcfb-b8c8-4e04-811d-eaca46f50fc9", "node_type": "1", "metadata": {"window": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. ", "original_text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n"}, "hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f0b22973-3a27-440c-ad39-f31ea5a4c240", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution. ", "original_text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n"}, "hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "class_name": "RelatedNodeInfo"}}, "hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. ", "start_char_idx": 1396, "end_char_idx": 1690, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0b22973-3a27-440c-ad39-f31ea5a4c240": {"__data__": {"id_": "f0b22973-3a27-440c-ad39-f31ea5a4c240", "embedding": null, "metadata": {"window": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution. ", "original_text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "514dd39d-9e22-4d7e-aac6-76b10b19c327", "node_type": "1", "metadata": {"window": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n", "original_text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. "}, "hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "acc4ef1b-f70e-437c-85cb-db15d1d6c231", "node_type": "1", "metadata": {"window": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random. ", "original_text": "\u2217Equal contribution. "}, "hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "class_name": "RelatedNodeInfo"}}, "hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n", "start_char_idx": 1690, "end_char_idx": 1828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acc4ef1b-f70e-437c-85cb-db15d1d6c231": {"__data__": {"id_": "acc4ef1b-f70e-437c-85cb-db15d1d6c231", "embedding": null, "metadata": {"window": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random. ", "original_text": "\u2217Equal contribution. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f0b22973-3a27-440c-ad39-f31ea5a4c240", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution. ", "original_text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n"}, "hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "40e3c0be-9c18-430e-9ebf-c0b91dc5ca95", "node_type": "1", "metadata": {"window": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "original_text": "Listing order is random. "}, "hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "class_name": "RelatedNodeInfo"}}, "hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "text": "\u2217Equal contribution. ", "start_char_idx": 1828, "end_char_idx": 1849, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "40e3c0be-9c18-430e-9ebf-c0b91dc5ca95": {"__data__": {"id_": "40e3c0be-9c18-430e-9ebf-c0b91dc5ca95", "embedding": null, "metadata": {"window": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "original_text": "Listing order is random. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acc4ef1b-f70e-437c-85cb-db15d1d6c231", "node_type": "1", "metadata": {"window": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random. ", "original_text": "\u2217Equal contribution. "}, "hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1d7a124-aa09-43e4-8055-5a241d0013cf", "node_type": "1", "metadata": {"window": "\u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "original_text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. "}, "hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "class_name": "RelatedNodeInfo"}}, "hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "text": "Listing order is random. ", "start_char_idx": 1849, "end_char_idx": 1874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1d7a124-aa09-43e4-8055-5a241d0013cf": {"__data__": {"id_": "b1d7a124-aa09-43e4-8055-5a241d0013cf", "embedding": null, "metadata": {"window": "\u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "original_text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "40e3c0be-9c18-430e-9ebf-c0b91dc5ca95", "node_type": "1", "metadata": {"window": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "original_text": "Listing order is random. "}, "hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56a4a9d8-0574-4ffe-824b-2b173475156f", "node_type": "1", "metadata": {"window": "Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "original_text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. "}, "hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "class_name": "RelatedNodeInfo"}}, "hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "start_char_idx": 1874, "end_char_idx": 1970, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56a4a9d8-0574-4ffe-824b-2b173475156f": {"__data__": {"id_": "56a4a9d8-0574-4ffe-824b-2b173475156f", "embedding": null, "metadata": {"window": "Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "original_text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1d7a124-aa09-43e4-8055-5a241d0013cf", "node_type": "1", "metadata": {"window": "\u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "original_text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. "}, "hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6974a26-ffe1-4258-845b-08ac93497c34", "node_type": "1", "metadata": {"window": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "original_text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. "}, "hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "class_name": "RelatedNodeInfo"}}, "hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "start_char_idx": 1970, "end_char_idx": 2105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6974a26-ffe1-4258-845b-08ac93497c34": {"__data__": {"id_": "c6974a26-ffe1-4258-845b-08ac93497c34", "embedding": null, "metadata": {"window": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "original_text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56a4a9d8-0574-4ffe-824b-2b173475156f", "node_type": "1", "metadata": {"window": "Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "original_text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. "}, "hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "493ea385-1542-4d27-b9d5-c0c48726a5cb", "node_type": "1", "metadata": {"window": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "original_text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. "}, "hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "class_name": "RelatedNodeInfo"}}, "hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "start_char_idx": 2105, "end_char_idx": 2278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "493ea385-1542-4d27-b9d5-c0c48726a5cb": {"__data__": {"id_": "493ea385-1542-4d27-b9d5-c0c48726a5cb", "embedding": null, "metadata": {"window": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "original_text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6974a26-ffe1-4258-845b-08ac93497c34", "node_type": "1", "metadata": {"window": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "original_text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. "}, "hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96e48f1d-a1b7-4d68-a2bc-9c311355a50f", "node_type": "1", "metadata": {"window": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "original_text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. "}, "hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "class_name": "RelatedNodeInfo"}}, "hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "start_char_idx": 2278, "end_char_idx": 2395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96e48f1d-a1b7-4d68-a2bc-9c311355a50f": {"__data__": {"id_": "96e48f1d-a1b7-4d68-a2bc-9c311355a50f", "embedding": null, "metadata": {"window": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "original_text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "493ea385-1542-4d27-b9d5-c0c48726a5cb", "node_type": "1", "metadata": {"window": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "original_text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. "}, "hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "657858c6-0191-4942-be8b-657491187e59", "node_type": "1", "metadata": {"window": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n", "original_text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n"}, "hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "class_name": "RelatedNodeInfo"}}, "hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "start_char_idx": 2395, "end_char_idx": 2531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "657858c6-0191-4942-be8b-657491187e59": {"__data__": {"id_": "657858c6-0191-4942-be8b-657491187e59", "embedding": null, "metadata": {"window": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n", "original_text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96e48f1d-a1b7-4d68-a2bc-9c311355a50f", "node_type": "1", "metadata": {"window": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "original_text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. "}, "hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0234cf98-e705-41f6-8d72-ca62889e98b1", "node_type": "1", "metadata": {"window": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n", "original_text": "\u2020Work performed while at Google Brain.\n"}, "hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "class_name": "RelatedNodeInfo"}}, "hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "start_char_idx": 2531, "end_char_idx": 2732, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0234cf98-e705-41f6-8d72-ca62889e98b1": {"__data__": {"id_": "0234cf98-e705-41f6-8d72-ca62889e98b1", "embedding": null, "metadata": {"window": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n", "original_text": "\u2020Work performed while at Google Brain.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "657858c6-0191-4942-be8b-657491187e59", "node_type": "1", "metadata": {"window": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n", "original_text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n"}, "hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da7d7fe9-f8ea-440b-9d72-b652e14531d3", "node_type": "1", "metadata": {"window": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "original_text": "\u2021Work performed while at Google Research.\n"}, "hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "class_name": "RelatedNodeInfo"}}, "hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "text": "\u2020Work performed while at Google Brain.\n", "start_char_idx": 2732, "end_char_idx": 2771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da7d7fe9-f8ea-440b-9d72-b652e14531d3": {"__data__": {"id_": "da7d7fe9-f8ea-440b-9d72-b652e14531d3", "embedding": null, "metadata": {"window": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "original_text": "\u2021Work performed while at Google Research.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0234cf98-e705-41f6-8d72-ca62889e98b1", "node_type": "1", "metadata": {"window": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n", "original_text": "\u2020Work performed while at Google Brain.\n"}, "hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64960949-0550-4701-be29-a58945dc56d7", "node_type": "1", "metadata": {"window": "\u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "original_text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n"}, "hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "class_name": "RelatedNodeInfo"}}, "hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "text": "\u2021Work performed while at Google Research.\n", "start_char_idx": 2771, "end_char_idx": 2813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64960949-0550-4701-be29-a58945dc56d7": {"__data__": {"id_": "64960949-0550-4701-be29-a58945dc56d7", "embedding": null, "metadata": {"window": "\u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "original_text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da7d7fe9-f8ea-440b-9d72-b652e14531d3", "node_type": "1", "metadata": {"window": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "original_text": "\u2021Work performed while at Google Research.\n"}, "hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0825598-ff1b-41d8-a62b-2d5af4c9d4f6", "node_type": "1", "metadata": {"window": "\u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "original_text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. "}, "hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "class_name": "RelatedNodeInfo"}}, "hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "start_char_idx": 2813, "end_char_idx": 2905, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0825598-ff1b-41d8-a62b-2d5af4c9d4f6": {"__data__": {"id_": "c0825598-ff1b-41d8-a62b-2d5af4c9d4f6", "embedding": null, "metadata": {"window": "\u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "original_text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "64960949-0550-4701-be29-a58945dc56d7", "node_type": "1", "metadata": {"window": "\u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "original_text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n"}, "hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8efa1ddd-12e6-4a50-872c-7e7fb96029cb", "node_type": "1", "metadata": {"window": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "original_text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. "}, "hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "class_name": "RelatedNodeInfo"}}, "hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "start_char_idx": 2905, "end_char_idx": 3013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8efa1ddd-12e6-4a50-872c-7e7fb96029cb": {"__data__": {"id_": "8efa1ddd-12e6-4a50-872c-7e7fb96029cb", "embedding": null, "metadata": {"window": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "original_text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0825598-ff1b-41d8-a62b-2d5af4c9d4f6", "node_type": "1", "metadata": {"window": "\u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "original_text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. "}, "hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97204230-7d05-4d90-a2cd-61c6b728dd92", "node_type": "1", "metadata": {"window": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n", "original_text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. "}, "hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "class_name": "RelatedNodeInfo"}}, "hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "start_char_idx": 3013, "end_char_idx": 3379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97204230-7d05-4d90-a2cd-61c6b728dd92": {"__data__": {"id_": "97204230-7d05-4d90-a2cd-61c6b728dd92", "embedding": null, "metadata": {"window": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n", "original_text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8efa1ddd-12e6-4a50-872c-7e7fb96029cb", "node_type": "1", "metadata": {"window": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "original_text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. "}, "hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "571f142e-0567-4bbf-ab1d-f6adb2548ea7", "node_type": "1", "metadata": {"window": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "original_text": "The fundamental\nconstraint of sequential computation, however, remains.\n"}, "hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "class_name": "RelatedNodeInfo"}}, "hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "start_char_idx": 3379, "end_char_idx": 3587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "571f142e-0567-4bbf-ab1d-f6adb2548ea7": {"__data__": {"id_": "571f142e-0567-4bbf-ab1d-f6adb2548ea7", "embedding": null, "metadata": {"window": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "original_text": "The fundamental\nconstraint of sequential computation, however, remains.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97204230-7d05-4d90-a2cd-61c6b728dd92", "node_type": "1", "metadata": {"window": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n", "original_text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. "}, "hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c84bb2be-863c-45ba-bc33-8a3b48995e3b", "node_type": "1", "metadata": {"window": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "original_text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. "}, "hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "class_name": "RelatedNodeInfo"}}, "hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "text": "The fundamental\nconstraint of sequential computation, however, remains.\n", "start_char_idx": 3587, "end_char_idx": 3659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c84bb2be-863c-45ba-bc33-8a3b48995e3b": {"__data__": {"id_": "c84bb2be-863c-45ba-bc33-8a3b48995e3b", "embedding": null, "metadata": {"window": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "original_text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "571f142e-0567-4bbf-ab1d-f6adb2548ea7", "node_type": "1", "metadata": {"window": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "original_text": "The fundamental\nconstraint of sequential computation, however, remains.\n"}, "hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80b80005-34a5-424f-97d7-38650ae1399a", "node_type": "1", "metadata": {"window": "The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "original_text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n"}, "hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "class_name": "RelatedNodeInfo"}}, "hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "start_char_idx": 3659, "end_char_idx": 3894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80b80005-34a5-424f-97d7-38650ae1399a": {"__data__": {"id_": "80b80005-34a5-424f-97d7-38650ae1399a", "embedding": null, "metadata": {"window": "The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "original_text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c84bb2be-863c-45ba-bc33-8a3b48995e3b", "node_type": "1", "metadata": {"window": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "original_text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. "}, "hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f7ab5e1-7571-46b8-9ebb-0ad80979d330", "node_type": "1", "metadata": {"window": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "original_text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n"}, "hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "class_name": "RelatedNodeInfo"}}, "hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "start_char_idx": 3894, "end_char_idx": 4009, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f7ab5e1-7571-46b8-9ebb-0ad80979d330": {"__data__": {"id_": "0f7ab5e1-7571-46b8-9ebb-0ad80979d330", "embedding": null, "metadata": {"window": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "original_text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80b80005-34a5-424f-97d7-38650ae1399a", "node_type": "1", "metadata": {"window": "The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "original_text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n"}, "hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ec24fcbb-6083-4f2b-a021-e2ffc1b61b4b", "node_type": "1", "metadata": {"window": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "original_text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n"}, "hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "class_name": "RelatedNodeInfo"}}, "hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "start_char_idx": 4009, "end_char_idx": 4201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ec24fcbb-6083-4f2b-a021-e2ffc1b61b4b": {"__data__": {"id_": "ec24fcbb-6083-4f2b-a021-e2ffc1b61b4b", "embedding": null, "metadata": {"window": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "original_text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f7ab5e1-7571-46b8-9ebb-0ad80979d330", "node_type": "1", "metadata": {"window": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "original_text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n"}, "hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0820e01f-7960-4d8b-9d93-76eddea5d440", "node_type": "1", "metadata": {"window": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "original_text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. "}, "hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "class_name": "RelatedNodeInfo"}}, "hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "start_char_idx": 4201, "end_char_idx": 4392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0820e01f-7960-4d8b-9d93-76eddea5d440": {"__data__": {"id_": "0820e01f-7960-4d8b-9d93-76eddea5d440", "embedding": null, "metadata": {"window": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "original_text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ec24fcbb-6083-4f2b-a021-e2ffc1b61b4b", "node_type": "1", "metadata": {"window": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "original_text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n"}, "hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0d59e80-93a3-4989-8605-b82082b9739d", "node_type": "1", "metadata": {"window": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "original_text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. "}, "hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "class_name": "RelatedNodeInfo"}}, "hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "start_char_idx": 4392, "end_char_idx": 4693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0d59e80-93a3-4989-8605-b82082b9739d": {"__data__": {"id_": "b0d59e80-93a3-4989-8605-b82082b9739d", "embedding": null, "metadata": {"window": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "original_text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0820e01f-7960-4d8b-9d93-76eddea5d440", "node_type": "1", "metadata": {"window": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "original_text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. "}, "hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2668f1f2-ad2e-4e58-9260-6f82026de51b", "node_type": "1", "metadata": {"window": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "original_text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. "}, "hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "class_name": "RelatedNodeInfo"}}, "hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "start_char_idx": 4693, "end_char_idx": 4902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2668f1f2-ad2e-4e58-9260-6f82026de51b": {"__data__": {"id_": "2668f1f2-ad2e-4e58-9260-6f82026de51b", "embedding": null, "metadata": {"window": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "original_text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0d59e80-93a3-4989-8605-b82082b9739d", "node_type": "1", "metadata": {"window": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "original_text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. "}, "hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e76fbce5-f639-4ccc-8ba5-03c9a6f0de81", "node_type": "1", "metadata": {"window": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "original_text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n"}, "hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "class_name": "RelatedNodeInfo"}}, "hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "start_char_idx": 4902, "end_char_idx": 4985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e76fbce5-f639-4ccc-8ba5-03c9a6f0de81": {"__data__": {"id_": "e76fbce5-f639-4ccc-8ba5-03c9a6f0de81", "embedding": null, "metadata": {"window": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "original_text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2668f1f2-ad2e-4e58-9260-6f82026de51b", "node_type": "1", "metadata": {"window": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "original_text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. "}, "hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e354ea6b-e9b0-48df-8440-6dde75b2993b", "node_type": "1", "metadata": {"window": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "original_text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. "}, "hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "class_name": "RelatedNodeInfo"}}, "hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "start_char_idx": 4985, "end_char_idx": 5233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e354ea6b-e9b0-48df-8440-6dde75b2993b": {"__data__": {"id_": "e354ea6b-e9b0-48df-8440-6dde75b2993b", "embedding": null, "metadata": {"window": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "original_text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e76fbce5-f639-4ccc-8ba5-03c9a6f0de81", "node_type": "1", "metadata": {"window": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "original_text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n"}, "hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8de0f5e2-5002-4e53-962c-589d3cdc004e", "node_type": "1", "metadata": {"window": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "original_text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n"}, "hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "class_name": "RelatedNodeInfo"}}, "hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "start_char_idx": 5233, "end_char_idx": 5412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8de0f5e2-5002-4e53-962c-589d3cdc004e": {"__data__": {"id_": "8de0f5e2-5002-4e53-962c-589d3cdc004e", "embedding": null, "metadata": {"window": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "original_text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e354ea6b-e9b0-48df-8440-6dde75b2993b", "node_type": "1", "metadata": {"window": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "original_text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. "}, "hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f7a47ced-cfb9-4018-9166-166041fcc1ce", "node_type": "1", "metadata": {"window": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "original_text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n"}, "hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "class_name": "RelatedNodeInfo"}}, "hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "start_char_idx": 5412, "end_char_idx": 5627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f7a47ced-cfb9-4018-9166-166041fcc1ce": {"__data__": {"id_": "f7a47ced-cfb9-4018-9166-166041fcc1ce", "embedding": null, "metadata": {"window": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "original_text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8de0f5e2-5002-4e53-962c-589d3cdc004e", "node_type": "1", "metadata": {"window": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "original_text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n"}, "hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7be1920e-0fbc-4eec-9add-7a3dd2d9d5ad", "node_type": "1", "metadata": {"window": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "original_text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. "}, "hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "class_name": "RelatedNodeInfo"}}, "hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "start_char_idx": 5627, "end_char_idx": 5847, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7be1920e-0fbc-4eec-9add-7a3dd2d9d5ad": {"__data__": {"id_": "7be1920e-0fbc-4eec-9add-7a3dd2d9d5ad", "embedding": null, "metadata": {"window": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "original_text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f7a47ced-cfb9-4018-9166-166041fcc1ce", "node_type": "1", "metadata": {"window": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "original_text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n"}, "hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca99c613-7a9e-42cf-b3b7-b4fd7bdd4c7d", "node_type": "1", "metadata": {"window": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "original_text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n"}, "hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "class_name": "RelatedNodeInfo"}}, "hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "start_char_idx": 5847, "end_char_idx": 6072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca99c613-7a9e-42cf-b3b7-b4fd7bdd4c7d": {"__data__": {"id_": "ca99c613-7a9e-42cf-b3b7-b4fd7bdd4c7d", "embedding": null, "metadata": {"window": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "original_text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7be1920e-0fbc-4eec-9add-7a3dd2d9d5ad", "node_type": "1", "metadata": {"window": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "original_text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. "}, "hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db40e284-5e65-42ac-8f50-5e059ed4a309", "node_type": "1", "metadata": {"window": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "original_text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n"}, "hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "class_name": "RelatedNodeInfo"}}, "hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "start_char_idx": 6072, "end_char_idx": 6222, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db40e284-5e65-42ac-8f50-5e059ed4a309": {"__data__": {"id_": "db40e284-5e65-42ac-8f50-5e059ed4a309", "embedding": null, "metadata": {"window": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "original_text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca99c613-7a9e-42cf-b3b7-b4fd7bdd4c7d", "node_type": "1", "metadata": {"window": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "original_text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n"}, "hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a58df4b9-5144-4856-b2b0-7713addf97ad", "node_type": "1", "metadata": {"window": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "original_text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). "}, "hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "class_name": "RelatedNodeInfo"}}, "hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "start_char_idx": 6222, "end_char_idx": 6341, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a58df4b9-5144-4856-b2b0-7713addf97ad": {"__data__": {"id_": "a58df4b9-5144-4856-b2b0-7713addf97ad", "embedding": null, "metadata": {"window": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "original_text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db40e284-5e65-42ac-8f50-5e059ed4a309", "node_type": "1", "metadata": {"window": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "original_text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n"}, "hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "357d2574-a371-49df-b178-eb5cda95bcd4", "node_type": "1", "metadata": {"window": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "original_text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. "}, "hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "class_name": "RelatedNodeInfo"}}, "hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "start_char_idx": 6341, "end_char_idx": 6481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "357d2574-a371-49df-b178-eb5cda95bcd4": {"__data__": {"id_": "357d2574-a371-49df-b178-eb5cda95bcd4", "embedding": null, "metadata": {"window": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "original_text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a58df4b9-5144-4856-b2b0-7713addf97ad", "node_type": "1", "metadata": {"window": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "original_text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). "}, "hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26d4dcdb-68bf-4d74-99f7-a124d2bbc98f", "node_type": "1", "metadata": {"window": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "original_text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n"}, "hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "class_name": "RelatedNodeInfo"}}, "hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "start_char_idx": 6481, "end_char_idx": 6582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26d4dcdb-68bf-4d74-99f7-a124d2bbc98f": {"__data__": {"id_": "26d4dcdb-68bf-4d74-99f7-a124d2bbc98f", "embedding": null, "metadata": {"window": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "original_text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "357d2574-a371-49df-b178-eb5cda95bcd4", "node_type": "1", "metadata": {"window": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "original_text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. "}, "hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c9ce843-6fec-4374-8ad6-2f66b6bc7410", "node_type": "1", "metadata": {"window": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "original_text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n"}, "hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "class_name": "RelatedNodeInfo"}}, "hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "start_char_idx": 6582, "end_char_idx": 6718, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c9ce843-6fec-4374-8ad6-2f66b6bc7410": {"__data__": {"id_": "7c9ce843-6fec-4374-8ad6-2f66b6bc7410", "embedding": null, "metadata": {"window": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "original_text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26d4dcdb-68bf-4d74-99f7-a124d2bbc98f", "node_type": "1", "metadata": {"window": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "original_text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n"}, "hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3844dc9-3cd6-4f0b-9164-2b1fc248d79b", "node_type": "1", "metadata": {"window": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers. ", "original_text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. "}, "hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "class_name": "RelatedNodeInfo"}}, "hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "start_char_idx": 6718, "end_char_idx": 6932, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3844dc9-3cd6-4f0b-9164-2b1fc248d79b": {"__data__": {"id_": "f3844dc9-3cd6-4f0b-9164-2b1fc248d79b", "embedding": null, "metadata": {"window": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers. ", "original_text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c9ce843-6fec-4374-8ad6-2f66b6bc7410", "node_type": "1", "metadata": {"window": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "original_text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n"}, "hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6ea9f33-4be2-4147-a7ef-0496716f6095", "node_type": "1", "metadata": {"window": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "original_text": "Each layer has two\nsub-layers. "}, "hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "class_name": "RelatedNodeInfo"}}, "hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "start_char_idx": 6932, "end_char_idx": 7033, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6ea9f33-4be2-4147-a7ef-0496716f6095": {"__data__": {"id_": "e6ea9f33-4be2-4147-a7ef-0496716f6095", "embedding": null, "metadata": {"window": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "original_text": "Each layer has two\nsub-layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3844dc9-3cd6-4f0b-9164-2b1fc248d79b", "node_type": "1", "metadata": {"window": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers. ", "original_text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. "}, "hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17a79e0b-5fb8-4ee2-93f9-1f34d1cbe6d6", "node_type": "1", "metadata": {"window": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network. ", "original_text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n"}, "hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "class_name": "RelatedNodeInfo"}}, "hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "text": "Each layer has two\nsub-layers. ", "start_char_idx": 7033, "end_char_idx": 7064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17a79e0b-5fb8-4ee2-93f9-1f34d1cbe6d6": {"__data__": {"id_": "17a79e0b-5fb8-4ee2-93f9-1f34d1cbe6d6", "embedding": null, "metadata": {"window": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network. ", "original_text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6ea9f33-4be2-4147-a7ef-0496716f6095", "node_type": "1", "metadata": {"window": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "original_text": "Each layer has two\nsub-layers. "}, "hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "acb5016e-568f-4ca5-922d-5f6142fe8e59", "node_type": "1", "metadata": {"window": "Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "original_text": "wise fully connected feed-forward network. "}, "hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "class_name": "RelatedNodeInfo"}}, "hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "start_char_idx": 7064, "end_char_idx": 7204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "acb5016e-568f-4ca5-922d-5f6142fe8e59": {"__data__": {"id_": "acb5016e-568f-4ca5-922d-5f6142fe8e59", "embedding": null, "metadata": {"window": "Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "original_text": "wise fully connected feed-forward network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17a79e0b-5fb8-4ee2-93f9-1f34d1cbe6d6", "node_type": "1", "metadata": {"window": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network. ", "original_text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n"}, "hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af5a4505-0f9f-4fec-9b3c-7de6ed9daf42", "node_type": "1", "metadata": {"window": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "original_text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. "}, "hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "class_name": "RelatedNodeInfo"}}, "hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "text": "wise fully connected feed-forward network. ", "start_char_idx": 7204, "end_char_idx": 7247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af5a4505-0f9f-4fec-9b3c-7de6ed9daf42": {"__data__": {"id_": "af5a4505-0f9f-4fec-9b3c-7de6ed9daf42", "embedding": null, "metadata": {"window": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "original_text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "acb5016e-568f-4ca5-922d-5f6142fe8e59", "node_type": "1", "metadata": {"window": "Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "original_text": "wise fully connected feed-forward network. "}, "hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d59a11bd-1bf1-4f6f-a25d-40ee6b5e4408", "node_type": "1", "metadata": {"window": "wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "original_text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. "}, "hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "class_name": "RelatedNodeInfo"}}, "hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "start_char_idx": 7247, "end_char_idx": 7358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d59a11bd-1bf1-4f6f-a25d-40ee6b5e4408": {"__data__": {"id_": "d59a11bd-1bf1-4f6f-a25d-40ee6b5e4408", "embedding": null, "metadata": {"window": "wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "original_text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af5a4505-0f9f-4fec-9b3c-7de6ed9daf42", "node_type": "1", "metadata": {"window": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "original_text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. "}, "hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0cb24c87-db11-4316-9919-0c4433d07e9b", "node_type": "1", "metadata": {"window": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "original_text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n"}, "hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "class_name": "RelatedNodeInfo"}}, "hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "start_char_idx": 7358, "end_char_idx": 7498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0cb24c87-db11-4316-9919-0c4433d07e9b": {"__data__": {"id_": "0cb24c87-db11-4316-9919-0c4433d07e9b", "embedding": null, "metadata": {"window": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "original_text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d59a11bd-1bf1-4f6f-a25d-40ee6b5e4408", "node_type": "1", "metadata": {"window": "wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "original_text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. "}, "hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f750aa59-52f3-4bab-b6a5-d2ff55b3d102", "node_type": "1", "metadata": {"window": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "original_text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. "}, "hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "class_name": "RelatedNodeInfo"}}, "hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "start_char_idx": 7498, "end_char_idx": 7646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f750aa59-52f3-4bab-b6a5-d2ff55b3d102": {"__data__": {"id_": "f750aa59-52f3-4bab-b6a5-d2ff55b3d102", "embedding": null, "metadata": {"window": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "original_text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0cb24c87-db11-4316-9919-0c4433d07e9b", "node_type": "1", "metadata": {"window": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "original_text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n"}, "hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38c62408-91c1-4d22-a21c-ba5a586c364d", "node_type": "1", "metadata": {"window": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "original_text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. "}, "hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "class_name": "RelatedNodeInfo"}}, "hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "start_char_idx": 7646, "end_char_idx": 7720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38c62408-91c1-4d22-a21c-ba5a586c364d": {"__data__": {"id_": "38c62408-91c1-4d22-a21c-ba5a586c364d", "embedding": null, "metadata": {"window": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "original_text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f750aa59-52f3-4bab-b6a5-d2ff55b3d102", "node_type": "1", "metadata": {"window": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "original_text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. "}, "hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a2c47aa6-a2ab-46c4-87b9-6fa8c6229638", "node_type": "1", "metadata": {"window": "Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "original_text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. "}, "hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "class_name": "RelatedNodeInfo"}}, "hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "start_char_idx": 7720, "end_char_idx": 7890, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2c47aa6-a2ab-46c4-87b9-6fa8c6229638": {"__data__": {"id_": "a2c47aa6-a2ab-46c4-87b9-6fa8c6229638", "embedding": null, "metadata": {"window": "Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "original_text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38c62408-91c1-4d22-a21c-ba5a586c364d", "node_type": "1", "metadata": {"window": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "original_text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. "}, "hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "921b0380-94bc-4998-9540-502fdae5f310", "node_type": "1", "metadata": {"window": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "original_text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. "}, "hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "class_name": "RelatedNodeInfo"}}, "hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "start_char_idx": 7890, "end_char_idx": 8009, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "921b0380-94bc-4998-9540-502fdae5f310": {"__data__": {"id_": "921b0380-94bc-4998-9540-502fdae5f310", "embedding": null, "metadata": {"window": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "original_text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a2c47aa6-a2ab-46c4-87b9-6fa8c6229638", "node_type": "1", "metadata": {"window": "Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "original_text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. "}, "hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b5ded902-f530-4973-9cb5-04ccbd445d56", "node_type": "1", "metadata": {"window": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "original_text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n"}, "hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "class_name": "RelatedNodeInfo"}}, "hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "start_char_idx": 8009, "end_char_idx": 8135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5ded902-f530-4973-9cb5-04ccbd445d56": {"__data__": {"id_": "b5ded902-f530-4973-9cb5-04ccbd445d56", "embedding": null, "metadata": {"window": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "original_text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "921b0380-94bc-4998-9540-502fdae5f310", "node_type": "1", "metadata": {"window": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "original_text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. "}, "hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a195498e-4c95-42fe-b3d7-2c6130ffaa4a", "node_type": "1", "metadata": {"window": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "original_text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. "}, "hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "class_name": "RelatedNodeInfo"}}, "hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "start_char_idx": 8135, "end_char_idx": 8329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a195498e-4c95-42fe-b3d7-2c6130ffaa4a": {"__data__": {"id_": "a195498e-4c95-42fe-b3d7-2c6130ffaa4a", "embedding": null, "metadata": {"window": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "original_text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b5ded902-f530-4973-9cb5-04ccbd445d56", "node_type": "1", "metadata": {"window": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "original_text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n"}, "hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9cb3716a-f958-4fd6-a79f-5b7adb06f5bf", "node_type": "1", "metadata": {"window": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "original_text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n"}, "hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "class_name": "RelatedNodeInfo"}}, "hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "start_char_idx": 8329, "end_char_idx": 8503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cb3716a-f958-4fd6-a79f-5b7adb06f5bf": {"__data__": {"id_": "9cb3716a-f958-4fd6-a79f-5b7adb06f5bf", "embedding": null, "metadata": {"window": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "original_text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a195498e-4c95-42fe-b3d7-2c6130ffaa4a", "node_type": "1", "metadata": {"window": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "original_text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. "}, "hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7031bf94-c7e9-4318-9ae9-e0d36992ff5e", "node_type": "1", "metadata": {"window": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "original_text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). "}, "hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "class_name": "RelatedNodeInfo"}}, "hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "start_char_idx": 8503, "end_char_idx": 8680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7031bf94-c7e9-4318-9ae9-e0d36992ff5e": {"__data__": {"id_": "7031bf94-c7e9-4318-9ae9-e0d36992ff5e", "embedding": null, "metadata": {"window": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "original_text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9cb3716a-f958-4fd6-a79f-5b7adb06f5bf", "node_type": "1", "metadata": {"window": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "original_text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n"}, "hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "009128c4-951a-453a-9f4a-32703bf47a7f", "node_type": "1", "metadata": {"window": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "original_text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. "}, "hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "class_name": "RelatedNodeInfo"}}, "hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "start_char_idx": 8680, "end_char_idx": 8791, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "009128c4-951a-453a-9f4a-32703bf47a7f": {"__data__": {"id_": "009128c4-951a-453a-9f4a-32703bf47a7f", "embedding": null, "metadata": {"window": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "original_text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7031bf94-c7e9-4318-9ae9-e0d36992ff5e", "node_type": "1", "metadata": {"window": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "original_text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). "}, "hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05cac70a-20e0-4117-bf62-ba7a6788fc17", "node_type": "1", "metadata": {"window": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "original_text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. "}, "hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "class_name": "RelatedNodeInfo"}}, "hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "start_char_idx": 8791, "end_char_idx": 8875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05cac70a-20e0-4117-bf62-ba7a6788fc17": {"__data__": {"id_": "05cac70a-20e0-4117-bf62-ba7a6788fc17", "embedding": null, "metadata": {"window": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "original_text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "009128c4-951a-453a-9f4a-32703bf47a7f", "node_type": "1", "metadata": {"window": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "original_text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. "}, "hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be7405f4-3b6d-4c06-892b-3460550939da", "node_type": "1", "metadata": {"window": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "original_text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n"}, "hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "class_name": "RelatedNodeInfo"}}, "hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "start_char_idx": 8875, "end_char_idx": 9011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be7405f4-3b6d-4c06-892b-3460550939da": {"__data__": {"id_": "be7405f4-3b6d-4c06-892b-3460550939da", "embedding": null, "metadata": {"window": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "original_text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05cac70a-20e0-4117-bf62-ba7a6788fc17", "node_type": "1", "metadata": {"window": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "original_text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. "}, "hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6814fc5f-87f0-4d9a-917d-624af8e142da", "node_type": "1", "metadata": {"window": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "original_text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n"}, "hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "class_name": "RelatedNodeInfo"}}, "hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "start_char_idx": 9011, "end_char_idx": 9098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6814fc5f-87f0-4d9a-917d-624af8e142da": {"__data__": {"id_": "6814fc5f-87f0-4d9a-917d-624af8e142da", "embedding": null, "metadata": {"window": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "original_text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be7405f4-3b6d-4c06-892b-3460550939da", "node_type": "1", "metadata": {"window": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "original_text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n"}, "hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a516d7f0-1969-495e-9e6c-da0282577802", "node_type": "1", "metadata": {"window": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "original_text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. "}, "hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "class_name": "RelatedNodeInfo"}}, "hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "start_char_idx": 9098, "end_char_idx": 9204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a516d7f0-1969-495e-9e6c-da0282577802": {"__data__": {"id_": "a516d7f0-1969-495e-9e6c-da0282577802", "embedding": null, "metadata": {"window": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "original_text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6814fc5f-87f0-4d9a-917d-624af8e142da", "node_type": "1", "metadata": {"window": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "original_text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n"}, "hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf30bafe-b6ca-439a-896d-e3ab0e39f1e0", "node_type": "1", "metadata": {"window": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "original_text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. "}, "hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "class_name": "RelatedNodeInfo"}}, "hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "start_char_idx": 9204, "end_char_idx": 9386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf30bafe-b6ca-439a-896d-e3ab0e39f1e0": {"__data__": {"id_": "bf30bafe-b6ca-439a-896d-e3ab0e39f1e0", "embedding": null, "metadata": {"window": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "original_text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a516d7f0-1969-495e-9e6c-da0282577802", "node_type": "1", "metadata": {"window": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "original_text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. "}, "hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f9ea990-ef04-4798-9d9f-00429718cde7", "node_type": "1", "metadata": {"window": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "original_text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. "}, "hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "class_name": "RelatedNodeInfo"}}, "hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "start_char_idx": 9386, "end_char_idx": 9587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f9ea990-ef04-4798-9d9f-00429718cde7": {"__data__": {"id_": "6f9ea990-ef04-4798-9d9f-00429718cde7", "embedding": null, "metadata": {"window": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "original_text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf30bafe-b6ca-439a-896d-e3ab0e39f1e0", "node_type": "1", "metadata": {"window": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "original_text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. "}, "hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a616492d-b519-4773-9425-d251d4d7f21c", "node_type": "1", "metadata": {"window": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "original_text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. "}, "hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "class_name": "RelatedNodeInfo"}}, "hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "start_char_idx": 9587, "end_char_idx": 9678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a616492d-b519-4773-9425-d251d4d7f21c": {"__data__": {"id_": "a616492d-b519-4773-9425-d251d4d7f21c", "embedding": null, "metadata": {"window": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "original_text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f9ea990-ef04-4798-9d9f-00429718cde7", "node_type": "1", "metadata": {"window": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "original_text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. "}, "hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8935938a-5e89-40c3-9836-cb83fe60274f", "node_type": "1", "metadata": {"window": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "original_text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n"}, "hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "class_name": "RelatedNodeInfo"}}, "hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "start_char_idx": 9678, "end_char_idx": 9790, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8935938a-5e89-40c3-9836-cb83fe60274f": {"__data__": {"id_": "8935938a-5e89-40c3-9836-cb83fe60274f", "embedding": null, "metadata": {"window": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "original_text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a616492d-b519-4773-9425-d251d4d7f21c", "node_type": "1", "metadata": {"window": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "original_text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. "}, "hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e3578190-7f0f-4371-a82e-9f88cc97a72b", "node_type": "1", "metadata": {"window": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "original_text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. "}, "hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "class_name": "RelatedNodeInfo"}}, "hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "start_char_idx": 9790, "end_char_idx": 9996, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3578190-7f0f-4371-a82e-9f88cc97a72b": {"__data__": {"id_": "e3578190-7f0f-4371-a82e-9f88cc97a72b", "embedding": null, "metadata": {"window": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "original_text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8935938a-5e89-40c3-9836-cb83fe60274f", "node_type": "1", "metadata": {"window": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "original_text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n"}, "hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db6c2ba8-0d2f-476f-87a3-99cedaf7d8ae", "node_type": "1", "metadata": {"window": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n", "original_text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. "}, "hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "class_name": "RelatedNodeInfo"}}, "hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "start_char_idx": 9996, "end_char_idx": 10159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db6c2ba8-0d2f-476f-87a3-99cedaf7d8ae": {"__data__": {"id_": "db6c2ba8-0d2f-476f-87a3-99cedaf7d8ae", "embedding": null, "metadata": {"window": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n", "original_text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e3578190-7f0f-4371-a82e-9f88cc97a72b", "node_type": "1", "metadata": {"window": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "original_text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. "}, "hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6af0fe96-43ee-4e3c-9d21-fa680793f21b", "node_type": "1", "metadata": {"window": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "original_text": "To counteract this effect, we scale the dot products by1\u221adk.\n"}, "hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "class_name": "RelatedNodeInfo"}}, "hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "start_char_idx": 10159, "end_char_idx": 10324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6af0fe96-43ee-4e3c-9d21-fa680793f21b": {"__data__": {"id_": "6af0fe96-43ee-4e3c-9d21-fa680793f21b", "embedding": null, "metadata": {"window": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "original_text": "To counteract this effect, we scale the dot products by1\u221adk.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db6c2ba8-0d2f-476f-87a3-99cedaf7d8ae", "node_type": "1", "metadata": {"window": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n", "original_text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. "}, "hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2bb734cf-a5e7-494d-a8a8-b118f2ae4cbb", "node_type": "1", "metadata": {"window": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "original_text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. "}, "hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "class_name": "RelatedNodeInfo"}}, "hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "text": "To counteract this effect, we scale the dot products by1\u221adk.\n", "start_char_idx": 10324, "end_char_idx": 10385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2bb734cf-a5e7-494d-a8a8-b118f2ae4cbb": {"__data__": {"id_": "2bb734cf-a5e7-494d-a8a8-b118f2ae4cbb", "embedding": null, "metadata": {"window": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "original_text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6af0fe96-43ee-4e3c-9d21-fa680793f21b", "node_type": "1", "metadata": {"window": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "original_text": "To counteract this effect, we scale the dot products by1\u221adk.\n"}, "hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e208599-32f9-4531-b6d4-856c3921b48e", "node_type": "1", "metadata": {"window": "To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "original_text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. "}, "hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "class_name": "RelatedNodeInfo"}}, "hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "start_char_idx": 10385, "end_char_idx": 10672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e208599-32f9-4531-b6d4-856c3921b48e": {"__data__": {"id_": "4e208599-32f9-4531-b6d4-856c3921b48e", "embedding": null, "metadata": {"window": "To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "original_text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2bb734cf-a5e7-494d-a8a8-b118f2ae4cbb", "node_type": "1", "metadata": {"window": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "original_text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. "}, "hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "12e22c45-8a9a-49c4-a524-6a543f341e7e", "node_type": "1", "metadata": {"window": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "original_text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n"}, "hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "class_name": "RelatedNodeInfo"}}, "hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "start_char_idx": 10672, "end_char_idx": 10827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "12e22c45-8a9a-49c4-a524-6a543f341e7e": {"__data__": {"id_": "12e22c45-8a9a-49c4-a524-6a543f341e7e", "embedding": null, "metadata": {"window": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "original_text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e208599-32f9-4531-b6d4-856c3921b48e", "node_type": "1", "metadata": {"window": "To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "original_text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. "}, "hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df8a007e-b97b-4233-b5b6-766026d2c9df", "node_type": "1", "metadata": {"window": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n", "original_text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. "}, "hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "class_name": "RelatedNodeInfo"}}, "hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "start_char_idx": 10827, "end_char_idx": 10931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df8a007e-b97b-4233-b5b6-766026d2c9df": {"__data__": {"id_": "df8a007e-b97b-4233-b5b6-766026d2c9df", "embedding": null, "metadata": {"window": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n", "original_text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "12e22c45-8a9a-49c4-a524-6a543f341e7e", "node_type": "1", "metadata": {"window": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "original_text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n"}, "hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e83b8184-6d48-4724-a372-f64b16477d69", "node_type": "1", "metadata": {"window": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "original_text": "With a single attention head, averaging inhibits this.\n"}, "hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "class_name": "RelatedNodeInfo"}}, "hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "start_char_idx": 10931, "end_char_idx": 11066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e83b8184-6d48-4724-a372-f64b16477d69": {"__data__": {"id_": "e83b8184-6d48-4724-a372-f64b16477d69", "embedding": null, "metadata": {"window": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "original_text": "With a single attention head, averaging inhibits this.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df8a007e-b97b-4233-b5b6-766026d2c9df", "node_type": "1", "metadata": {"window": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n", "original_text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. "}, "hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ded1c147-465d-478f-add8-152824f768ec", "node_type": "1", "metadata": {"window": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "original_text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. "}, "hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "class_name": "RelatedNodeInfo"}}, "hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "text": "With a single attention head, averaging inhibits this.\n", "start_char_idx": 11066, "end_char_idx": 11121, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ded1c147-465d-478f-add8-152824f768ec": {"__data__": {"id_": "ded1c147-465d-478f-add8-152824f768ec", "embedding": null, "metadata": {"window": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "original_text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e83b8184-6d48-4724-a372-f64b16477d69", "node_type": "1", "metadata": {"window": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "original_text": "With a single attention head, averaging inhibits this.\n"}, "hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0186d006-875e-4f8b-b5fd-8dc80646a88b", "node_type": "1", "metadata": {"window": "With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "original_text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n"}, "hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "class_name": "RelatedNodeInfo"}}, "hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "start_char_idx": 11121, "end_char_idx": 11263, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0186d006-875e-4f8b-b5fd-8dc80646a88b": {"__data__": {"id_": "0186d006-875e-4f8b-b5fd-8dc80646a88b", "embedding": null, "metadata": {"window": "With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "original_text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ded1c147-465d-478f-add8-152824f768ec", "node_type": "1", "metadata": {"window": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "original_text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. "}, "hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dcc39074-bcb5-4b7a-b73a-3c018b0bfadf", "node_type": "1", "metadata": {"window": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads. ", "original_text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n"}, "hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "class_name": "RelatedNodeInfo"}}, "hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "start_char_idx": 11263, "end_char_idx": 11331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcc39074-bcb5-4b7a-b73a-3c018b0bfadf": {"__data__": {"id_": "dcc39074-bcb5-4b7a-b73a-3c018b0bfadf", "embedding": null, "metadata": {"window": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads. ", "original_text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0186d006-875e-4f8b-b5fd-8dc80646a88b", "node_type": "1", "metadata": {"window": "With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "original_text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n"}, "hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b3f725f-ef38-4391-af2c-f67c42807fba", "node_type": "1", "metadata": {"window": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 . ", "original_text": "In this work we employ h= 8 parallel attention layers, or heads. "}, "hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "class_name": "RelatedNodeInfo"}}, "hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "start_char_idx": 11331, "end_char_idx": 11539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b3f725f-ef38-4391-af2c-f67c42807fba": {"__data__": {"id_": "0b3f725f-ef38-4391-af2c-f67c42807fba", "embedding": null, "metadata": {"window": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 . ", "original_text": "In this work we employ h= 8 parallel attention layers, or heads. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dcc39074-bcb5-4b7a-b73a-3c018b0bfadf", "node_type": "1", "metadata": {"window": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads. ", "original_text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n"}, "hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d99df5e4-0bb9-4de1-8911-8b2c6cf02faf", "node_type": "1", "metadata": {"window": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "original_text": "For each of these we use\ndk=dv=dmodel/h= 64 . "}, "hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "class_name": "RelatedNodeInfo"}}, "hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "text": "In this work we employ h= 8 parallel attention layers, or heads. ", "start_char_idx": 11539, "end_char_idx": 11604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d99df5e4-0bb9-4de1-8911-8b2c6cf02faf": {"__data__": {"id_": "d99df5e4-0bb9-4de1-8911-8b2c6cf02faf", "embedding": null, "metadata": {"window": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "original_text": "For each of these we use\ndk=dv=dmodel/h= 64 . "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b3f725f-ef38-4391-af2c-f67c42807fba", "node_type": "1", "metadata": {"window": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 . ", "original_text": "In this work we employ h= 8 parallel attention layers, or heads. "}, "hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e366ced6-91be-45d0-a4de-41412883d2e0", "node_type": "1", "metadata": {"window": "In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "original_text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n"}, "hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "class_name": "RelatedNodeInfo"}}, "hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "text": "For each of these we use\ndk=dv=dmodel/h= 64 . ", "start_char_idx": 11604, "end_char_idx": 11650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e366ced6-91be-45d0-a4de-41412883d2e0": {"__data__": {"id_": "e366ced6-91be-45d0-a4de-41412883d2e0", "embedding": null, "metadata": {"window": "In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "original_text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d99df5e4-0bb9-4de1-8911-8b2c6cf02faf", "node_type": "1", "metadata": {"window": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "original_text": "For each of these we use\ndk=dv=dmodel/h= 64 . "}, "hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f9aa8a2-f160-47fd-a76e-4694b2b584b5", "node_type": "1", "metadata": {"window": "For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "original_text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. "}, "hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "class_name": "RelatedNodeInfo"}}, "hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "start_char_idx": 11650, "end_char_idx": 11792, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f9aa8a2-f160-47fd-a76e-4694b2b584b5": {"__data__": {"id_": "1f9aa8a2-f160-47fd-a76e-4694b2b584b5", "embedding": null, "metadata": {"window": "For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "original_text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e366ced6-91be-45d0-a4de-41412883d2e0", "node_type": "1", "metadata": {"window": "In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "original_text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n"}, "hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c120a26f-d33b-4612-a350-42cca70d9e0a", "node_type": "1", "metadata": {"window": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "original_text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. "}, "hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "class_name": "RelatedNodeInfo"}}, "hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "start_char_idx": 11792, "end_char_idx": 12062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c120a26f-d33b-4612-a350-42cca70d9e0a": {"__data__": {"id_": "c120a26f-d33b-4612-a350-42cca70d9e0a", "embedding": null, "metadata": {"window": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "original_text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f9aa8a2-f160-47fd-a76e-4694b2b584b5", "node_type": "1", "metadata": {"window": "For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "original_text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. "}, "hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee4c4ad8-4c73-4e6d-9329-aad46019453c", "node_type": "1", "metadata": {"window": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers. ", "original_text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n"}, "hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "class_name": "RelatedNodeInfo"}}, "hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "start_char_idx": 12062, "end_char_idx": 12156, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee4c4ad8-4c73-4e6d-9329-aad46019453c": {"__data__": {"id_": "ee4c4ad8-4c73-4e6d-9329-aad46019453c", "embedding": null, "metadata": {"window": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers. ", "original_text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c120a26f-d33b-4612-a350-42cca70d9e0a", "node_type": "1", "metadata": {"window": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "original_text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. "}, "hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58b01272-1d4c-491b-bba5-5930a5ba8db4", "node_type": "1", "metadata": {"window": "This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "original_text": "\u2022The encoder contains self-attention layers. "}, "hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "class_name": "RelatedNodeInfo"}}, "hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "start_char_idx": 12156, "end_char_idx": 12268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58b01272-1d4c-491b-bba5-5930a5ba8db4": {"__data__": {"id_": "58b01272-1d4c-491b-bba5-5930a5ba8db4", "embedding": null, "metadata": {"window": "This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "original_text": "\u2022The encoder contains self-attention layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee4c4ad8-4c73-4e6d-9329-aad46019453c", "node_type": "1", "metadata": {"window": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers. ", "original_text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n"}, "hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1a1c043-ff69-4e42-84ce-e3265fef9334", "node_type": "1", "metadata": {"window": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "original_text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. "}, "hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "class_name": "RelatedNodeInfo"}}, "hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "text": "\u2022The encoder contains self-attention layers. ", "start_char_idx": 12268, "end_char_idx": 12313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1a1c043-ff69-4e42-84ce-e3265fef9334": {"__data__": {"id_": "c1a1c043-ff69-4e42-84ce-e3265fef9334", "embedding": null, "metadata": {"window": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "original_text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58b01272-1d4c-491b-bba5-5930a5ba8db4", "node_type": "1", "metadata": {"window": "This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "original_text": "\u2022The encoder contains self-attention layers. "}, "hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e3cc167-6fc4-4225-b2ad-fec3d46c8044", "node_type": "1", "metadata": {"window": "\u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "original_text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n"}, "hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "class_name": "RelatedNodeInfo"}}, "hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "start_char_idx": 12313, "end_char_idx": 12464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e3cc167-6fc4-4225-b2ad-fec3d46c8044": {"__data__": {"id_": "9e3cc167-6fc4-4225-b2ad-fec3d46c8044", "embedding": null, "metadata": {"window": "\u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "original_text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1a1c043-ff69-4e42-84ce-e3265fef9334", "node_type": "1", "metadata": {"window": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "original_text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. "}, "hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "963e2fea-633e-43d8-a46d-f2ab59dc86ec", "node_type": "1", "metadata": {"window": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "original_text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. "}, "hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "class_name": "RelatedNodeInfo"}}, "hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "start_char_idx": 12464, "end_char_idx": 12559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "963e2fea-633e-43d8-a46d-f2ab59dc86ec": {"__data__": {"id_": "963e2fea-633e-43d8-a46d-f2ab59dc86ec", "embedding": null, "metadata": {"window": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "original_text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e3cc167-6fc4-4225-b2ad-fec3d46c8044", "node_type": "1", "metadata": {"window": "\u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "original_text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n"}, "hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "88d07ca3-30ff-4a24-9ef9-38b983b3429e", "node_type": "1", "metadata": {"window": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "original_text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. "}, "hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "class_name": "RelatedNodeInfo"}}, "hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "start_char_idx": 12559, "end_char_idx": 12720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88d07ca3-30ff-4a24-9ef9-38b983b3429e": {"__data__": {"id_": "88d07ca3-30ff-4a24-9ef9-38b983b3429e", "embedding": null, "metadata": {"window": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "original_text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "963e2fea-633e-43d8-a46d-f2ab59dc86ec", "node_type": "1", "metadata": {"window": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "original_text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. "}, "hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0235db11-9f91-4ea3-84fe-718c3324e24d", "node_type": "1", "metadata": {"window": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n", "original_text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. "}, "hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "class_name": "RelatedNodeInfo"}}, "hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "start_char_idx": 12720, "end_char_idx": 12821, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0235db11-9f91-4ea3-84fe-718c3324e24d": {"__data__": {"id_": "0235db11-9f91-4ea3-84fe-718c3324e24d", "embedding": null, "metadata": {"window": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n", "original_text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88d07ca3-30ff-4a24-9ef9-38b983b3429e", "node_type": "1", "metadata": {"window": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "original_text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. "}, "hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c39a871-8a82-44cc-81c3-3115d102b952", "node_type": "1", "metadata": {"window": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "original_text": "See Figure 2.\n"}, "hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "class_name": "RelatedNodeInfo"}}, "hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "start_char_idx": 12821, "end_char_idx": 12989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c39a871-8a82-44cc-81c3-3115d102b952": {"__data__": {"id_": "7c39a871-8a82-44cc-81c3-3115d102b952", "embedding": null, "metadata": {"window": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "original_text": "See Figure 2.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0235db11-9f91-4ea3-84fe-718c3324e24d", "node_type": "1", "metadata": {"window": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n", "original_text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. "}, "hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b16fb1e-d0cd-4c6b-acd8-7eac406bece2", "node_type": "1", "metadata": {"window": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n", "original_text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. "}, "hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "class_name": "RelatedNodeInfo"}}, "hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "text": "See Figure 2.\n", "start_char_idx": 12989, "end_char_idx": 13003, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b16fb1e-d0cd-4c6b-acd8-7eac406bece2": {"__data__": {"id_": "0b16fb1e-d0cd-4c6b-acd8-7eac406bece2", "embedding": null, "metadata": {"window": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n", "original_text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c39a871-8a82-44cc-81c3-3115d102b952", "node_type": "1", "metadata": {"window": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "original_text": "See Figure 2.\n"}, "hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0faaaf6c-dd07-4285-aecc-bea63e8baa89", "node_type": "1", "metadata": {"window": "See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "original_text": "This\nconsists of two linear transformations with a ReLU activation in between.\n"}, "hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "class_name": "RelatedNodeInfo"}}, "hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "start_char_idx": 13003, "end_char_idx": 13237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0faaaf6c-dd07-4285-aecc-bea63e8baa89": {"__data__": {"id_": "0faaaf6c-dd07-4285-aecc-bea63e8baa89", "embedding": null, "metadata": {"window": "See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "original_text": "This\nconsists of two linear transformations with a ReLU activation in between.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b16fb1e-d0cd-4c6b-acd8-7eac406bece2", "node_type": "1", "metadata": {"window": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n", "original_text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. "}, "hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47bc6e37-8cab-49bd-a27e-90fc8b6e8902", "node_type": "1", "metadata": {"window": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n", "original_text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. "}, "hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "class_name": "RelatedNodeInfo"}}, "hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "text": "This\nconsists of two linear transformations with a ReLU activation in between.\n", "start_char_idx": 13237, "end_char_idx": 13316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47bc6e37-8cab-49bd-a27e-90fc8b6e8902": {"__data__": {"id_": "47bc6e37-8cab-49bd-a27e-90fc8b6e8902", "embedding": null, "metadata": {"window": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n", "original_text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0faaaf6c-dd07-4285-aecc-bea63e8baa89", "node_type": "1", "metadata": {"window": "See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "original_text": "This\nconsists of two linear transformations with a ReLU activation in between.\n"}, "hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2ecf01f-a8ec-454c-bcd7-136bd0d13130", "node_type": "1", "metadata": {"window": "This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "original_text": "Another way of describing this is as two convolutions with kernel size 1.\n"}, "hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "class_name": "RelatedNodeInfo"}}, "hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "start_char_idx": 13316, "end_char_idx": 13474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2ecf01f-a8ec-454c-bcd7-136bd0d13130": {"__data__": {"id_": "e2ecf01f-a8ec-454c-bcd7-136bd0d13130", "embedding": null, "metadata": {"window": "This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "original_text": "Another way of describing this is as two convolutions with kernel size 1.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47bc6e37-8cab-49bd-a27e-90fc8b6e8902", "node_type": "1", "metadata": {"window": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n", "original_text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. "}, "hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70be4d00-a733-48c6-b865-cffaad835a24", "node_type": "1", "metadata": {"window": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "original_text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n"}, "hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "class_name": "RelatedNodeInfo"}}, "hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "text": "Another way of describing this is as two convolutions with kernel size 1.\n", "start_char_idx": 13474, "end_char_idx": 13548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70be4d00-a733-48c6-b865-cffaad835a24": {"__data__": {"id_": "70be4d00-a733-48c6-b865-cffaad835a24", "embedding": null, "metadata": {"window": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "original_text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2ecf01f-a8ec-454c-bcd7-136bd0d13130", "node_type": "1", "metadata": {"window": "This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "original_text": "Another way of describing this is as two convolutions with kernel size 1.\n"}, "hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81b1dde7-2fc8-4dd8-bcc3-bf318e8ee329", "node_type": "1", "metadata": {"window": "Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "original_text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. "}, "hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "class_name": "RelatedNodeInfo"}}, "hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "start_char_idx": 13548, "end_char_idx": 13656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81b1dde7-2fc8-4dd8-bcc3-bf318e8ee329": {"__data__": {"id_": "81b1dde7-2fc8-4dd8-bcc3-bf318e8ee329", "embedding": null, "metadata": {"window": "Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "original_text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70be4d00-a733-48c6-b865-cffaad835a24", "node_type": "1", "metadata": {"window": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "original_text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n"}, "hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "88333afa-d9a9-40a6-b8a4-56e457f4473c", "node_type": "1", "metadata": {"window": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "original_text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. "}, "hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "class_name": "RelatedNodeInfo"}}, "hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "start_char_idx": 13656, "end_char_idx": 13836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "88333afa-d9a9-40a6-b8a4-56e457f4473c": {"__data__": {"id_": "88333afa-d9a9-40a6-b8a4-56e457f4473c", "embedding": null, "metadata": {"window": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "original_text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81b1dde7-2fc8-4dd8-bcc3-bf318e8ee329", "node_type": "1", "metadata": {"window": "Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "original_text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. "}, "hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4f3977e3-8a29-4551-8a1d-a297ce078e80", "node_type": "1", "metadata": {"window": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n", "original_text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. "}, "hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "class_name": "RelatedNodeInfo"}}, "hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "start_char_idx": 13836, "end_char_idx": 13980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4f3977e3-8a29-4551-8a1d-a297ce078e80": {"__data__": {"id_": "4f3977e3-8a29-4551-8a1d-a297ce078e80", "embedding": null, "metadata": {"window": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n", "original_text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "88333afa-d9a9-40a6-b8a4-56e457f4473c", "node_type": "1", "metadata": {"window": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "original_text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. "}, "hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f0443e2f-1630-446b-8308-257dc6b2dff6", "node_type": "1", "metadata": {"window": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "original_text": "In the embedding layers, we multiply those weights by\u221admodel.\n"}, "hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "class_name": "RelatedNodeInfo"}}, "hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "start_char_idx": 13980, "end_char_idx": 14120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f0443e2f-1630-446b-8308-257dc6b2dff6": {"__data__": {"id_": "f0443e2f-1630-446b-8308-257dc6b2dff6", "embedding": null, "metadata": {"window": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "original_text": "In the embedding layers, we multiply those weights by\u221admodel.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4f3977e3-8a29-4551-8a1d-a297ce078e80", "node_type": "1", "metadata": {"window": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n", "original_text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. "}, "hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e103e10-fcbb-47dd-bf10-88d574873f38", "node_type": "1", "metadata": {"window": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "original_text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. "}, "hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "class_name": "RelatedNodeInfo"}}, "hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "text": "In the embedding layers, we multiply those weights by\u221admodel.\n", "start_char_idx": 14120, "end_char_idx": 14182, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e103e10-fcbb-47dd-bf10-88d574873f38": {"__data__": {"id_": "4e103e10-fcbb-47dd-bf10-88d574873f38", "embedding": null, "metadata": {"window": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "original_text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f0443e2f-1630-446b-8308-257dc6b2dff6", "node_type": "1", "metadata": {"window": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "original_text": "In the embedding layers, we multiply those weights by\u221admodel.\n"}, "hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11d2c647-3939-4f1b-9971-abc4fa71af22", "node_type": "1", "metadata": {"window": "In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "original_text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. "}, "hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "class_name": "RelatedNodeInfo"}}, "hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "start_char_idx": 14182, "end_char_idx": 14433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11d2c647-3939-4f1b-9971-abc4fa71af22": {"__data__": {"id_": "11d2c647-3939-4f1b-9971-abc4fa71af22", "embedding": null, "metadata": {"window": "In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "original_text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e103e10-fcbb-47dd-bf10-88d574873f38", "node_type": "1", "metadata": {"window": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "original_text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. "}, "hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "134b664f-504d-446b-a3a3-9b6be377d52c", "node_type": "1", "metadata": {"window": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "original_text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n"}, "hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "class_name": "RelatedNodeInfo"}}, "hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "start_char_idx": 14433, "end_char_idx": 14633, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "134b664f-504d-446b-a3a3-9b6be377d52c": {"__data__": {"id_": "134b664f-504d-446b-a3a3-9b6be377d52c", "embedding": null, "metadata": {"window": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "original_text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11d2c647-3939-4f1b-9971-abc4fa71af22", "node_type": "1", "metadata": {"window": "In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "original_text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. "}, "hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cc8d17cc-d9b0-4ccd-a424-4f68f102302a", "node_type": "1", "metadata": {"window": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "original_text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. "}, "hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "class_name": "RelatedNodeInfo"}}, "hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "start_char_idx": 14633, "end_char_idx": 14792, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cc8d17cc-d9b0-4ccd-a424-4f68f102302a": {"__data__": {"id_": "cc8d17cc-d9b0-4ccd-a424-4f68f102302a", "embedding": null, "metadata": {"window": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "original_text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "134b664f-504d-446b-a3a3-9b6be377d52c", "node_type": "1", "metadata": {"window": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "original_text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n"}, "hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4074611a-652e-4674-b691-72eaea87730f", "node_type": "1", "metadata": {"window": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "original_text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. "}, "hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "class_name": "RelatedNodeInfo"}}, "hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "start_char_idx": 14792, "end_char_idx": 15057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4074611a-652e-4674-b691-72eaea87730f": {"__data__": {"id_": "4074611a-652e-4674-b691-72eaea87730f", "embedding": null, "metadata": {"window": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "original_text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cc8d17cc-d9b0-4ccd-a424-4f68f102302a", "node_type": "1", "metadata": {"window": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "original_text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. "}, "hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "343832e8-b73d-4c34-9b89-6860f978a045", "node_type": "1", "metadata": {"window": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "original_text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n"}, "hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "class_name": "RelatedNodeInfo"}}, "hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "start_char_idx": 15057, "end_char_idx": 15163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "343832e8-b73d-4c34-9b89-6860f978a045": {"__data__": {"id_": "343832e8-b73d-4c34-9b89-6860f978a045", "embedding": null, "metadata": {"window": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "original_text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4074611a-652e-4674-b691-72eaea87730f", "node_type": "1", "metadata": {"window": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "original_text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. "}, "hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81795e78-149b-42cf-af24-b71f252b6807", "node_type": "1", "metadata": {"window": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "original_text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. "}, "hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "class_name": "RelatedNodeInfo"}}, "hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "start_char_idx": 15163, "end_char_idx": 15233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81795e78-149b-42cf-af24-b71f252b6807": {"__data__": {"id_": "81795e78-149b-42cf-af24-b71f252b6807", "embedding": null, "metadata": {"window": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "original_text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "343832e8-b73d-4c34-9b89-6860f978a045", "node_type": "1", "metadata": {"window": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "original_text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n"}, "hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29f1edc5-2a79-4766-bc99-6e118b991f37", "node_type": "1", "metadata": {"window": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "original_text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. "}, "hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "class_name": "RelatedNodeInfo"}}, "hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "start_char_idx": 15233, "end_char_idx": 15427, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29f1edc5-2a79-4766-bc99-6e118b991f37": {"__data__": {"id_": "29f1edc5-2a79-4766-bc99-6e118b991f37", "embedding": null, "metadata": {"window": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "original_text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81795e78-149b-42cf-af24-b71f252b6807", "node_type": "1", "metadata": {"window": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "original_text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. "}, "hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4540548c-17f6-4f28-9f55-232ec2a2c6b5", "node_type": "1", "metadata": {"window": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "original_text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. "}, "hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "class_name": "RelatedNodeInfo"}}, "hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "start_char_idx": 15427, "end_char_idx": 15505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4540548c-17f6-4f28-9f55-232ec2a2c6b5": {"__data__": {"id_": "4540548c-17f6-4f28-9f55-232ec2a2c6b5", "embedding": null, "metadata": {"window": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "original_text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29f1edc5-2a79-4766-bc99-6e118b991f37", "node_type": "1", "metadata": {"window": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "original_text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. "}, "hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "faa4c0e5-ed56-4d65-9726-643575ed2508", "node_type": "1", "metadata": {"window": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "original_text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n"}, "hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "class_name": "RelatedNodeInfo"}}, "hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "start_char_idx": 15505, "end_char_idx": 15569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "faa4c0e5-ed56-4d65-9726-643575ed2508": {"__data__": {"id_": "faa4c0e5-ed56-4d65-9726-643575ed2508", "embedding": null, "metadata": {"window": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "original_text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4540548c-17f6-4f28-9f55-232ec2a2c6b5", "node_type": "1", "metadata": {"window": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "original_text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. "}, "hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "71e14351-6d9f-43fe-8ce5-705df3460b50", "node_type": "1", "metadata": {"window": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "original_text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). "}, "hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "class_name": "RelatedNodeInfo"}}, "hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "start_char_idx": 15569, "end_char_idx": 15775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "71e14351-6d9f-43fe-8ce5-705df3460b50": {"__data__": {"id_": "71e14351-6d9f-43fe-8ce5-705df3460b50", "embedding": null, "metadata": {"window": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "original_text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "faa4c0e5-ed56-4d65-9726-643575ed2508", "node_type": "1", "metadata": {"window": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "original_text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n"}, "hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0566433b-d39c-4efb-8413-c03705156961", "node_type": "1", "metadata": {"window": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "original_text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n"}, "hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "class_name": "RelatedNodeInfo"}}, "hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "start_char_idx": 15775, "end_char_idx": 15940, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0566433b-d39c-4efb-8413-c03705156961": {"__data__": {"id_": "0566433b-d39c-4efb-8413-c03705156961", "embedding": null, "metadata": {"window": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "original_text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "71e14351-6d9f-43fe-8ce5-705df3460b50", "node_type": "1", "metadata": {"window": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "original_text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). "}, "hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66f3f839-c2c2-4b6e-9503-8898f962384f", "node_type": "1", "metadata": {"window": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n", "original_text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. "}, "hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "class_name": "RelatedNodeInfo"}}, "hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "start_char_idx": 15940, "end_char_idx": 16088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66f3f839-c2c2-4b6e-9503-8898f962384f": {"__data__": {"id_": "66f3f839-c2c2-4b6e-9503-8898f962384f", "embedding": null, "metadata": {"window": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n", "original_text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0566433b-d39c-4efb-8413-c03705156961", "node_type": "1", "metadata": {"window": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "original_text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n"}, "hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13cb726a-e88b-47cf-ae32-33cf2168fa16", "node_type": "1", "metadata": {"window": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer. ", "original_text": "Motivating our use of self-attention we\nconsider three desiderata.\n"}, "hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "class_name": "RelatedNodeInfo"}}, "hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "start_char_idx": 16088, "end_char_idx": 16456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13cb726a-e88b-47cf-ae32-33cf2168fa16": {"__data__": {"id_": "13cb726a-e88b-47cf-ae32-33cf2168fa16", "embedding": null, "metadata": {"window": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer. ", "original_text": "Motivating our use of self-attention we\nconsider three desiderata.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66f3f839-c2c2-4b6e-9503-8898f962384f", "node_type": "1", "metadata": {"window": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n", "original_text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. "}, "hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ce9e74ee-fd2a-406f-a8f0-ef3c7f588960", "node_type": "1", "metadata": {"window": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "original_text": "One is the total computational complexity per layer. "}, "hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "class_name": "RelatedNodeInfo"}}, "hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "text": "Motivating our use of self-attention we\nconsider three desiderata.\n", "start_char_idx": 16456, "end_char_idx": 16523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ce9e74ee-fd2a-406f-a8f0-ef3c7f588960": {"__data__": {"id_": "ce9e74ee-fd2a-406f-a8f0-ef3c7f588960", "embedding": null, "metadata": {"window": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "original_text": "One is the total computational complexity per layer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13cb726a-e88b-47cf-ae32-33cf2168fa16", "node_type": "1", "metadata": {"window": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer. ", "original_text": "Motivating our use of self-attention we\nconsider three desiderata.\n"}, "hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb2553b8-5453-4db7-b9e2-c4243fec7a18", "node_type": "1", "metadata": {"window": "Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network. ", "original_text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n"}, "hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "class_name": "RelatedNodeInfo"}}, "hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "text": "One is the total computational complexity per layer. ", "start_char_idx": 16523, "end_char_idx": 16576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb2553b8-5453-4db7-b9e2-c4243fec7a18": {"__data__": {"id_": "cb2553b8-5453-4db7-b9e2-c4243fec7a18", "embedding": null, "metadata": {"window": "Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network. ", "original_text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ce9e74ee-fd2a-406f-a8f0-ef3c7f588960", "node_type": "1", "metadata": {"window": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "original_text": "One is the total computational complexity per layer. "}, "hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d6df087-993e-4d7c-beb7-5841cb230b4c", "node_type": "1", "metadata": {"window": "One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "original_text": "The third is the path length between long-range dependencies in the network. "}, "hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "class_name": "RelatedNodeInfo"}}, "hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "start_char_idx": 16576, "end_char_idx": 16708, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d6df087-993e-4d7c-beb7-5841cb230b4c": {"__data__": {"id_": "0d6df087-993e-4d7c-beb7-5841cb230b4c", "embedding": null, "metadata": {"window": "One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "original_text": "The third is the path length between long-range dependencies in the network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb2553b8-5453-4db7-b9e2-c4243fec7a18", "node_type": "1", "metadata": {"window": "Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network. ", "original_text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n"}, "hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b0a400ef-9637-4189-93b5-a6564f5fd749", "node_type": "1", "metadata": {"window": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "original_text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. "}, "hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "class_name": "RelatedNodeInfo"}}, "hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "text": "The third is the path length between long-range dependencies in the network. ", "start_char_idx": 16708, "end_char_idx": 16785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0a400ef-9637-4189-93b5-a6564f5fd749": {"__data__": {"id_": "b0a400ef-9637-4189-93b5-a6564f5fd749", "embedding": null, "metadata": {"window": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "original_text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d6df087-993e-4d7c-beb7-5841cb230b4c", "node_type": "1", "metadata": {"window": "One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "original_text": "The third is the path length between long-range dependencies in the network. "}, "hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eaa2c36a-7afe-49a8-a058-e67f0221b658", "node_type": "1", "metadata": {"window": "The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "original_text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. "}, "hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "class_name": "RelatedNodeInfo"}}, "hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "start_char_idx": 16785, "end_char_idx": 16874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eaa2c36a-7afe-49a8-a058-e67f0221b658": {"__data__": {"id_": "eaa2c36a-7afe-49a8-a058-e67f0221b658", "embedding": null, "metadata": {"window": "The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "original_text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0a400ef-9637-4189-93b5-a6564f5fd749", "node_type": "1", "metadata": {"window": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "original_text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. "}, "hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf13ee4d-4159-4383-adf5-67b857263377", "node_type": "1", "metadata": {"window": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "original_text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. "}, "hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "class_name": "RelatedNodeInfo"}}, "hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "start_char_idx": 16874, "end_char_idx": 17027, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf13ee4d-4159-4383-adf5-67b857263377": {"__data__": {"id_": "bf13ee4d-4159-4383-adf5-67b857263377", "embedding": null, "metadata": {"window": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "original_text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eaa2c36a-7afe-49a8-a058-e67f0221b658", "node_type": "1", "metadata": {"window": "The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "original_text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. "}, "hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17f13d04-70ee-42ab-9071-87f38aa40527", "node_type": "1", "metadata": {"window": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "original_text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n"}, "hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "class_name": "RelatedNodeInfo"}}, "hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "start_char_idx": 17027, "end_char_idx": 17180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17f13d04-70ee-42ab-9071-87f38aa40527": {"__data__": {"id_": "17f13d04-70ee-42ab-9071-87f38aa40527", "embedding": null, "metadata": {"window": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "original_text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf13ee4d-4159-4383-adf5-67b857263377", "node_type": "1", "metadata": {"window": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "original_text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. "}, "hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08d45d9d-8980-4563-8f72-6926ea2fdc02", "node_type": "1", "metadata": {"window": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "original_text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. "}, "hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "class_name": "RelatedNodeInfo"}}, "hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "start_char_idx": 17180, "end_char_idx": 17320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08d45d9d-8980-4563-8f72-6926ea2fdc02": {"__data__": {"id_": "08d45d9d-8980-4563-8f72-6926ea2fdc02", "embedding": null, "metadata": {"window": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "original_text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17f13d04-70ee-42ab-9071-87f38aa40527", "node_type": "1", "metadata": {"window": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "original_text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n"}, "hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11f8c432-81c3-4721-a9fb-6f8c9e7fab8a", "node_type": "1", "metadata": {"window": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "original_text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. "}, "hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "class_name": "RelatedNodeInfo"}}, "hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "start_char_idx": 17320, "end_char_idx": 17509, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11f8c432-81c3-4721-a9fb-6f8c9e7fab8a": {"__data__": {"id_": "11f8c432-81c3-4721-a9fb-6f8c9e7fab8a", "embedding": null, "metadata": {"window": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "original_text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08d45d9d-8980-4563-8f72-6926ea2fdc02", "node_type": "1", "metadata": {"window": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "original_text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. "}, "hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb4a9275-7c57-414d-b81a-6bcc102f3b99", "node_type": "1", "metadata": {"window": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r). ", "original_text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. "}, "hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "class_name": "RelatedNodeInfo"}}, "hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "start_char_idx": 17509, "end_char_idx": 17857, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb4a9275-7c57-414d-b81a-6bcc102f3b99": {"__data__": {"id_": "eb4a9275-7c57-414d-b81a-6bcc102f3b99", "embedding": null, "metadata": {"window": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r). ", "original_text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11f8c432-81c3-4721-a9fb-6f8c9e7fab8a", "node_type": "1", "metadata": {"window": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "original_text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. "}, "hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d756225f-fe80-4437-8cfb-3116b96edf12", "node_type": "1", "metadata": {"window": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n", "original_text": "This would increase the maximum\npath length to O(n/r). "}, "hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "class_name": "RelatedNodeInfo"}}, "hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "start_char_idx": 17857, "end_char_idx": 18087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d756225f-fe80-4437-8cfb-3116b96edf12": {"__data__": {"id_": "d756225f-fe80-4437-8cfb-3116b96edf12", "embedding": null, "metadata": {"window": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n", "original_text": "This would increase the maximum\npath length to O(n/r). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb4a9275-7c57-414d-b81a-6bcc102f3b99", "node_type": "1", "metadata": {"window": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r). ", "original_text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. "}, "hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da0331bc-5c4d-43de-ac35-952d5e5ef258", "node_type": "1", "metadata": {"window": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "original_text": "We plan to investigate this approach further in future work.\n"}, "hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "class_name": "RelatedNodeInfo"}}, "hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "text": "This would increase the maximum\npath length to O(n/r). ", "start_char_idx": 18087, "end_char_idx": 18142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da0331bc-5c4d-43de-ac35-952d5e5ef258": {"__data__": {"id_": "da0331bc-5c4d-43de-ac35-952d5e5ef258", "embedding": null, "metadata": {"window": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "original_text": "We plan to investigate this approach further in future work.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d756225f-fe80-4437-8cfb-3116b96edf12", "node_type": "1", "metadata": {"window": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n", "original_text": "This would increase the maximum\npath length to O(n/r). "}, "hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70310144-1651-48c2-bc89-6249d170d716", "node_type": "1", "metadata": {"window": "This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "original_text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. "}, "hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "class_name": "RelatedNodeInfo"}}, "hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "text": "We plan to investigate this approach further in future work.\n", "start_char_idx": 18142, "end_char_idx": 18203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70310144-1651-48c2-bc89-6249d170d716": {"__data__": {"id_": "70310144-1651-48c2-bc89-6249d170d716", "embedding": null, "metadata": {"window": "This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "original_text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da0331bc-5c4d-43de-ac35-952d5e5ef258", "node_type": "1", "metadata": {"window": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "original_text": "We plan to investigate this approach further in future work.\n"}, "hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "317bcbf5-2b82-4cfb-b567-d5bd91b7fa1e", "node_type": "1", "metadata": {"window": "We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "original_text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. "}, "hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "class_name": "RelatedNodeInfo"}}, "hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "start_char_idx": 18203, "end_char_idx": 18312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "317bcbf5-2b82-4cfb-b567-d5bd91b7fa1e": {"__data__": {"id_": "317bcbf5-2b82-4cfb-b567-d5bd91b7fa1e", "embedding": null, "metadata": {"window": "We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "original_text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70310144-1651-48c2-bc89-6249d170d716", "node_type": "1", "metadata": {"window": "This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "original_text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. "}, "hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ef6415f-a507-4510-9b31-478a31adc9be", "node_type": "1", "metadata": {"window": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "original_text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). "}, "hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "class_name": "RelatedNodeInfo"}}, "hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "start_char_idx": 18312, "end_char_idx": 18543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ef6415f-a507-4510-9b31-478a31adc9be": {"__data__": {"id_": "1ef6415f-a507-4510-9b31-478a31adc9be", "embedding": null, "metadata": {"window": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "original_text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "317bcbf5-2b82-4cfb-b567-d5bd91b7fa1e", "node_type": "1", "metadata": {"window": "We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "original_text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. "}, "hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14d8456e-d843-400c-9da6-fb336d2cde3a", "node_type": "1", "metadata": {"window": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models. ", "original_text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n"}, "hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "class_name": "RelatedNodeInfo"}}, "hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "start_char_idx": 18543, "end_char_idx": 18728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14d8456e-d843-400c-9da6-fb336d2cde3a": {"__data__": {"id_": "14d8456e-d843-400c-9da6-fb336d2cde3a", "embedding": null, "metadata": {"window": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models. ", "original_text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ef6415f-a507-4510-9b31-478a31adc9be", "node_type": "1", "metadata": {"window": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "original_text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). "}, "hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1cac58d9-f34c-497c-8239-0ce5251e18b5", "node_type": "1", "metadata": {"window": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "original_text": "As side bene\ufb01t, self-attention could yield more interpretable models. "}, "hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "class_name": "RelatedNodeInfo"}}, "hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "start_char_idx": 18728, "end_char_idx": 18920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1cac58d9-f34c-497c-8239-0ce5251e18b5": {"__data__": {"id_": "1cac58d9-f34c-497c-8239-0ce5251e18b5", "embedding": null, "metadata": {"window": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "original_text": "As side bene\ufb01t, self-attention could yield more interpretable models. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14d8456e-d843-400c-9da6-fb336d2cde3a", "node_type": "1", "metadata": {"window": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models. ", "original_text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n"}, "hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6efac16c-1af8-4924-8660-649c4332a3b1", "node_type": "1", "metadata": {"window": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "original_text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. "}, "hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "class_name": "RelatedNodeInfo"}}, "hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "text": "As side bene\ufb01t, self-attention could yield more interpretable models. ", "start_char_idx": 18920, "end_char_idx": 18990, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6efac16c-1af8-4924-8660-649c4332a3b1": {"__data__": {"id_": "6efac16c-1af8-4924-8660-649c4332a3b1", "embedding": null, "metadata": {"window": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "original_text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1cac58d9-f34c-497c-8239-0ce5251e18b5", "node_type": "1", "metadata": {"window": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "original_text": "As side bene\ufb01t, self-attention could yield more interpretable models. "}, "hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ef994b4-9846-44cf-8e1a-26c54baaa968", "node_type": "1", "metadata": {"window": "As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n", "original_text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n"}, "hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "class_name": "RelatedNodeInfo"}}, "hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "start_char_idx": 18990, "end_char_idx": 19091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ef994b4-9846-44cf-8e1a-26c54baaa968": {"__data__": {"id_": "4ef994b4-9846-44cf-8e1a-26c54baaa968", "embedding": null, "metadata": {"window": "As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n", "original_text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6efac16c-1af8-4924-8660-649c4332a3b1", "node_type": "1", "metadata": {"window": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "original_text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. "}, "hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a446516-1302-4557-ad94-435fb631e89c", "node_type": "1", "metadata": {"window": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "original_text": "5 Training\nThis section describes the training regime for our models.\n"}, "hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "class_name": "RelatedNodeInfo"}}, "hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "start_char_idx": 19091, "end_char_idx": 19270, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a446516-1302-4557-ad94-435fb631e89c": {"__data__": {"id_": "6a446516-1302-4557-ad94-435fb631e89c", "embedding": null, "metadata": {"window": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "original_text": "5 Training\nThis section describes the training regime for our models.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ef994b4-9846-44cf-8e1a-26c54baaa968", "node_type": "1", "metadata": {"window": "As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n", "original_text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n"}, "hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e25264d-e5e9-46e0-a31e-81b43f07ab26", "node_type": "1", "metadata": {"window": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "original_text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. "}, "hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "class_name": "RelatedNodeInfo"}}, "hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "text": "5 Training\nThis section describes the training regime for our models.\n", "start_char_idx": 19270, "end_char_idx": 19340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e25264d-e5e9-46e0-a31e-81b43f07ab26": {"__data__": {"id_": "1e25264d-e5e9-46e0-a31e-81b43f07ab26", "embedding": null, "metadata": {"window": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "original_text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a446516-1302-4557-ad94-435fb631e89c", "node_type": "1", "metadata": {"window": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "original_text": "5 Training\nThis section describes the training regime for our models.\n"}, "hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1d4ba13-34a3-4a9f-b16a-e0ed339df62e", "node_type": "1", "metadata": {"window": "5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "original_text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. "}, "hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "class_name": "RelatedNodeInfo"}}, "hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "start_char_idx": 19340, "end_char_idx": 19478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1d4ba13-34a3-4a9f-b16a-e0ed339df62e": {"__data__": {"id_": "c1d4ba13-34a3-4a9f-b16a-e0ed339df62e", "embedding": null, "metadata": {"window": "5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "original_text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e25264d-e5e9-46e0-a31e-81b43f07ab26", "node_type": "1", "metadata": {"window": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "original_text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. "}, "hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed09576e-260f-4834-af24-ae30102ef823", "node_type": "1", "metadata": {"window": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length. ", "original_text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. "}, "hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "class_name": "RelatedNodeInfo"}}, "hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "start_char_idx": 19478, "end_char_idx": 19600, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed09576e-260f-4834-af24-ae30102ef823": {"__data__": {"id_": "ed09576e-260f-4834-af24-ae30102ef823", "embedding": null, "metadata": {"window": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length. ", "original_text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1d4ba13-34a3-4a9f-b16a-e0ed339df62e", "node_type": "1", "metadata": {"window": "5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "original_text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. "}, "hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b8d69af-2e60-47ce-86de-00654a58d49f", "node_type": "1", "metadata": {"window": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "original_text": "Sentence pairs were batched together by approximate sequence length. "}, "hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "class_name": "RelatedNodeInfo"}}, "hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "start_char_idx": 19600, "end_char_idx": 19771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b8d69af-2e60-47ce-86de-00654a58d49f": {"__data__": {"id_": "9b8d69af-2e60-47ce-86de-00654a58d49f", "embedding": null, "metadata": {"window": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "original_text": "Sentence pairs were batched together by approximate sequence length. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed09576e-260f-4834-af24-ae30102ef823", "node_type": "1", "metadata": {"window": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length. ", "original_text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. "}, "hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "885b4009-96d5-45a7-a1bc-7466eaa9ccaa", "node_type": "1", "metadata": {"window": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "original_text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n"}, "hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "class_name": "RelatedNodeInfo"}}, "hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "text": "Sentence pairs were batched together by approximate sequence length. ", "start_char_idx": 19771, "end_char_idx": 19840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "885b4009-96d5-45a7-a1bc-7466eaa9ccaa": {"__data__": {"id_": "885b4009-96d5-45a7-a1bc-7466eaa9ccaa", "embedding": null, "metadata": {"window": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "original_text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b8d69af-2e60-47ce-86de-00654a58d49f", "node_type": "1", "metadata": {"window": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "original_text": "Sentence pairs were batched together by approximate sequence length. "}, "hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "172c0148-ae59-4520-a846-58a63dab3e84", "node_type": "1", "metadata": {"window": "Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "original_text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. "}, "hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "class_name": "RelatedNodeInfo"}}, "hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "start_char_idx": 19840, "end_char_idx": 19964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "172c0148-ae59-4520-a846-58a63dab3e84": {"__data__": {"id_": "172c0148-ae59-4520-a846-58a63dab3e84", "embedding": null, "metadata": {"window": "Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "original_text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "885b4009-96d5-45a7-a1bc-7466eaa9ccaa", "node_type": "1", "metadata": {"window": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "original_text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n"}, "hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c8c03e0-b6d7-4664-9e78-98da56508562", "node_type": "1", "metadata": {"window": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "original_text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. "}, "hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "class_name": "RelatedNodeInfo"}}, "hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "start_char_idx": 19964, "end_char_idx": 20052, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c8c03e0-b6d7-4664-9e78-98da56508562": {"__data__": {"id_": "7c8c03e0-b6d7-4664-9e78-98da56508562", "embedding": null, "metadata": {"window": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "original_text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "172c0148-ae59-4520-a846-58a63dab3e84", "node_type": "1", "metadata": {"window": "Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "original_text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. "}, "hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff686851-c01e-4785-b534-7b164cf06d9e", "node_type": "1", "metadata": {"window": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "original_text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. "}, "hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "class_name": "RelatedNodeInfo"}}, "hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "start_char_idx": 20052, "end_char_idx": 20173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff686851-c01e-4785-b534-7b164cf06d9e": {"__data__": {"id_": "ff686851-c01e-4785-b534-7b164cf06d9e", "embedding": null, "metadata": {"window": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "original_text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c8c03e0-b6d7-4664-9e78-98da56508562", "node_type": "1", "metadata": {"window": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "original_text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. "}, "hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1433f97f-acc9-4a64-92b5-90c9792358a0", "node_type": "1", "metadata": {"window": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n", "original_text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. "}, "hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "class_name": "RelatedNodeInfo"}}, "hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "start_char_idx": 20173, "end_char_idx": 20242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1433f97f-acc9-4a64-92b5-90c9792358a0": {"__data__": {"id_": "1433f97f-acc9-4a64-92b5-90c9792358a0", "embedding": null, "metadata": {"window": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n", "original_text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ff686851-c01e-4785-b534-7b164cf06d9e", "node_type": "1", "metadata": {"window": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "original_text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. "}, "hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "01843387-f23b-46b7-8748-aca8f6f66626", "node_type": "1", "metadata": {"window": "We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "original_text": "The big models were trained for 300,000 steps\n(3.5 days).\n"}, "hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "class_name": "RelatedNodeInfo"}}, "hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "start_char_idx": 20242, "end_char_idx": 20331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01843387-f23b-46b7-8748-aca8f6f66626": {"__data__": {"id_": "01843387-f23b-46b7-8748-aca8f6f66626", "embedding": null, "metadata": {"window": "We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "original_text": "The big models were trained for 300,000 steps\n(3.5 days).\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1433f97f-acc9-4a64-92b5-90c9792358a0", "node_type": "1", "metadata": {"window": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n", "original_text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. "}, "hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72edd542-14f8-427e-816e-0af0203bd762", "node_type": "1", "metadata": {"window": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "original_text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. "}, "hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "class_name": "RelatedNodeInfo"}}, "hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "text": "The big models were trained for 300,000 steps\n(3.5 days).\n", "start_char_idx": 20331, "end_char_idx": 20389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72edd542-14f8-427e-816e-0af0203bd762": {"__data__": {"id_": "72edd542-14f8-427e-816e-0af0203bd762", "embedding": null, "metadata": {"window": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "original_text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "01843387-f23b-46b7-8748-aca8f6f66626", "node_type": "1", "metadata": {"window": "We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "original_text": "The big models were trained for 300,000 steps\n(3.5 days).\n"}, "hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "380bcff7-c5cb-4048-be60-3b6e8e1a0e7c", "node_type": "1", "metadata": {"window": "The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n", "original_text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. "}, "hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "class_name": "RelatedNodeInfo"}}, "hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "start_char_idx": 20389, "end_char_idx": 20468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "380bcff7-c5cb-4048-be60-3b6e8e1a0e7c": {"__data__": {"id_": "380bcff7-c5cb-4048-be60-3b6e8e1a0e7c", "embedding": null, "metadata": {"window": "The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n", "original_text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72edd542-14f8-427e-816e-0af0203bd762", "node_type": "1", "metadata": {"window": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "original_text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. "}, "hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ad2a372-628f-4841-afa0-cacb856d495f", "node_type": "1", "metadata": {"window": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "original_text": "We used\nwarmup _steps = 4000 .\n"}, "hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "class_name": "RelatedNodeInfo"}}, "hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "start_char_idx": 20468, "end_char_idx": 20812, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ad2a372-628f-4841-afa0-cacb856d495f": {"__data__": {"id_": "6ad2a372-628f-4841-afa0-cacb856d495f", "embedding": null, "metadata": {"window": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "original_text": "We used\nwarmup _steps = 4000 .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "380bcff7-c5cb-4048-be60-3b6e8e1a0e7c", "node_type": "1", "metadata": {"window": "The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n", "original_text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. "}, "hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "47a5ee1b-20e4-405c-afd4-2f2a30045ba4", "node_type": "1", "metadata": {"window": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "original_text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. "}, "hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "class_name": "RelatedNodeInfo"}}, "hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "text": "We used\nwarmup _steps = 4000 .\n", "start_char_idx": 20812, "end_char_idx": 20843, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "47a5ee1b-20e4-405c-afd4-2f2a30045ba4": {"__data__": {"id_": "47a5ee1b-20e4-405c-afd4-2f2a30045ba4", "embedding": null, "metadata": {"window": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "original_text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ad2a372-628f-4841-afa0-cacb856d495f", "node_type": "1", "metadata": {"window": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "original_text": "We used\nwarmup _steps = 4000 .\n"}, "hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa302ad9-2c53-43e4-a958-5fe5c7a47ef0", "node_type": "1", "metadata": {"window": "We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n", "original_text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. "}, "hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "class_name": "RelatedNodeInfo"}}, "hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "start_char_idx": 20843, "end_char_idx": 21050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa302ad9-2c53-43e4-a958-5fe5c7a47ef0": {"__data__": {"id_": "aa302ad9-2c53-43e4-a958-5fe5c7a47ef0", "embedding": null, "metadata": {"window": "We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n", "original_text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "47a5ee1b-20e4-405c-afd4-2f2a30045ba4", "node_type": "1", "metadata": {"window": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "original_text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. "}, "hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f9b87d8d-b420-4b4e-b571-583616a11776", "node_type": "1", "metadata": {"window": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "original_text": "For the base model, we use a rate of\nPdrop= 0.1.\n"}, "hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "class_name": "RelatedNodeInfo"}}, "hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "start_char_idx": 21050, "end_char_idx": 21179, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9b87d8d-b420-4b4e-b571-583616a11776": {"__data__": {"id_": "f9b87d8d-b420-4b4e-b571-583616a11776", "embedding": null, "metadata": {"window": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "original_text": "For the base model, we use a rate of\nPdrop= 0.1.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa302ad9-2c53-43e4-a958-5fe5c7a47ef0", "node_type": "1", "metadata": {"window": "We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n", "original_text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. "}, "hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9c95e27-2791-41c2-ad31-6f327abd8b19", "node_type": "1", "metadata": {"window": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "original_text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n"}, "hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "class_name": "RelatedNodeInfo"}}, "hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "text": "For the base model, we use a rate of\nPdrop= 0.1.\n", "start_char_idx": 21179, "end_char_idx": 21228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9c95e27-2791-41c2-ad31-6f327abd8b19": {"__data__": {"id_": "b9c95e27-2791-41c2-ad31-6f327abd8b19", "embedding": null, "metadata": {"window": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "original_text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9b87d8d-b420-4b4e-b571-583616a11776", "node_type": "1", "metadata": {"window": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "original_text": "For the base model, we use a rate of\nPdrop= 0.1.\n"}, "hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8eed128-93ea-4422-a7b0-7da23cd02176", "node_type": "1", "metadata": {"window": "For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "original_text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. "}, "hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "class_name": "RelatedNodeInfo"}}, "hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "start_char_idx": 21228, "end_char_idx": 21424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8eed128-93ea-4422-a7b0-7da23cd02176": {"__data__": {"id_": "d8eed128-93ea-4422-a7b0-7da23cd02176", "embedding": null, "metadata": {"window": "For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "original_text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9c95e27-2791-41c2-ad31-6f327abd8b19", "node_type": "1", "metadata": {"window": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "original_text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n"}, "hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7daa41a9-ad27-42ea-8fd1-d81e015282be", "node_type": "1", "metadata": {"window": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "original_text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n"}, "hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "class_name": "RelatedNodeInfo"}}, "hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "start_char_idx": 21424, "end_char_idx": 21972, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7daa41a9-ad27-42ea-8fd1-d81e015282be": {"__data__": {"id_": "7daa41a9-ad27-42ea-8fd1-d81e015282be", "embedding": null, "metadata": {"window": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "original_text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8eed128-93ea-4422-a7b0-7da23cd02176", "node_type": "1", "metadata": {"window": "For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "original_text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. "}, "hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa5ead81-da0d-4c02-b3ef-58a8b0145080", "node_type": "1", "metadata": {"window": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "original_text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. "}, "hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "class_name": "RelatedNodeInfo"}}, "hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "start_char_idx": 21972, "end_char_idx": 22072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa5ead81-da0d-4c02-b3ef-58a8b0145080": {"__data__": {"id_": "fa5ead81-da0d-4c02-b3ef-58a8b0145080", "embedding": null, "metadata": {"window": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "original_text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7daa41a9-ad27-42ea-8fd1-d81e015282be", "node_type": "1", "metadata": {"window": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "original_text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n"}, "hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed1063c6-378a-4462-9b2e-3431ce0432e6", "node_type": "1", "metadata": {"window": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs. ", "original_text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. "}, "hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "class_name": "RelatedNodeInfo"}}, "hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "start_char_idx": 22072, "end_char_idx": 22364, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed1063c6-378a-4462-9b2e-3431ce0432e6": {"__data__": {"id_": "ed1063c6-378a-4462-9b2e-3431ce0432e6", "embedding": null, "metadata": {"window": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs. ", "original_text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa5ead81-da0d-4c02-b3ef-58a8b0145080", "node_type": "1", "metadata": {"window": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "original_text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. "}, "hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "493699c8-1115-47d1-91fc-369b24d15583", "node_type": "1", "metadata": {"window": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "original_text": "Training took 3.5days on 8P100 GPUs. "}, "hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "class_name": "RelatedNodeInfo"}}, "hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "start_char_idx": 22364, "end_char_idx": 22436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "493699c8-1115-47d1-91fc-369b24d15583": {"__data__": {"id_": "493699c8-1115-47d1-91fc-369b24d15583", "embedding": null, "metadata": {"window": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "original_text": "Training took 3.5days on 8P100 GPUs. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed1063c6-378a-4462-9b2e-3431ce0432e6", "node_type": "1", "metadata": {"window": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs. ", "original_text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. "}, "hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53989144-2a45-4ab3-aff6-c4859b32a359", "node_type": "1", "metadata": {"window": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "original_text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n"}, "hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "class_name": "RelatedNodeInfo"}}, "hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "text": "Training took 3.5days on 8P100 GPUs. ", "start_char_idx": 22436, "end_char_idx": 22473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53989144-2a45-4ab3-aff6-c4859b32a359": {"__data__": {"id_": "53989144-2a45-4ab3-aff6-c4859b32a359", "embedding": null, "metadata": {"window": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "original_text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "493699c8-1115-47d1-91fc-369b24d15583", "node_type": "1", "metadata": {"window": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "original_text": "Training took 3.5days on 8P100 GPUs. "}, "hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e3ec8d78-70af-4fae-8dad-259132426462", "node_type": "1", "metadata": {"window": "Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "original_text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. "}, "hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "class_name": "RelatedNodeInfo"}}, "hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "start_char_idx": 22473, "end_char_idx": 22619, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3ec8d78-70af-4fae-8dad-259132426462": {"__data__": {"id_": "e3ec8d78-70af-4fae-8dad-259132426462", "embedding": null, "metadata": {"window": "Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "original_text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53989144-2a45-4ab3-aff6-c4859b32a359", "node_type": "1", "metadata": {"window": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "original_text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n"}, "hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df98e7e2-33a7-46c1-a015-b0ff2b2b5bf7", "node_type": "1", "metadata": {"window": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "original_text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n"}, "hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "class_name": "RelatedNodeInfo"}}, "hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "start_char_idx": 22619, "end_char_idx": 22851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df98e7e2-33a7-46c1-a015-b0ff2b2b5bf7": {"__data__": {"id_": "df98e7e2-33a7-46c1-a015-b0ff2b2b5bf7", "embedding": null, "metadata": {"window": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "original_text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e3ec8d78-70af-4fae-8dad-259132426462", "node_type": "1", "metadata": {"window": "Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "original_text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. "}, "hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2603a8b1-6c71-4f8a-a478-23827f938b77", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints. ", "original_text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. "}, "hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "class_name": "RelatedNodeInfo"}}, "hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "start_char_idx": 22851, "end_char_idx": 22955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2603a8b1-6c71-4f8a-a478-23827f938b77": {"__data__": {"id_": "2603a8b1-6c71-4f8a-a478-23827f938b77", "embedding": null, "metadata": {"window": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints. ", "original_text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df98e7e2-33a7-46c1-a015-b0ff2b2b5bf7", "node_type": "1", "metadata": {"window": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "original_text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n"}, "hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9c13937-ceff-4157-89d4-cdbc24fce78c", "node_type": "1", "metadata": {"window": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "original_text": "For the big models, we averaged the last 20 checkpoints. "}, "hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "class_name": "RelatedNodeInfo"}}, "hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "start_char_idx": 22955, "end_char_idx": 23088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9c13937-ceff-4157-89d4-cdbc24fce78c": {"__data__": {"id_": "c9c13937-ceff-4157-89d4-cdbc24fce78c", "embedding": null, "metadata": {"window": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "original_text": "For the big models, we averaged the last 20 checkpoints. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2603a8b1-6c71-4f8a-a478-23827f938b77", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints. ", "original_text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. "}, "hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "421653b2-3ca8-4dad-a7ca-f59db757b11d", "node_type": "1", "metadata": {"window": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set. ", "original_text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. "}, "hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "class_name": "RelatedNodeInfo"}}, "hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "text": "For the big models, we averaged the last 20 checkpoints. ", "start_char_idx": 23088, "end_char_idx": 23145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "421653b2-3ca8-4dad-a7ca-f59db757b11d": {"__data__": {"id_": "421653b2-3ca8-4dad-a7ca-f59db757b11d", "embedding": null, "metadata": {"window": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set. ", "original_text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9c13937-ceff-4157-89d4-cdbc24fce78c", "node_type": "1", "metadata": {"window": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "original_text": "For the big models, we averaged the last 20 checkpoints. "}, "hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2257d87-d8d9-4688-89ee-d92a5cf121f2", "node_type": "1", "metadata": {"window": "For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "original_text": "These hyperparameters\nwere chosen after experimentation on the development set. "}, "hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "class_name": "RelatedNodeInfo"}}, "hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "start_char_idx": 23145, "end_char_idx": 23217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2257d87-d8d9-4688-89ee-d92a5cf121f2": {"__data__": {"id_": "c2257d87-d8d9-4688-89ee-d92a5cf121f2", "embedding": null, "metadata": {"window": "For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "original_text": "These hyperparameters\nwere chosen after experimentation on the development set. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "421653b2-3ca8-4dad-a7ca-f59db757b11d", "node_type": "1", "metadata": {"window": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set. ", "original_text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. "}, "hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "31a9db87-4c07-4ded-aa81-5b678dc53ddb", "node_type": "1", "metadata": {"window": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "original_text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n"}, "hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "class_name": "RelatedNodeInfo"}}, "hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "text": "These hyperparameters\nwere chosen after experimentation on the development set. ", "start_char_idx": 23217, "end_char_idx": 23297, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "31a9db87-4c07-4ded-aa81-5b678dc53ddb": {"__data__": {"id_": "31a9db87-4c07-4ded-aa81-5b678dc53ddb", "embedding": null, "metadata": {"window": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "original_text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2257d87-d8d9-4688-89ee-d92a5cf121f2", "node_type": "1", "metadata": {"window": "For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "original_text": "These hyperparameters\nwere chosen after experimentation on the development set. "}, "hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "56ad54b4-39a1-423b-9221-cebd11cb1535", "node_type": "1", "metadata": {"window": "These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "original_text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. "}, "hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "class_name": "RelatedNodeInfo"}}, "hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "start_char_idx": 23297, "end_char_idx": 23409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "56ad54b4-39a1-423b-9221-cebd11cb1535": {"__data__": {"id_": "56ad54b4-39a1-423b-9221-cebd11cb1535", "embedding": null, "metadata": {"window": "These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "original_text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "31a9db87-4c07-4ded-aa81-5b678dc53ddb", "node_type": "1", "metadata": {"window": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "original_text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n"}, "hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e14099c0-6838-46a6-bde3-a27ba473acf7", "node_type": "1", "metadata": {"window": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "original_text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n"}, "hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "class_name": "RelatedNodeInfo"}}, "hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "start_char_idx": 23409, "end_char_idx": 23546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e14099c0-6838-46a6-bde3-a27ba473acf7": {"__data__": {"id_": "e14099c0-6838-46a6-bde3-a27ba473acf7", "embedding": null, "metadata": {"window": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "original_text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "56ad54b4-39a1-423b-9221-cebd11cb1535", "node_type": "1", "metadata": {"window": "These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "original_text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. "}, "hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "27d89205-04a5-42b2-b584-25b54a2c5e3a", "node_type": "1", "metadata": {"window": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "original_text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. "}, "hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "class_name": "RelatedNodeInfo"}}, "hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "start_char_idx": 23546, "end_char_idx": 23765, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "27d89205-04a5-42b2-b584-25b54a2c5e3a": {"__data__": {"id_": "27d89205-04a5-42b2-b584-25b54a2c5e3a", "embedding": null, "metadata": {"window": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "original_text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e14099c0-6838-46a6-bde3-a27ba473acf7", "node_type": "1", "metadata": {"window": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "original_text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n"}, "hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "382c985f-7e83-4bd4-b0cf-40a9ec0bbabf", "node_type": "1", "metadata": {"window": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n", "original_text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. "}, "hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "class_name": "RelatedNodeInfo"}}, "hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "start_char_idx": 23765, "end_char_idx": 24008, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "382c985f-7e83-4bd4-b0cf-40a9ec0bbabf": {"__data__": {"id_": "382c985f-7e83-4bd4-b0cf-40a9ec0bbabf", "embedding": null, "metadata": {"window": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n", "original_text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "27d89205-04a5-42b2-b584-25b54a2c5e3a", "node_type": "1", "metadata": {"window": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "original_text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. "}, "hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdd5e355-ae59-4891-afbe-b5efd7ba62c7", "node_type": "1", "metadata": {"window": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "original_text": "We present these results in Table 3.\n"}, "hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "class_name": "RelatedNodeInfo"}}, "hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "start_char_idx": 24008, "end_char_idx": 24095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdd5e355-ae59-4891-afbe-b5efd7ba62c7": {"__data__": {"id_": "fdd5e355-ae59-4891-afbe-b5efd7ba62c7", "embedding": null, "metadata": {"window": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "original_text": "We present these results in Table 3.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "382c985f-7e83-4bd4-b0cf-40a9ec0bbabf", "node_type": "1", "metadata": {"window": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n", "original_text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. "}, "hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1a3d6a3-7dad-489c-a76f-dcac66f60a9a", "node_type": "1", "metadata": {"window": "We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "original_text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. "}, "hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "class_name": "RelatedNodeInfo"}}, "hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "text": "We present these results in Table 3.\n", "start_char_idx": 24095, "end_char_idx": 24132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1a3d6a3-7dad-489c-a76f-dcac66f60a9a": {"__data__": {"id_": "c1a3d6a3-7dad-489c-a76f-dcac66f60a9a", "embedding": null, "metadata": {"window": "We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "original_text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdd5e355-ae59-4891-afbe-b5efd7ba62c7", "node_type": "1", "metadata": {"window": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "original_text": "We present these results in Table 3.\n"}, "hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac0d6164-b5be-4dea-860d-2c41bc1f91e7", "node_type": "1", "metadata": {"window": "We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "original_text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n"}, "hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "class_name": "RelatedNodeInfo"}}, "hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "start_char_idx": 24132, "end_char_idx": 24310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac0d6164-b5be-4dea-860d-2c41bc1f91e7": {"__data__": {"id_": "ac0d6164-b5be-4dea-860d-2c41bc1f91e7", "embedding": null, "metadata": {"window": "We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "original_text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1a3d6a3-7dad-489c-a76f-dcac66f60a9a", "node_type": "1", "metadata": {"window": "We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "original_text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. "}, "hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6445f9f5-054e-4d50-ae42-ff9b9c93de6c", "node_type": "1", "metadata": {"window": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture. ", "original_text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n"}, "hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "class_name": "RelatedNodeInfo"}}, "hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "start_char_idx": 24310, "end_char_idx": 24423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6445f9f5-054e-4d50-ae42-ff9b9c93de6c": {"__data__": {"id_": "6445f9f5-054e-4d50-ae42-ff9b9c93de6c", "embedding": null, "metadata": {"window": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture. ", "original_text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac0d6164-b5be-4dea-860d-2c41bc1f91e7", "node_type": "1", "metadata": {"window": "We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "original_text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n"}, "hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c9921d9-3942-4f50-a022-d7138b1f7bb5", "node_type": "1", "metadata": {"window": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel. ", "original_text": "8\n\nTable 3: Variations on the Transformer architecture. "}, "hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "class_name": "RelatedNodeInfo"}}, "hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "start_char_idx": 24423, "end_char_idx": 24513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c9921d9-3942-4f50-a022-d7138b1f7bb5": {"__data__": {"id_": "2c9921d9-3942-4f50-a022-d7138b1f7bb5", "embedding": null, "metadata": {"window": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel. ", "original_text": "8\n\nTable 3: Variations on the Transformer architecture. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6445f9f5-054e-4d50-ae42-ff9b9c93de6c", "node_type": "1", "metadata": {"window": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture. ", "original_text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n"}, "hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2bda91ad-676e-4f0a-966b-67c6b5ab87e1", "node_type": "1", "metadata": {"window": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013. ", "original_text": "Unlisted values are identical to those of the base\nmodel. "}, "hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "class_name": "RelatedNodeInfo"}}, "hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "text": "8\n\nTable 3: Variations on the Transformer architecture. ", "start_char_idx": 24513, "end_char_idx": 24569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2bda91ad-676e-4f0a-966b-67c6b5ab87e1": {"__data__": {"id_": "2bda91ad-676e-4f0a-966b-67c6b5ab87e1", "embedding": null, "metadata": {"window": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013. ", "original_text": "Unlisted values are identical to those of the base\nmodel. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c9921d9-3942-4f50-a022-d7138b1f7bb5", "node_type": "1", "metadata": {"window": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel. ", "original_text": "8\n\nTable 3: Variations on the Transformer architecture. "}, "hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8ba53524-5eec-47ab-97a8-5705be2afc48", "node_type": "1", "metadata": {"window": "8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "original_text": "All metrics are on the English-to-German translation development set, newstest2013. "}, "hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "class_name": "RelatedNodeInfo"}}, "hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "text": "Unlisted values are identical to those of the base\nmodel. ", "start_char_idx": 24569, "end_char_idx": 24627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8ba53524-5eec-47ab-97a8-5705be2afc48": {"__data__": {"id_": "8ba53524-5eec-47ab-97a8-5705be2afc48", "embedding": null, "metadata": {"window": "8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "original_text": "All metrics are on the English-to-German translation development set, newstest2013. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2bda91ad-676e-4f0a-966b-67c6b5ab87e1", "node_type": "1", "metadata": {"window": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013. ", "original_text": "Unlisted values are identical to those of the base\nmodel. "}, "hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "10e1364c-a3cb-444e-806c-2f8ed3286691", "node_type": "1", "metadata": {"window": "Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "original_text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n"}, "hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "class_name": "RelatedNodeInfo"}}, "hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "text": "All metrics are on the English-to-German translation development set, newstest2013. ", "start_char_idx": 24627, "end_char_idx": 24711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "10e1364c-a3cb-444e-806c-2f8ed3286691": {"__data__": {"id_": "10e1364c-a3cb-444e-806c-2f8ed3286691", "embedding": null, "metadata": {"window": "Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "original_text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8ba53524-5eec-47ab-97a8-5705be2afc48", "node_type": "1", "metadata": {"window": "8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "original_text": "All metrics are on the English-to-German translation development set, newstest2013. "}, "hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a47f6843-dff6-45a7-a258-0e6252b87f1a", "node_type": "1", "metadata": {"window": "All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "original_text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. "}, "hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "class_name": "RelatedNodeInfo"}}, "hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "start_char_idx": 24711, "end_char_idx": 24840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a47f6843-dff6-45a7-a258-0e6252b87f1a": {"__data__": {"id_": "a47f6843-dff6-45a7-a258-0e6252b87f1a", "embedding": null, "metadata": {"window": "All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "original_text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "10e1364c-a3cb-444e-806c-2f8ed3286691", "node_type": "1", "metadata": {"window": "Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "original_text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n"}, "hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ccbf5e4-8c55-4405-a8ae-f2911bb43668", "node_type": "1", "metadata": {"window": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "original_text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. "}, "hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "class_name": "RelatedNodeInfo"}}, "hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "start_char_idx": 24840, "end_char_idx": 25460, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ccbf5e4-8c55-4405-a8ae-f2911bb43668": {"__data__": {"id_": "4ccbf5e4-8c55-4405-a8ae-f2911bb43668", "embedding": null, "metadata": {"window": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "original_text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a47f6843-dff6-45a7-a258-0e6252b87f1a", "node_type": "1", "metadata": {"window": "All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "original_text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. "}, "hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8de4dc05-24ed-487e-972a-7706bfd8513f", "node_type": "1", "metadata": {"window": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "original_text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. "}, "hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "class_name": "RelatedNodeInfo"}}, "hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "start_char_idx": 25460, "end_char_idx": 25605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8de4dc05-24ed-487e-972a-7706bfd8513f": {"__data__": {"id_": "8de4dc05-24ed-487e-972a-7706bfd8513f", "embedding": null, "metadata": {"window": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "original_text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ccbf5e4-8c55-4405-a8ae-f2911bb43668", "node_type": "1", "metadata": {"window": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "original_text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. "}, "hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d9e5e954-f046-4b50-bb71-2ba21546fcf0", "node_type": "1", "metadata": {"window": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "original_text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n"}, "hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "class_name": "RelatedNodeInfo"}}, "hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "start_char_idx": 25605, "end_char_idx": 25742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d9e5e954-f046-4b50-bb71-2ba21546fcf0": {"__data__": {"id_": "d9e5e954-f046-4b50-bb71-2ba21546fcf0", "embedding": null, "metadata": {"window": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "original_text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8de4dc05-24ed-487e-972a-7706bfd8513f", "node_type": "1", "metadata": {"window": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "original_text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. "}, "hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bcc44948-5a80-4d69-85d1-680beb4506f8", "node_type": "1", "metadata": {"window": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "original_text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n"}, "hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "class_name": "RelatedNodeInfo"}}, "hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "start_char_idx": 25742, "end_char_idx": 25896, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcc44948-5a80-4d69-85d1-680beb4506f8": {"__data__": {"id_": "bcc44948-5a80-4d69-85d1-680beb4506f8", "embedding": null, "metadata": {"window": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "original_text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d9e5e954-f046-4b50-bb71-2ba21546fcf0", "node_type": "1", "metadata": {"window": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "original_text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n"}, "hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c77a5570-3f3b-42f4-be16-0534053ce0c0", "node_type": "1", "metadata": {"window": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "original_text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. "}, "hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "class_name": "RelatedNodeInfo"}}, "hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "start_char_idx": 25896, "end_char_idx": 26136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c77a5570-3f3b-42f4-be16-0534053ce0c0": {"__data__": {"id_": "c77a5570-3f3b-42f4-be16-0534053ce0c0", "embedding": null, "metadata": {"window": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "original_text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bcc44948-5a80-4d69-85d1-680beb4506f8", "node_type": "1", "metadata": {"window": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "original_text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n"}, "hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e894602-9242-4ff0-893a-bc2779f62383", "node_type": "1", "metadata": {"window": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "original_text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. "}, "hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "class_name": "RelatedNodeInfo"}}, "hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "start_char_idx": 26136, "end_char_idx": 26273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e894602-9242-4ff0-893a-bc2779f62383": {"__data__": {"id_": "4e894602-9242-4ff0-893a-bc2779f62383", "embedding": null, "metadata": {"window": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "original_text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c77a5570-3f3b-42f4-be16-0534053ce0c0", "node_type": "1", "metadata": {"window": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "original_text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. "}, "hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6bc83d17-6a53-42b5-9c42-cd27ffc64791", "node_type": "1", "metadata": {"window": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks. ", "original_text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n"}, "hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "class_name": "RelatedNodeInfo"}}, "hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "start_char_idx": 26273, "end_char_idx": 26393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bc83d17-6a53-42b5-9c42-cd27ffc64791": {"__data__": {"id_": "6bc83d17-6a53-42b5-9c42-cd27ffc64791", "embedding": null, "metadata": {"window": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks. ", "original_text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e894602-9242-4ff0-893a-bc2779f62383", "node_type": "1", "metadata": {"window": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "original_text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. "}, "hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a56f9d4-c714-402e-a581-806be4eea15f", "node_type": "1", "metadata": {"window": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "original_text": "We are excited about the future of attention-based models and plan to apply them to other tasks. "}, "hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "class_name": "RelatedNodeInfo"}}, "hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "start_char_idx": 26393, "end_char_idx": 26479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a56f9d4-c714-402e-a581-806be4eea15f": {"__data__": {"id_": "2a56f9d4-c714-402e-a581-806be4eea15f", "embedding": null, "metadata": {"window": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "original_text": "We are excited about the future of attention-based models and plan to apply them to other tasks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6bc83d17-6a53-42b5-9c42-cd27ffc64791", "node_type": "1", "metadata": {"window": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks. ", "original_text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n"}, "hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e177e7c-b119-427a-964f-3feee02c777f", "node_type": "1", "metadata": {"window": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n", "original_text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. "}, "hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "class_name": "RelatedNodeInfo"}}, "hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "text": "We are excited about the future of attention-based models and plan to apply them to other tasks. ", "start_char_idx": 26479, "end_char_idx": 26576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e177e7c-b119-427a-964f-3feee02c777f": {"__data__": {"id_": "1e177e7c-b119-427a-964f-3feee02c777f", "embedding": null, "metadata": {"window": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n", "original_text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a56f9d4-c714-402e-a581-806be4eea15f", "node_type": "1", "metadata": {"window": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "original_text": "We are excited about the future of attention-based models and plan to apply them to other tasks. "}, "hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df23d43e-1716-4858-a2a7-6def496078af", "node_type": "1", "metadata": {"window": "We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "original_text": "Making generation less sequential is another research goals of ours.\n"}, "hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "class_name": "RelatedNodeInfo"}}, "hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "start_char_idx": 26576, "end_char_idx": 26813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df23d43e-1716-4858-a2a7-6def496078af": {"__data__": {"id_": "df23d43e-1716-4858-a2a7-6def496078af", "embedding": null, "metadata": {"window": "We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "original_text": "Making generation less sequential is another research goals of ours.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e177e7c-b119-427a-964f-3feee02c777f", "node_type": "1", "metadata": {"window": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n", "original_text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. "}, "hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25864782-247c-4fb1-9921-1cfc9520a0e7", "node_type": "1", "metadata": {"window": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "original_text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n"}, "hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "class_name": "RelatedNodeInfo"}}, "hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "text": "Making generation less sequential is another research goals of ours.\n", "start_char_idx": 26813, "end_char_idx": 26882, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25864782-247c-4fb1-9921-1cfc9520a0e7": {"__data__": {"id_": "25864782-247c-4fb1-9921-1cfc9520a0e7", "embedding": null, "metadata": {"window": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "original_text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df23d43e-1716-4858-a2a7-6def496078af", "node_type": "1", "metadata": {"window": "We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "original_text": "Making generation less sequential is another research goals of ours.\n"}, "hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e3256ae-dea0-49b4-bb23-e781bccfc588", "node_type": "1", "metadata": {"window": "Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "original_text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n"}, "hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "class_name": "RelatedNodeInfo"}}, "hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "start_char_idx": 26882, "end_char_idx": 26995, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e3256ae-dea0-49b4-bb23-e781bccfc588": {"__data__": {"id_": "1e3256ae-dea0-49b4-bb23-e781bccfc588", "embedding": null, "metadata": {"window": "Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "original_text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25864782-247c-4fb1-9921-1cfc9520a0e7", "node_type": "1", "metadata": {"window": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "original_text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n"}, "hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98786c6f-b387-4437-a9ec-a5c86362103e", "node_type": "1", "metadata": {"window": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization. ", "original_text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. "}, "hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "class_name": "RelatedNodeInfo"}}, "hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "start_char_idx": 26995, "end_char_idx": 27124, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98786c6f-b387-4437-a9ec-a5c86362103e": {"__data__": {"id_": "98786c6f-b387-4437-a9ec-a5c86362103e", "embedding": null, "metadata": {"window": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization. ", "original_text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e3256ae-dea0-49b4-bb23-e781bccfc588", "node_type": "1", "metadata": {"window": "Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "original_text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n"}, "hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4147ce1-30b9-41c9-bdb7-2d348354faa2", "node_type": "1", "metadata": {"window": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n", "original_text": "Layer normalization. "}, "hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "class_name": "RelatedNodeInfo"}}, "hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "start_char_idx": 27124, "end_char_idx": 27196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4147ce1-30b9-41c9-bdb7-2d348354faa2": {"__data__": {"id_": "e4147ce1-30b9-41c9-bdb7-2d348354faa2", "embedding": null, "metadata": {"window": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n", "original_text": "Layer normalization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98786c6f-b387-4437-a9ec-a5c86362103e", "node_type": "1", "metadata": {"window": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization. ", "original_text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. "}, "hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23a2285e-8cab-4323-92b1-f5512c04e83d", "node_type": "1", "metadata": {"window": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "arXiv preprint\narXiv:1607.06450 , 2016.\n"}, "hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "class_name": "RelatedNodeInfo"}}, "hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "text": "Layer normalization. ", "start_char_idx": 27196, "end_char_idx": 27217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23a2285e-8cab-4323-92b1-f5512c04e83d": {"__data__": {"id_": "23a2285e-8cab-4323-92b1-f5512c04e83d", "embedding": null, "metadata": {"window": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "arXiv preprint\narXiv:1607.06450 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4147ce1-30b9-41c9-bdb7-2d348354faa2", "node_type": "1", "metadata": {"window": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n", "original_text": "Layer normalization. "}, "hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1951da2-be88-415d-9225-5c9c46b6d949", "node_type": "1", "metadata": {"window": "Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate. ", "original_text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "class_name": "RelatedNodeInfo"}}, "hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "text": "arXiv preprint\narXiv:1607.06450 , 2016.\n", "start_char_idx": 27217, "end_char_idx": 27257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1951da2-be88-415d-9225-5c9c46b6d949": {"__data__": {"id_": "f1951da2-be88-415d-9225-5c9c46b6d949", "embedding": null, "metadata": {"window": "Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate. ", "original_text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23a2285e-8cab-4323-92b1-f5512c04e83d", "node_type": "1", "metadata": {"window": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "arXiv preprint\narXiv:1607.06450 , 2016.\n"}, "hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cbb3f5eb-76de-4c57-ab3d-a3b930dc78b7", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n", "original_text": "Neural machine translation by jointly\nlearning to align and translate. "}, "hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "class_name": "RelatedNodeInfo"}}, "hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "start_char_idx": 27257, "end_char_idx": 27312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbb3f5eb-76de-4c57-ab3d-a3b930dc78b7": {"__data__": {"id_": "cbb3f5eb-76de-4c57-ab3d-a3b930dc78b7", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n", "original_text": "Neural machine translation by jointly\nlearning to align and translate. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1951da2-be88-415d-9225-5c9c46b6d949", "node_type": "1", "metadata": {"window": "Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate. ", "original_text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81afce5c-9508-4f64-89a9-79a4e611dc57", "node_type": "1", "metadata": {"window": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "original_text": "CoRR , abs/1409.0473, 2014.\n"}, "hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "class_name": "RelatedNodeInfo"}}, "hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "text": "Neural machine translation by jointly\nlearning to align and translate. ", "start_char_idx": 27312, "end_char_idx": 27383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81afce5c-9508-4f64-89a9-79a4e611dc57": {"__data__": {"id_": "81afce5c-9508-4f64-89a9-79a4e611dc57", "embedding": null, "metadata": {"window": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "original_text": "CoRR , abs/1409.0473, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cbb3f5eb-76de-4c57-ab3d-a3b930dc78b7", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n", "original_text": "Neural machine translation by jointly\nlearning to align and translate. "}, "hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a305916-d769-4287-8343-38c10426cd5f", "node_type": "1", "metadata": {"window": "Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le. ", "original_text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . "}, "hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "class_name": "RelatedNodeInfo"}}, "hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "text": "CoRR , abs/1409.0473, 2014.\n", "start_char_idx": 27383, "end_char_idx": 27411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a305916-d769-4287-8343-38c10426cd5f": {"__data__": {"id_": "4a305916-d769-4287-8343-38c10426cd5f", "embedding": null, "metadata": {"window": "Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le. ", "original_text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "81afce5c-9508-4f64-89a9-79a4e611dc57", "node_type": "1", "metadata": {"window": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "original_text": "CoRR , abs/1409.0473, 2014.\n"}, "hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "417bfb71-6976-4075-b8de-8d86115d999a", "node_type": "1", "metadata": {"window": "CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures. ", "original_text": "Le. "}, "hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "class_name": "RelatedNodeInfo"}}, "hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "start_char_idx": 27411, "end_char_idx": 27471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "417bfb71-6976-4075-b8de-8d86115d999a": {"__data__": {"id_": "417bfb71-6976-4075-b8de-8d86115d999a", "embedding": null, "metadata": {"window": "CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures. ", "original_text": "Le. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a305916-d769-4287-8343-38c10426cd5f", "node_type": "1", "metadata": {"window": "Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le. ", "original_text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . "}, "hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "79686c43-8185-45f1-9a0f-07b8ac630d2b", "node_type": "1", "metadata": {"window": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n", "original_text": "Massive exploration of neural\nmachine translation architectures. "}, "hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "class_name": "RelatedNodeInfo"}}, "hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "text": "Le. ", "start_char_idx": 27471, "end_char_idx": 27475, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79686c43-8185-45f1-9a0f-07b8ac630d2b": {"__data__": {"id_": "79686c43-8185-45f1-9a0f-07b8ac630d2b", "embedding": null, "metadata": {"window": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n", "original_text": "Massive exploration of neural\nmachine translation architectures. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "417bfb71-6976-4075-b8de-8d86115d999a", "node_type": "1", "metadata": {"window": "CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures. ", "original_text": "Le. "}, "hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bbcc8129-b03f-4d78-9698-39941bc7f325", "node_type": "1", "metadata": {"window": "Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "original_text": "CoRR , abs/1703.03906, 2017.\n"}, "hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "class_name": "RelatedNodeInfo"}}, "hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "text": "Massive exploration of neural\nmachine translation architectures. ", "start_char_idx": 27475, "end_char_idx": 27540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bbcc8129-b03f-4d78-9698-39941bc7f325": {"__data__": {"id_": "bbcc8129-b03f-4d78-9698-39941bc7f325", "embedding": null, "metadata": {"window": "Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "original_text": "CoRR , abs/1703.03906, 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79686c43-8185-45f1-9a0f-07b8ac630d2b", "node_type": "1", "metadata": {"window": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n", "original_text": "Massive exploration of neural\nmachine translation architectures. "}, "hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1dbce497-4cd2-4af7-98f9-66d70fbd9682", "node_type": "1", "metadata": {"window": "Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading. ", "original_text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. "}, "hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "class_name": "RelatedNodeInfo"}}, "hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "text": "CoRR , abs/1703.03906, 2017.\n", "start_char_idx": 27540, "end_char_idx": 27569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1dbce497-4cd2-4af7-98f9-66d70fbd9682": {"__data__": {"id_": "1dbce497-4cd2-4af7-98f9-66d70fbd9682", "embedding": null, "metadata": {"window": "Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading. ", "original_text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bbcc8129-b03f-4d78-9698-39941bc7f325", "node_type": "1", "metadata": {"window": "Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "original_text": "CoRR , abs/1703.03906, 2017.\n"}, "hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "037f6c8a-a99f-4110-a9c8-1c6ceb24f9ba", "node_type": "1", "metadata": {"window": "CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n", "original_text": "Long short-term memory-networks for machine\nreading. "}, "hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "class_name": "RelatedNodeInfo"}}, "hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "start_char_idx": 27569, "end_char_idx": 27617, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "037f6c8a-a99f-4110-a9c8-1c6ceb24f9ba": {"__data__": {"id_": "037f6c8a-a99f-4110-a9c8-1c6ceb24f9ba", "embedding": null, "metadata": {"window": "CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n", "original_text": "Long short-term memory-networks for machine\nreading. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1dbce497-4cd2-4af7-98f9-66d70fbd9682", "node_type": "1", "metadata": {"window": "Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading. ", "original_text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. "}, "hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9c27a5af-226c-4683-b297-de1d0ddf1c0b", "node_type": "1", "metadata": {"window": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "original_text": "arXiv preprint arXiv:1601.06733 , 2016.\n"}, "hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "class_name": "RelatedNodeInfo"}}, "hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "text": "Long short-term memory-networks for machine\nreading. ", "start_char_idx": 27617, "end_char_idx": 27670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9c27a5af-226c-4683-b297-de1d0ddf1c0b": {"__data__": {"id_": "9c27a5af-226c-4683-b297-de1d0ddf1c0b", "embedding": null, "metadata": {"window": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "original_text": "arXiv preprint arXiv:1601.06733 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "037f6c8a-a99f-4110-a9c8-1c6ceb24f9ba", "node_type": "1", "metadata": {"window": "CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n", "original_text": "Long short-term memory-networks for machine\nreading. "}, "hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e3f8be3-8586-4765-a653-23cd33eb94ef", "node_type": "1", "metadata": {"window": "Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "original_text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. "}, "hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "class_name": "RelatedNodeInfo"}}, "hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "text": "arXiv preprint arXiv:1601.06733 , 2016.\n", "start_char_idx": 27670, "end_char_idx": 27710, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e3f8be3-8586-4765-a653-23cd33eb94ef": {"__data__": {"id_": "9e3f8be3-8586-4765-a653-23cd33eb94ef", "embedding": null, "metadata": {"window": "Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "original_text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9c27a5af-226c-4683-b297-de1d0ddf1c0b", "node_type": "1", "metadata": {"window": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "original_text": "arXiv preprint arXiv:1601.06733 , 2016.\n"}, "hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6401c647-e2c4-4292-94c0-7be9d74ac6c9", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n", "original_text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. "}, "hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "class_name": "RelatedNodeInfo"}}, "hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "start_char_idx": 27710, "end_char_idx": 27818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6401c647-e2c4-4292-94c0-7be9d74ac6c9": {"__data__": {"id_": "6401c647-e2c4-4292-94c0-7be9d74ac6c9", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n", "original_text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e3f8be3-8586-4765-a653-23cd33eb94ef", "node_type": "1", "metadata": {"window": "Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "original_text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. "}, "hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6be37ae7-c407-428a-a78b-031d040ae12c", "node_type": "1", "metadata": {"window": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet. ", "original_text": "CoRR , abs/1406.1078, 2014.\n"}, "hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "class_name": "RelatedNodeInfo"}}, "hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "start_char_idx": 27818, "end_char_idx": 27913, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6be37ae7-c407-428a-a78b-031d040ae12c": {"__data__": {"id_": "6be37ae7-c407-428a-a78b-031d040ae12c", "embedding": null, "metadata": {"window": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet. ", "original_text": "CoRR , abs/1406.1078, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6401c647-e2c4-4292-94c0-7be9d74ac6c9", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n", "original_text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. "}, "hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6146e95f-de56-4efa-bd12-0e3f52b25ce0", "node_type": "1", "metadata": {"window": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions. ", "original_text": "[6]Francois Chollet. "}, "hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "class_name": "RelatedNodeInfo"}}, "hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "text": "CoRR , abs/1406.1078, 2014.\n", "start_char_idx": 27913, "end_char_idx": 27941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6146e95f-de56-4efa-bd12-0e3f52b25ce0": {"__data__": {"id_": "6146e95f-de56-4efa-bd12-0e3f52b25ce0", "embedding": null, "metadata": {"window": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions. ", "original_text": "[6]Francois Chollet. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6be37ae7-c407-428a-a78b-031d040ae12c", "node_type": "1", "metadata": {"window": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet. ", "original_text": "CoRR , abs/1406.1078, 2014.\n"}, "hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7080a58f-7673-4cfb-a349-9070fa075bc5", "node_type": "1", "metadata": {"window": "CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n", "original_text": "Xception: Deep learning with depthwise separable convolutions. "}, "hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "class_name": "RelatedNodeInfo"}}, "hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "text": "[6]Francois Chollet. ", "start_char_idx": 27941, "end_char_idx": 27962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7080a58f-7673-4cfb-a349-9070fa075bc5": {"__data__": {"id_": "7080a58f-7673-4cfb-a349-9070fa075bc5", "embedding": null, "metadata": {"window": "CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n", "original_text": "Xception: Deep learning with depthwise separable convolutions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6146e95f-de56-4efa-bd12-0e3f52b25ce0", "node_type": "1", "metadata": {"window": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions. ", "original_text": "[6]Francois Chollet. "}, "hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26d02779-f73b-4de3-ac0e-9c77f0efc158", "node_type": "1", "metadata": {"window": "[6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n"}, "hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "class_name": "RelatedNodeInfo"}}, "hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "text": "Xception: Deep learning with depthwise separable convolutions. ", "start_char_idx": 27962, "end_char_idx": 28025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26d02779-f73b-4de3-ac0e-9c77f0efc158": {"__data__": {"id_": "26d02779-f73b-4de3-ac0e-9c77f0efc158", "embedding": null, "metadata": {"window": "[6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7080a58f-7673-4cfb-a349-9070fa075bc5", "node_type": "1", "metadata": {"window": "CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n", "original_text": "Xception: Deep learning with depthwise separable convolutions. "}, "hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2935fdaf-0b7a-4dae-a719-23d396f722de", "node_type": "1", "metadata": {"window": "Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "original_text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "class_name": "RelatedNodeInfo"}}, "hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n", "start_char_idx": 28025, "end_char_idx": 28065, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2935fdaf-0b7a-4dae-a719-23d396f722de": {"__data__": {"id_": "2935fdaf-0b7a-4dae-a719-23d396f722de", "embedding": null, "metadata": {"window": "Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "original_text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26d02779-f73b-4de3-ac0e-9c77f0efc158", "node_type": "1", "metadata": {"window": "[6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n"}, "hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8517f9be-b680-41d5-bc3e-6f41fecef6fb", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n", "original_text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. "}, "hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "class_name": "RelatedNodeInfo"}}, "hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "start_char_idx": 28065, "end_char_idx": 28135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8517f9be-b680-41d5-bc3e-6f41fecef6fb": {"__data__": {"id_": "8517f9be-b680-41d5-bc3e-6f41fecef6fb", "embedding": null, "metadata": {"window": "arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n", "original_text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2935fdaf-0b7a-4dae-a719-23d396f722de", "node_type": "1", "metadata": {"window": "Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "original_text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9273c2fa-f8e0-4bdd-9bd4-853bd0fe5f2a", "node_type": "1", "metadata": {"window": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "original_text": "CoRR , abs/1412.3555, 2014.\n"}, "hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "class_name": "RelatedNodeInfo"}}, "hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "start_char_idx": 28135, "end_char_idx": 28213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9273c2fa-f8e0-4bdd-9bd4-853bd0fe5f2a": {"__data__": {"id_": "9273c2fa-f8e0-4bdd-9bd4-853bd0fe5f2a", "embedding": null, "metadata": {"window": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "original_text": "CoRR , abs/1412.3555, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8517f9be-b680-41d5-bc3e-6f41fecef6fb", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n", "original_text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. "}, "hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e28a749-85ea-4e3f-8be5-825a0a392337", "node_type": "1", "metadata": {"window": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning. ", "original_text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. "}, "hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "class_name": "RelatedNodeInfo"}}, "hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "text": "CoRR , abs/1412.3555, 2014.\n", "start_char_idx": 28213, "end_char_idx": 28241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e28a749-85ea-4e3f-8be5-825a0a392337": {"__data__": {"id_": "6e28a749-85ea-4e3f-8be5-825a0a392337", "embedding": null, "metadata": {"window": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning. ", "original_text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9273c2fa-f8e0-4bdd-9bd4-853bd0fe5f2a", "node_type": "1", "metadata": {"window": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "original_text": "CoRR , abs/1412.3555, 2014.\n"}, "hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c3ab43e0-15f1-4d63-b961-2cabc05b99a3", "node_type": "1", "metadata": {"window": "CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n", "original_text": "Convolu-\ntional sequence to sequence learning. "}, "hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "class_name": "RelatedNodeInfo"}}, "hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "start_char_idx": 28241, "end_char_idx": 28324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c3ab43e0-15f1-4d63-b961-2cabc05b99a3": {"__data__": {"id_": "c3ab43e0-15f1-4d63-b961-2cabc05b99a3", "embedding": null, "metadata": {"window": "CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n", "original_text": "Convolu-\ntional sequence to sequence learning. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e28a749-85ea-4e3f-8be5-825a0a392337", "node_type": "1", "metadata": {"window": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning. ", "original_text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. "}, "hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38db8015-33e8-4835-9f62-e025e0ec9948", "node_type": "1", "metadata": {"window": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves. ", "original_text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n"}, "hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "class_name": "RelatedNodeInfo"}}, "hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "text": "Convolu-\ntional sequence to sequence learning. ", "start_char_idx": 28324, "end_char_idx": 28371, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38db8015-33e8-4835-9f62-e025e0ec9948": {"__data__": {"id_": "38db8015-33e8-4835-9f62-e025e0ec9948", "embedding": null, "metadata": {"window": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves. ", "original_text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c3ab43e0-15f1-4d63-b961-2cabc05b99a3", "node_type": "1", "metadata": {"window": "CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n", "original_text": "Convolu-\ntional sequence to sequence learning. "}, "hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c71e3a0b-c1dd-4766-b35f-cb166d35cc60", "node_type": "1", "metadata": {"window": "Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks. ", "original_text": "[9]Alex Graves. "}, "hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "class_name": "RelatedNodeInfo"}}, "hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n", "start_char_idx": 28371, "end_char_idx": 28413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c71e3a0b-c1dd-4766-b35f-cb166d35cc60": {"__data__": {"id_": "c71e3a0b-c1dd-4766-b35f-cb166d35cc60", "embedding": null, "metadata": {"window": "Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks. ", "original_text": "[9]Alex Graves. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38db8015-33e8-4835-9f62-e025e0ec9948", "node_type": "1", "metadata": {"window": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves. ", "original_text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n"}, "hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f08f732d-5787-4bc6-9859-736e345dd848", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n", "original_text": "Generating sequences with recurrent neural networks. "}, "hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "class_name": "RelatedNodeInfo"}}, "hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "text": "[9]Alex Graves. ", "start_char_idx": 28413, "end_char_idx": 28429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f08f732d-5787-4bc6-9859-736e345dd848": {"__data__": {"id_": "f08f732d-5787-4bc6-9859-736e345dd848", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n", "original_text": "Generating sequences with recurrent neural networks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c71e3a0b-c1dd-4766-b35f-cb166d35cc60", "node_type": "1", "metadata": {"window": "Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks. ", "original_text": "[9]Alex Graves. "}, "hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "69f7e83d-4447-4a3c-b82c-97eea5d3473d", "node_type": "1", "metadata": {"window": "[9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "original_text": "arXiv preprint\narXiv:1308.0850 , 2013.\n"}, "hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "class_name": "RelatedNodeInfo"}}, "hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "text": "Generating sequences with recurrent neural networks. ", "start_char_idx": 28429, "end_char_idx": 28482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "69f7e83d-4447-4a3c-b82c-97eea5d3473d": {"__data__": {"id_": "69f7e83d-4447-4a3c-b82c-97eea5d3473d", "embedding": null, "metadata": {"window": "[9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "original_text": "arXiv preprint\narXiv:1308.0850 , 2013.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f08f732d-5787-4bc6-9859-736e345dd848", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n", "original_text": "Generating sequences with recurrent neural networks. "}, "hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "21834ee3-66a1-494b-ad54-799b3ba0de2e", "node_type": "1", "metadata": {"window": "Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition. ", "original_text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. "}, "hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "class_name": "RelatedNodeInfo"}}, "hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "text": "arXiv preprint\narXiv:1308.0850 , 2013.\n", "start_char_idx": 28482, "end_char_idx": 28521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "21834ee3-66a1-494b-ad54-799b3ba0de2e": {"__data__": {"id_": "21834ee3-66a1-494b-ad54-799b3ba0de2e", "embedding": null, "metadata": {"window": "Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition. ", "original_text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "69f7e83d-4447-4a3c-b82c-97eea5d3473d", "node_type": "1", "metadata": {"window": "[9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "original_text": "arXiv preprint\narXiv:1308.0850 , 2013.\n"}, "hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ca59a3e-8014-4a25-8f16-918955fd53d3", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "original_text": "Deep residual learning for im-\nage recognition. "}, "hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "class_name": "RelatedNodeInfo"}}, "hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "start_char_idx": 28521, "end_char_idx": 28581, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ca59a3e-8014-4a25-8f16-918955fd53d3": {"__data__": {"id_": "3ca59a3e-8014-4a25-8f16-918955fd53d3", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "original_text": "Deep residual learning for im-\nage recognition. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "21834ee3-66a1-494b-ad54-799b3ba0de2e", "node_type": "1", "metadata": {"window": "Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition. ", "original_text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. "}, "hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e726fcc4-cd5a-409a-94b1-844b34d5b966", "node_type": "1", "metadata": {"window": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "original_text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n"}, "hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "class_name": "RelatedNodeInfo"}}, "hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "text": "Deep residual learning for im-\nage recognition. ", "start_char_idx": 28581, "end_char_idx": 28629, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e726fcc4-cd5a-409a-94b1-844b34d5b966": {"__data__": {"id_": "e726fcc4-cd5a-409a-94b1-844b34d5b966", "embedding": null, "metadata": {"window": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "original_text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ca59a3e-8014-4a25-8f16-918955fd53d3", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "original_text": "Deep residual learning for im-\nage recognition. "}, "hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cd623b80-c5f1-4ac4-aeb7-46ec43bc8623", "node_type": "1", "metadata": {"window": "Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "original_text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. "}, "hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "class_name": "RelatedNodeInfo"}}, "hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "start_char_idx": 28629, "end_char_idx": 28733, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cd623b80-c5f1-4ac4-aeb7-46ec43bc8623": {"__data__": {"id_": "cd623b80-c5f1-4ac4-aeb7-46ec43bc8623", "embedding": null, "metadata": {"window": "Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "original_text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e726fcc4-cd5a-409a-94b1-844b34d5b966", "node_type": "1", "metadata": {"window": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "original_text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n"}, "hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13d0759f-f770-41a2-8b5a-4501bec0eaf1", "node_type": "1", "metadata": {"window": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "original_text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n"}, "hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "class_name": "RelatedNodeInfo"}}, "hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "start_char_idx": 28733, "end_char_idx": 28810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13d0759f-f770-41a2-8b5a-4501bec0eaf1": {"__data__": {"id_": "13d0759f-f770-41a2-8b5a-4501bec0eaf1", "embedding": null, "metadata": {"window": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "original_text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cd623b80-c5f1-4ac4-aeb7-46ec43bc8623", "node_type": "1", "metadata": {"window": "Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "original_text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. "}, "hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66f02d76-ebf6-441a-be1e-c4e7464be62f", "node_type": "1", "metadata": {"window": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory. ", "original_text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. "}, "hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "class_name": "RelatedNodeInfo"}}, "hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "start_char_idx": 28810, "end_char_idx": 28898, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66f02d76-ebf6-441a-be1e-c4e7464be62f": {"__data__": {"id_": "66f02d76-ebf6-441a-be1e-c4e7464be62f", "embedding": null, "metadata": {"window": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory. ", "original_text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13d0759f-f770-41a2-8b5a-4501bec0eaf1", "node_type": "1", "metadata": {"window": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "original_text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n"}, "hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9132cedb-2eae-4392-9546-c2baa4b76a27", "node_type": "1", "metadata": {"window": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n", "original_text": "Long short-term memory. "}, "hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "class_name": "RelatedNodeInfo"}}, "hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "start_char_idx": 28898, "end_char_idx": 28943, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9132cedb-2eae-4392-9546-c2baa4b76a27": {"__data__": {"id_": "9132cedb-2eae-4392-9546-c2baa4b76a27", "embedding": null, "metadata": {"window": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n", "original_text": "Long short-term memory. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66f02d76-ebf6-441a-be1e-c4e7464be62f", "node_type": "1", "metadata": {"window": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory. ", "original_text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. "}, "hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7440cde8-8a4c-436d-ac6c-82689a25a536", "node_type": "1", "metadata": {"window": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "original_text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n"}, "hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "class_name": "RelatedNodeInfo"}}, "hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "text": "Long short-term memory. ", "start_char_idx": 28943, "end_char_idx": 28967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7440cde8-8a4c-436d-ac6c-82689a25a536": {"__data__": {"id_": "7440cde8-8a4c-436d-ac6c-82689a25a536", "embedding": null, "metadata": {"window": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "original_text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9132cedb-2eae-4392-9546-c2baa4b76a27", "node_type": "1", "metadata": {"window": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n", "original_text": "Long short-term memory. "}, "hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f4ffab7-c5c9-4e63-8642-1696a8dcacea", "node_type": "1", "metadata": {"window": "Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling. ", "original_text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. "}, "hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "class_name": "RelatedNodeInfo"}}, "hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n", "start_char_idx": 28967, "end_char_idx": 29010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f4ffab7-c5c9-4e63-8642-1696a8dcacea": {"__data__": {"id_": "6f4ffab7-c5c9-4e63-8642-1696a8dcacea", "embedding": null, "metadata": {"window": "Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling. ", "original_text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7440cde8-8a4c-436d-ac6c-82689a25a536", "node_type": "1", "metadata": {"window": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "original_text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n"}, "hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33f98a89-00ba-42da-9ef6-76578d2da972", "node_type": "1", "metadata": {"window": "Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n", "original_text": "Exploring\nthe limits of language modeling. "}, "hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "class_name": "RelatedNodeInfo"}}, "hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "start_char_idx": 29010, "end_char_idx": 29093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33f98a89-00ba-42da-9ef6-76578d2da972": {"__data__": {"id_": "33f98a89-00ba-42da-9ef6-76578d2da972", "embedding": null, "metadata": {"window": "Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n", "original_text": "Exploring\nthe limits of language modeling. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f4ffab7-c5c9-4e63-8642-1696a8dcacea", "node_type": "1", "metadata": {"window": "Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling. ", "original_text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. "}, "hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5bb923b-0143-4712-9dfd-c8a78df37618", "node_type": "1", "metadata": {"window": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever. ", "original_text": "arXiv preprint arXiv:1602.02410 , 2016.\n"}, "hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "class_name": "RelatedNodeInfo"}}, "hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "text": "Exploring\nthe limits of language modeling. ", "start_char_idx": 29093, "end_char_idx": 29136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5bb923b-0143-4712-9dfd-c8a78df37618": {"__data__": {"id_": "f5bb923b-0143-4712-9dfd-c8a78df37618", "embedding": null, "metadata": {"window": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever. ", "original_text": "arXiv preprint arXiv:1602.02410 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33f98a89-00ba-42da-9ef6-76578d2da972", "node_type": "1", "metadata": {"window": "Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n", "original_text": "Exploring\nthe limits of language modeling. "}, "hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03a5b238-c617-4352-9174-9c6704dee3f5", "node_type": "1", "metadata": {"window": "Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms. ", "original_text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. "}, "hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "class_name": "RelatedNodeInfo"}}, "hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "text": "arXiv preprint arXiv:1602.02410 , 2016.\n", "start_char_idx": 29136, "end_char_idx": 29176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03a5b238-c617-4352-9174-9c6704dee3f5": {"__data__": {"id_": "03a5b238-c617-4352-9174-9c6704dee3f5", "embedding": null, "metadata": {"window": "Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms. ", "original_text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5bb923b-0143-4712-9dfd-c8a78df37618", "node_type": "1", "metadata": {"window": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever. ", "original_text": "arXiv preprint arXiv:1602.02410 , 2016.\n"}, "hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a19ec2b0-57c5-40a1-a1d5-d29d6879fb69", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n", "original_text": "Neural GPUs learn algorithms. "}, "hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "class_name": "RelatedNodeInfo"}}, "hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. ", "start_char_idx": 29176, "end_char_idx": 29215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a19ec2b0-57c5-40a1-a1d5-d29d6879fb69": {"__data__": {"id_": "a19ec2b0-57c5-40a1-a1d5-d29d6879fb69", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n", "original_text": "Neural GPUs learn algorithms. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03a5b238-c617-4352-9174-9c6704dee3f5", "node_type": "1", "metadata": {"window": "Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms. ", "original_text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. "}, "hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f353364-7c9b-42c0-a833-f6be07d666d1", "node_type": "1", "metadata": {"window": "[14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "original_text": "In International Conference\non Learning Representations (ICLR) , 2016.\n"}, "hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "class_name": "RelatedNodeInfo"}}, "hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "text": "Neural GPUs learn algorithms. ", "start_char_idx": 29215, "end_char_idx": 29245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f353364-7c9b-42c0-a833-f6be07d666d1": {"__data__": {"id_": "0f353364-7c9b-42c0-a833-f6be07d666d1", "embedding": null, "metadata": {"window": "[14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "original_text": "In International Conference\non Learning Representations (ICLR) , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a19ec2b0-57c5-40a1-a1d5-d29d6879fb69", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n", "original_text": "Neural GPUs learn algorithms. "}, "hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7e0dccf-e687-4af8-8b6d-15384bed2280", "node_type": "1", "metadata": {"window": "Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time. ", "original_text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. "}, "hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "class_name": "RelatedNodeInfo"}}, "hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "text": "In International Conference\non Learning Representations (ICLR) , 2016.\n", "start_char_idx": 29245, "end_char_idx": 29316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7e0dccf-e687-4af8-8b6d-15384bed2280": {"__data__": {"id_": "b7e0dccf-e687-4af8-8b6d-15384bed2280", "embedding": null, "metadata": {"window": "Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time. ", "original_text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f353364-7c9b-42c0-a833-f6be07d666d1", "node_type": "1", "metadata": {"window": "[14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "original_text": "In International Conference\non Learning Representations (ICLR) , 2016.\n"}, "hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6aed7f16-9f27-457e-b853-710f09282aa9", "node_type": "1", "metadata": {"window": "In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "original_text": "Neural machine translation in linear time. "}, "hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "class_name": "RelatedNodeInfo"}}, "hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "start_char_idx": 29316, "end_char_idx": 29429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6aed7f16-9f27-457e-b853-710f09282aa9": {"__data__": {"id_": "6aed7f16-9f27-457e-b853-710f09282aa9", "embedding": null, "metadata": {"window": "In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "original_text": "Neural machine translation in linear time. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7e0dccf-e687-4af8-8b6d-15384bed2280", "node_type": "1", "metadata": {"window": "Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time. ", "original_text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. "}, "hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b49253f-6d77-42f4-8842-5c9ff7f5127d", "node_type": "1", "metadata": {"window": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "original_text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n"}, "hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "class_name": "RelatedNodeInfo"}}, "hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "text": "Neural machine translation in linear time. ", "start_char_idx": 29429, "end_char_idx": 29472, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b49253f-6d77-42f4-8842-5c9ff7f5127d": {"__data__": {"id_": "0b49253f-6d77-42f4-8842-5c9ff7f5127d", "embedding": null, "metadata": {"window": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "original_text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6aed7f16-9f27-457e-b853-710f09282aa9", "node_type": "1", "metadata": {"window": "In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "original_text": "Neural machine translation in linear time. "}, "hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1811178e-8522-422c-8b67-492cb99653bf", "node_type": "1", "metadata": {"window": "Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n", "original_text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. "}, "hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "class_name": "RelatedNodeInfo"}}, "hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "start_char_idx": 29472, "end_char_idx": 29514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1811178e-8522-422c-8b67-492cb99653bf": {"__data__": {"id_": "1811178e-8522-422c-8b67-492cb99653bf", "embedding": null, "metadata": {"window": "Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n", "original_text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b49253f-6d77-42f4-8842-5c9ff7f5127d", "node_type": "1", "metadata": {"window": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "original_text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n"}, "hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af9a7f1d-c5ca-4aa3-944d-53d394d33f81", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n", "original_text": "Structured attention networks.\n"}, "hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "class_name": "RelatedNodeInfo"}}, "hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "start_char_idx": 29514, "end_char_idx": 29578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af9a7f1d-c5ca-4aa3-944d-53d394d33f81": {"__data__": {"id_": "af9a7f1d-c5ca-4aa3-944d-53d394d33f81", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n", "original_text": "Structured attention networks.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1811178e-8522-422c-8b67-492cb99653bf", "node_type": "1", "metadata": {"window": "Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n", "original_text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. "}, "hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b154943-09a2-4683-bfca-f5c271971d6e", "node_type": "1", "metadata": {"window": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba. ", "original_text": "InInternational Conference on Learning Representations , 2017.\n"}, "hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "class_name": "RelatedNodeInfo"}}, "hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "text": "Structured attention networks.\n", "start_char_idx": 29578, "end_char_idx": 29609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b154943-09a2-4683-bfca-f5c271971d6e": {"__data__": {"id_": "4b154943-09a2-4683-bfca-f5c271971d6e", "embedding": null, "metadata": {"window": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba. ", "original_text": "InInternational Conference on Learning Representations , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af9a7f1d-c5ca-4aa3-944d-53d394d33f81", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n", "original_text": "Structured attention networks.\n"}, "hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc458765-5b32-487b-bb92-081ee4a2e8f6", "node_type": "1", "metadata": {"window": "Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization. ", "original_text": "[17] Diederik Kingma and Jimmy Ba. "}, "hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "class_name": "RelatedNodeInfo"}}, "hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "text": "InInternational Conference on Learning Representations , 2017.\n", "start_char_idx": 29609, "end_char_idx": 29672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc458765-5b32-487b-bb92-081ee4a2e8f6": {"__data__": {"id_": "dc458765-5b32-487b-bb92-081ee4a2e8f6", "embedding": null, "metadata": {"window": "Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization. ", "original_text": "[17] Diederik Kingma and Jimmy Ba. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b154943-09a2-4683-bfca-f5c271971d6e", "node_type": "1", "metadata": {"window": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba. ", "original_text": "InInternational Conference on Learning Representations , 2017.\n"}, "hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fa94b373-0f02-49e1-a74b-abce227db642", "node_type": "1", "metadata": {"window": "InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n", "original_text": "Adam: A method for stochastic optimization. "}, "hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "class_name": "RelatedNodeInfo"}}, "hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "text": "[17] Diederik Kingma and Jimmy Ba. ", "start_char_idx": 29672, "end_char_idx": 29707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fa94b373-0f02-49e1-a74b-abce227db642": {"__data__": {"id_": "fa94b373-0f02-49e1-a74b-abce227db642", "embedding": null, "metadata": {"window": "InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n", "original_text": "Adam: A method for stochastic optimization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc458765-5b32-487b-bb92-081ee4a2e8f6", "node_type": "1", "metadata": {"window": "Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization. ", "original_text": "[17] Diederik Kingma and Jimmy Ba. "}, "hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "160719d5-4658-4ec5-badc-3e28ffa9df4e", "node_type": "1", "metadata": {"window": "[17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg. ", "original_text": "In ICLR , 2015.\n"}, "hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "class_name": "RelatedNodeInfo"}}, "hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "text": "Adam: A method for stochastic optimization. ", "start_char_idx": 29707, "end_char_idx": 29751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "160719d5-4658-4ec5-badc-3e28ffa9df4e": {"__data__": {"id_": "160719d5-4658-4ec5-badc-3e28ffa9df4e", "embedding": null, "metadata": {"window": "[17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg. ", "original_text": "In ICLR , 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fa94b373-0f02-49e1-a74b-abce227db642", "node_type": "1", "metadata": {"window": "InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n", "original_text": "Adam: A method for stochastic optimization. "}, "hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ffd554d-100e-4c48-88f8-9fd677220fda", "node_type": "1", "metadata": {"window": "Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks. ", "original_text": "[18] Oleksii Kuchaiev and Boris Ginsburg. "}, "hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "class_name": "RelatedNodeInfo"}}, "hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "text": "In ICLR , 2015.\n", "start_char_idx": 29751, "end_char_idx": 29767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ffd554d-100e-4c48-88f8-9fd677220fda": {"__data__": {"id_": "1ffd554d-100e-4c48-88f8-9fd677220fda", "embedding": null, "metadata": {"window": "Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks. ", "original_text": "[18] Oleksii Kuchaiev and Boris Ginsburg. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "160719d5-4658-4ec5-badc-3e28ffa9df4e", "node_type": "1", "metadata": {"window": "[17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg. ", "original_text": "In ICLR , 2015.\n"}, "hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bcdabaed-3d5f-42b4-a49f-a0b75feb5adf", "node_type": "1", "metadata": {"window": "In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n", "original_text": "Factorization tricks for LSTM networks. "}, "hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "class_name": "RelatedNodeInfo"}}, "hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "text": "[18] Oleksii Kuchaiev and Boris Ginsburg. ", "start_char_idx": 29767, "end_char_idx": 29809, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bcdabaed-3d5f-42b4-a49f-a0b75feb5adf": {"__data__": {"id_": "bcdabaed-3d5f-42b4-a49f-a0b75feb5adf", "embedding": null, "metadata": {"window": "In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n", "original_text": "Factorization tricks for LSTM networks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ffd554d-100e-4c48-88f8-9fd677220fda", "node_type": "1", "metadata": {"window": "Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks. ", "original_text": "[18] Oleksii Kuchaiev and Boris Ginsburg. "}, "hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f649fdd1-a021-4868-9088-a11593f46faa", "node_type": "1", "metadata": {"window": "[18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "original_text": "arXiv preprint\narXiv:1703.10722 , 2017.\n"}, "hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "class_name": "RelatedNodeInfo"}}, "hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "text": "Factorization tricks for LSTM networks. ", "start_char_idx": 29809, "end_char_idx": 29849, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f649fdd1-a021-4868-9088-a11593f46faa": {"__data__": {"id_": "f649fdd1-a021-4868-9088-a11593f46faa", "embedding": null, "metadata": {"window": "[18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "original_text": "arXiv preprint\narXiv:1703.10722 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bcdabaed-3d5f-42b4-a49f-a0b75feb5adf", "node_type": "1", "metadata": {"window": "In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n", "original_text": "Factorization tricks for LSTM networks. "}, "hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a72baed6-896f-465f-a48d-4de6898881d4", "node_type": "1", "metadata": {"window": "Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding. ", "original_text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. "}, "hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "class_name": "RelatedNodeInfo"}}, "hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "text": "arXiv preprint\narXiv:1703.10722 , 2017.\n", "start_char_idx": 29849, "end_char_idx": 29889, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a72baed6-896f-465f-a48d-4de6898881d4": {"__data__": {"id_": "a72baed6-896f-465f-a48d-4de6898881d4", "embedding": null, "metadata": {"window": "Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding. ", "original_text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f649fdd1-a021-4868-9088-a11593f46faa", "node_type": "1", "metadata": {"window": "[18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "original_text": "arXiv preprint\narXiv:1703.10722 , 2017.\n"}, "hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "091b31d6-655f-49ce-b6e5-5b19b37c3827", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n", "original_text": "A structured self-attentive sentence embedding. "}, "hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "class_name": "RelatedNodeInfo"}}, "hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "start_char_idx": 29889, "end_char_idx": 29998, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "091b31d6-655f-49ce-b6e5-5b19b37c3827": {"__data__": {"id_": "091b31d6-655f-49ce-b6e5-5b19b37c3827", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n", "original_text": "A structured self-attentive sentence embedding. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a72baed6-896f-465f-a48d-4de6898881d4", "node_type": "1", "metadata": {"window": "Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding. ", "original_text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. "}, "hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cda66ed3-ebec-4f19-8f20-ee2823695c29", "node_type": "1", "metadata": {"window": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser. ", "original_text": "arXiv preprint\narXiv:1703.03130 , 2017.\n"}, "hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "class_name": "RelatedNodeInfo"}}, "hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "text": "A structured self-attentive sentence embedding. ", "start_char_idx": 29998, "end_char_idx": 30046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cda66ed3-ebec-4f19-8f20-ee2823695c29": {"__data__": {"id_": "cda66ed3-ebec-4f19-8f20-ee2823695c29", "embedding": null, "metadata": {"window": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser. ", "original_text": "arXiv preprint\narXiv:1703.03130 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "091b31d6-655f-49ce-b6e5-5b19b37c3827", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n", "original_text": "A structured self-attentive sentence embedding. "}, "hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "adcade97-ec51-4729-88e7-ff564769a2f5", "node_type": "1", "metadata": {"window": "A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention? ", "original_text": "[20] Samy Bengio \u0141ukasz Kaiser. "}, "hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "class_name": "RelatedNodeInfo"}}, "hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "text": "arXiv preprint\narXiv:1703.03130 , 2017.\n", "start_char_idx": 30046, "end_char_idx": 30086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "adcade97-ec51-4729-88e7-ff564769a2f5": {"__data__": {"id_": "adcade97-ec51-4729-88e7-ff564769a2f5", "embedding": null, "metadata": {"window": "A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention? ", "original_text": "[20] Samy Bengio \u0141ukasz Kaiser. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cda66ed3-ebec-4f19-8f20-ee2823695c29", "node_type": "1", "metadata": {"window": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser. ", "original_text": "arXiv preprint\narXiv:1703.03130 , 2017.\n"}, "hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0fd48060-5c91-4dd9-8400-d1152bb6fa1d", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "original_text": "Can active memory replace attention? "}, "hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "class_name": "RelatedNodeInfo"}}, "hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "text": "[20] Samy Bengio \u0141ukasz Kaiser. ", "start_char_idx": 30086, "end_char_idx": 30118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0fd48060-5c91-4dd9-8400-d1152bb6fa1d": {"__data__": {"id_": "0fd48060-5c91-4dd9-8400-d1152bb6fa1d", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "original_text": "Can active memory replace attention? "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "adcade97-ec51-4729-88e7-ff564769a2f5", "node_type": "1", "metadata": {"window": "A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention? ", "original_text": "[20] Samy Bengio \u0141ukasz Kaiser. "}, "hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "25ed5bdc-d0c5-4757-abbe-6569467a6a5e", "node_type": "1", "metadata": {"window": "[20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "original_text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n"}, "hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "class_name": "RelatedNodeInfo"}}, "hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "text": "Can active memory replace attention? ", "start_char_idx": 30118, "end_char_idx": 30155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "25ed5bdc-d0c5-4757-abbe-6569467a6a5e": {"__data__": {"id_": "25ed5bdc-d0c5-4757-abbe-6569467a6a5e", "embedding": null, "metadata": {"window": "[20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "original_text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0fd48060-5c91-4dd9-8400-d1152bb6fa1d", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "original_text": "Can active memory replace attention? "}, "hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "289b7fec-b9a3-4f95-88a6-648de5d104f8", "node_type": "1", "metadata": {"window": "Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation. ", "original_text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. "}, "hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "class_name": "RelatedNodeInfo"}}, "hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "start_char_idx": 30155, "end_char_idx": 30224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "289b7fec-b9a3-4f95-88a6-648de5d104f8": {"__data__": {"id_": "289b7fec-b9a3-4f95-88a6-648de5d104f8", "embedding": null, "metadata": {"window": "Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation. ", "original_text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25ed5bdc-d0c5-4757-abbe-6569467a6a5e", "node_type": "1", "metadata": {"window": "[20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "original_text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n"}, "hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9bf46313-da2a-4a80-be03-a72616ef43ad", "node_type": "1", "metadata": {"window": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n", "original_text": "Effective approaches to attention-\nbased neural machine translation. "}, "hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "class_name": "RelatedNodeInfo"}}, "hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "start_char_idx": 30224, "end_char_idx": 30289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bf46313-da2a-4a80-be03-a72616ef43ad": {"__data__": {"id_": "9bf46313-da2a-4a80-be03-a72616ef43ad", "embedding": null, "metadata": {"window": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n", "original_text": "Effective approaches to attention-\nbased neural machine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "289b7fec-b9a3-4f95-88a6-648de5d104f8", "node_type": "1", "metadata": {"window": "Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation. ", "original_text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. "}, "hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "932146c7-0a65-4e47-86ad-c7baec6e8593", "node_type": "1", "metadata": {"window": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "original_text": "arXiv preprint arXiv:1508.04025 , 2015.\n"}, "hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "class_name": "RelatedNodeInfo"}}, "hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "text": "Effective approaches to attention-\nbased neural machine translation. ", "start_char_idx": 30289, "end_char_idx": 30358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "932146c7-0a65-4e47-86ad-c7baec6e8593": {"__data__": {"id_": "932146c7-0a65-4e47-86ad-c7baec6e8593", "embedding": null, "metadata": {"window": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "original_text": "arXiv preprint arXiv:1508.04025 , 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9bf46313-da2a-4a80-be03-a72616ef43ad", "node_type": "1", "metadata": {"window": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n", "original_text": "Effective approaches to attention-\nbased neural machine translation. "}, "hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1084eb82-e7b5-45f3-859d-e5722980b891", "node_type": "1", "metadata": {"window": "Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel. ", "original_text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. "}, "hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "class_name": "RelatedNodeInfo"}}, "hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "text": "arXiv preprint arXiv:1508.04025 , 2015.\n", "start_char_idx": 30358, "end_char_idx": 30398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1084eb82-e7b5-45f3-859d-e5722980b891": {"__data__": {"id_": "1084eb82-e7b5-45f3-859d-e5722980b891", "embedding": null, "metadata": {"window": "Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel. ", "original_text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "932146c7-0a65-4e47-86ad-c7baec6e8593", "node_type": "1", "metadata": {"window": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "original_text": "arXiv preprint arXiv:1508.04025 , 2015.\n"}, "hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03614dff-210b-42d3-933b-7b2436625b70", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n", "original_text": "A decomposable attention\nmodel. "}, "hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "class_name": "RelatedNodeInfo"}}, "hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "start_char_idx": 30398, "end_char_idx": 30469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03614dff-210b-42d3-933b-7b2436625b70": {"__data__": {"id_": "03614dff-210b-42d3-933b-7b2436625b70", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n", "original_text": "A decomposable attention\nmodel. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1084eb82-e7b5-45f3-859d-e5722980b891", "node_type": "1", "metadata": {"window": "Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel. ", "original_text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. "}, "hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "063fdab0-f91a-492c-bfb3-df009a71c1dd", "node_type": "1", "metadata": {"window": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "original_text": "In Empirical Methods in Natural Language Processing , 2016.\n"}, "hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "class_name": "RelatedNodeInfo"}}, "hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "text": "A decomposable attention\nmodel. ", "start_char_idx": 30469, "end_char_idx": 30501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "063fdab0-f91a-492c-bfb3-df009a71c1dd": {"__data__": {"id_": "063fdab0-f91a-492c-bfb3-df009a71c1dd", "embedding": null, "metadata": {"window": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "original_text": "In Empirical Methods in Natural Language Processing , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03614dff-210b-42d3-933b-7b2436625b70", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n", "original_text": "A decomposable attention\nmodel. "}, "hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68b72124-dc24-4150-a42f-8e6856e96eee", "node_type": "1", "metadata": {"window": "A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization. ", "original_text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. "}, "hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "class_name": "RelatedNodeInfo"}}, "hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "text": "In Empirical Methods in Natural Language Processing , 2016.\n", "start_char_idx": 30501, "end_char_idx": 30561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68b72124-dc24-4150-a42f-8e6856e96eee": {"__data__": {"id_": "68b72124-dc24-4150-a42f-8e6856e96eee", "embedding": null, "metadata": {"window": "A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization. ", "original_text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "063fdab0-f91a-492c-bfb3-df009a71c1dd", "node_type": "1", "metadata": {"window": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "original_text": "In Empirical Methods in Natural Language Processing , 2016.\n"}, "hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ae2785c-c615-448e-892d-f81ed5ffce97", "node_type": "1", "metadata": {"window": "In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n", "original_text": "A deep reinforced model for abstractive\nsummarization. "}, "hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "class_name": "RelatedNodeInfo"}}, "hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "start_char_idx": 30561, "end_char_idx": 30616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ae2785c-c615-448e-892d-f81ed5ffce97": {"__data__": {"id_": "0ae2785c-c615-448e-892d-f81ed5ffce97", "embedding": null, "metadata": {"window": "In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n", "original_text": "A deep reinforced model for abstractive\nsummarization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68b72124-dc24-4150-a42f-8e6856e96eee", "node_type": "1", "metadata": {"window": "A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization. ", "original_text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. "}, "hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "09511f02-0426-4214-ad02-ef45dc0a6d83", "node_type": "1", "metadata": {"window": "[23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf. ", "original_text": "arXiv preprint arXiv:1705.04304 , 2017.\n"}, "hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "class_name": "RelatedNodeInfo"}}, "hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "text": "A deep reinforced model for abstractive\nsummarization. ", "start_char_idx": 30616, "end_char_idx": 30671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "09511f02-0426-4214-ad02-ef45dc0a6d83": {"__data__": {"id_": "09511f02-0426-4214-ad02-ef45dc0a6d83", "embedding": null, "metadata": {"window": "[23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf. ", "original_text": "arXiv preprint arXiv:1705.04304 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ae2785c-c615-448e-892d-f81ed5ffce97", "node_type": "1", "metadata": {"window": "In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n", "original_text": "A deep reinforced model for abstractive\nsummarization. "}, "hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0faf47f0-a2c7-4b1e-a72d-24b0ef5a7ae7", "node_type": "1", "metadata": {"window": "A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models. ", "original_text": "[24] O\ufb01r Press and Lior Wolf. "}, "hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "class_name": "RelatedNodeInfo"}}, "hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "text": "arXiv preprint arXiv:1705.04304 , 2017.\n", "start_char_idx": 30671, "end_char_idx": 30711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0faf47f0-a2c7-4b1e-a72d-24b0ef5a7ae7": {"__data__": {"id_": "0faf47f0-a2c7-4b1e-a72d-24b0ef5a7ae7", "embedding": null, "metadata": {"window": "A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models. ", "original_text": "[24] O\ufb01r Press and Lior Wolf. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "09511f02-0426-4214-ad02-ef45dc0a6d83", "node_type": "1", "metadata": {"window": "[23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf. ", "original_text": "arXiv preprint arXiv:1705.04304 , 2017.\n"}, "hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc232a62-1a1b-4a2b-aa5f-62490741e4d2", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n", "original_text": "Using the output embedding to improve language models. "}, "hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "class_name": "RelatedNodeInfo"}}, "hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "text": "[24] O\ufb01r Press and Lior Wolf. ", "start_char_idx": 30711, "end_char_idx": 30741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc232a62-1a1b-4a2b-aa5f-62490741e4d2": {"__data__": {"id_": "fc232a62-1a1b-4a2b-aa5f-62490741e4d2", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n", "original_text": "Using the output embedding to improve language models. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0faf47f0-a2c7-4b1e-a72d-24b0ef5a7ae7", "node_type": "1", "metadata": {"window": "A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models. ", "original_text": "[24] O\ufb01r Press and Lior Wolf. "}, "hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1dcb122-ab9d-43f4-ab7a-28a1f10adafc", "node_type": "1", "metadata": {"window": "[24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "original_text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n"}, "hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "class_name": "RelatedNodeInfo"}}, "hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "text": "Using the output embedding to improve language models. ", "start_char_idx": 30741, "end_char_idx": 30796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1dcb122-ab9d-43f4-ab7a-28a1f10adafc": {"__data__": {"id_": "c1dcb122-ab9d-43f4-ab7a-28a1f10adafc", "embedding": null, "metadata": {"window": "[24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "original_text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc232a62-1a1b-4a2b-aa5f-62490741e4d2", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n", "original_text": "Using the output embedding to improve language models. "}, "hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a39f99b8-c30f-4114-aca5-5f6122ec39b3", "node_type": "1", "metadata": {"window": "Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units. ", "original_text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. "}, "hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "class_name": "RelatedNodeInfo"}}, "hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n", "start_char_idx": 30796, "end_char_idx": 30836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a39f99b8-c30f-4114-aca5-5f6122ec39b3": {"__data__": {"id_": "a39f99b8-c30f-4114-aca5-5f6122ec39b3", "embedding": null, "metadata": {"window": "Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units. ", "original_text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1dcb122-ab9d-43f4-ab7a-28a1f10adafc", "node_type": "1", "metadata": {"window": "[24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "original_text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n"}, "hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80bd519c-c966-4998-850e-2d7651edd013", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n", "original_text": "Neural machine translation of rare words\nwith subword units. "}, "hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "class_name": "RelatedNodeInfo"}}, "hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "start_char_idx": 30836, "end_char_idx": 30891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80bd519c-c966-4998-850e-2d7651edd013": {"__data__": {"id_": "80bd519c-c966-4998-850e-2d7651edd013", "embedding": null, "metadata": {"window": "arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n", "original_text": "Neural machine translation of rare words\nwith subword units. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a39f99b8-c30f-4114-aca5-5f6122ec39b3", "node_type": "1", "metadata": {"window": "Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units. ", "original_text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. "}, "hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f7d3f41-487e-4dc0-adab-df0bdc67225c", "node_type": "1", "metadata": {"window": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "original_text": "arXiv preprint arXiv:1508.07909 , 2015.\n"}, "hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "class_name": "RelatedNodeInfo"}}, "hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "text": "Neural machine translation of rare words\nwith subword units. ", "start_char_idx": 30891, "end_char_idx": 30952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f7d3f41-487e-4dc0-adab-df0bdc67225c": {"__data__": {"id_": "1f7d3f41-487e-4dc0-adab-df0bdc67225c", "embedding": null, "metadata": {"window": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "original_text": "arXiv preprint arXiv:1508.07909 , 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80bd519c-c966-4998-850e-2d7651edd013", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n", "original_text": "Neural machine translation of rare words\nwith subword units. "}, "hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2d87345f-f8df-439e-bcea-84cbdccc333c", "node_type": "1", "metadata": {"window": "Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "original_text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. "}, "hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "class_name": "RelatedNodeInfo"}}, "hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "text": "arXiv preprint arXiv:1508.07909 , 2015.\n", "start_char_idx": 30952, "end_char_idx": 30992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2d87345f-f8df-439e-bcea-84cbdccc333c": {"__data__": {"id_": "2d87345f-f8df-439e-bcea-84cbdccc333c", "embedding": null, "metadata": {"window": "Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "original_text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f7d3f41-487e-4dc0-adab-df0bdc67225c", "node_type": "1", "metadata": {"window": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "original_text": "arXiv preprint arXiv:1508.07909 , 2015.\n"}, "hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80296f03-e31d-406e-ae5f-83b919ebf383", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n", "original_text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. "}, "hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "class_name": "RelatedNodeInfo"}}, "hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "start_char_idx": 30992, "end_char_idx": 31102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80296f03-e31d-406e-ae5f-83b919ebf383": {"__data__": {"id_": "80296f03-e31d-406e-ae5f-83b919ebf383", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n", "original_text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2d87345f-f8df-439e-bcea-84cbdccc333c", "node_type": "1", "metadata": {"window": "Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "original_text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. "}, "hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "37b83876-2a0f-4a04-9db6-ecafd3441ec3", "node_type": "1", "metadata": {"window": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "original_text": "arXiv preprint arXiv:1701.06538 , 2017.\n"}, "hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "class_name": "RelatedNodeInfo"}}, "hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "start_char_idx": 31102, "end_char_idx": 31183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "37b83876-2a0f-4a04-9db6-ecafd3441ec3": {"__data__": {"id_": "37b83876-2a0f-4a04-9db6-ecafd3441ec3", "embedding": null, "metadata": {"window": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "original_text": "arXiv preprint arXiv:1701.06538 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80296f03-e31d-406e-ae5f-83b919ebf383", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n", "original_text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. "}, "hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "784b6842-3659-4779-837c-af52bc2155ee", "node_type": "1", "metadata": {"window": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "original_text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. "}, "hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "class_name": "RelatedNodeInfo"}}, "hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "text": "arXiv preprint arXiv:1701.06538 , 2017.\n", "start_char_idx": 31183, "end_char_idx": 31223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "784b6842-3659-4779-837c-af52bc2155ee": {"__data__": {"id_": "784b6842-3659-4779-837c-af52bc2155ee", "embedding": null, "metadata": {"window": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "original_text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "37b83876-2a0f-4a04-9db6-ecafd3441ec3", "node_type": "1", "metadata": {"window": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "original_text": "arXiv preprint arXiv:1701.06538 , 2017.\n"}, "hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82a04cbd-359a-4d70-af3e-2d37cf11be47", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "original_text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. "}, "hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "class_name": "RelatedNodeInfo"}}, "hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "start_char_idx": 31223, "end_char_idx": 31327, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82a04cbd-359a-4d70-af3e-2d37cf11be47": {"__data__": {"id_": "82a04cbd-359a-4d70-af3e-2d37cf11be47", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "original_text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "784b6842-3659-4779-837c-af52bc2155ee", "node_type": "1", "metadata": {"window": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "original_text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. "}, "hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b5ba7e5c-f790-4261-a735-f3340cef853f", "node_type": "1", "metadata": {"window": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "original_text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n"}, "hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "class_name": "RelatedNodeInfo"}}, "hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "start_char_idx": 31327, "end_char_idx": 31393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b5ba7e5c-f790-4261-a735-f3340cef853f": {"__data__": {"id_": "b5ba7e5c-f790-4261-a735-f3340cef853f", "embedding": null, "metadata": {"window": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "original_text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82a04cbd-359a-4d70-af3e-2d37cf11be47", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "original_text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. "}, "hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "624ef28a-13da-42a4-b00c-7eb85fc9a133", "node_type": "1", "metadata": {"window": "Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks. ", "original_text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. "}, "hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "class_name": "RelatedNodeInfo"}}, "hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "start_char_idx": 31393, "end_char_idx": 31455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "624ef28a-13da-42a4-b00c-7eb85fc9a133": {"__data__": {"id_": "624ef28a-13da-42a4-b00c-7eb85fc9a133", "embedding": null, "metadata": {"window": "Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks. ", "original_text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b5ba7e5c-f790-4261-a735-f3340cef853f", "node_type": "1", "metadata": {"window": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "original_text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n"}, "hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3eddac65-81a6-4d6b-94ae-425ebfd7a342", "node_type": "1", "metadata": {"window": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "original_text": "End-to-end memory\nnetworks. "}, "hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "class_name": "RelatedNodeInfo"}}, "hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "start_char_idx": 31455, "end_char_idx": 31526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3eddac65-81a6-4d6b-94ae-425ebfd7a342": {"__data__": {"id_": "3eddac65-81a6-4d6b-94ae-425ebfd7a342", "embedding": null, "metadata": {"window": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "original_text": "End-to-end memory\nnetworks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "624ef28a-13da-42a4-b00c-7eb85fc9a133", "node_type": "1", "metadata": {"window": "Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks. ", "original_text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. "}, "hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11e585db-2673-4b0f-8465-77551d57f8c1", "node_type": "1", "metadata": {"window": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n", "original_text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. "}, "hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "class_name": "RelatedNodeInfo"}}, "hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "text": "End-to-end memory\nnetworks. ", "start_char_idx": 31526, "end_char_idx": 31554, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11e585db-2673-4b0f-8465-77551d57f8c1": {"__data__": {"id_": "11e585db-2673-4b0f-8465-77551d57f8c1", "embedding": null, "metadata": {"window": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n", "original_text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3eddac65-81a6-4d6b-94ae-425ebfd7a342", "node_type": "1", "metadata": {"window": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "original_text": "End-to-end memory\nnetworks. "}, "hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2a41e4ad-e290-4bbf-888d-c862c18d9faa", "node_type": "1", "metadata": {"window": "End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "original_text": "Curran Associates,\nInc., 2015.\n"}, "hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "class_name": "RelatedNodeInfo"}}, "hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "start_char_idx": 31554, "end_char_idx": 31705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2a41e4ad-e290-4bbf-888d-c862c18d9faa": {"__data__": {"id_": "2a41e4ad-e290-4bbf-888d-c862c18d9faa", "embedding": null, "metadata": {"window": "End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "original_text": "Curran Associates,\nInc., 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11e585db-2673-4b0f-8465-77551d57f8c1", "node_type": "1", "metadata": {"window": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n", "original_text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. "}, "hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "accb1c45-f327-44e8-895e-cc1e8620c620", "node_type": "1", "metadata": {"window": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks. ", "original_text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. "}, "hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "class_name": "RelatedNodeInfo"}}, "hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "text": "Curran Associates,\nInc., 2015.\n", "start_char_idx": 31705, "end_char_idx": 31736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "accb1c45-f327-44e8-895e-cc1e8620c620": {"__data__": {"id_": "accb1c45-f327-44e8-895e-cc1e8620c620", "embedding": null, "metadata": {"window": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks. ", "original_text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2a41e4ad-e290-4bbf-888d-c862c18d9faa", "node_type": "1", "metadata": {"window": "End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "original_text": "Curran Associates,\nInc., 2015.\n"}, "hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "349930de-b47e-4889-a71a-6f3ac5740c7a", "node_type": "1", "metadata": {"window": "Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "original_text": "Sequence to sequence learning with neural\nnetworks. "}, "hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "class_name": "RelatedNodeInfo"}}, "hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "start_char_idx": 31736, "end_char_idx": 31788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "349930de-b47e-4889-a71a-6f3ac5740c7a": {"__data__": {"id_": "349930de-b47e-4889-a71a-6f3ac5740c7a", "embedding": null, "metadata": {"window": "Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "original_text": "Sequence to sequence learning with neural\nnetworks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "accb1c45-f327-44e8-895e-cc1e8620c620", "node_type": "1", "metadata": {"window": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks. ", "original_text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. "}, "hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a55c0d6c-647c-44e3-b58e-59157b29ea92", "node_type": "1", "metadata": {"window": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "original_text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n"}, "hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "class_name": "RelatedNodeInfo"}}, "hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "text": "Sequence to sequence learning with neural\nnetworks. ", "start_char_idx": 31788, "end_char_idx": 31840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a55c0d6c-647c-44e3-b58e-59157b29ea92": {"__data__": {"id_": "a55c0d6c-647c-44e3-b58e-59157b29ea92", "embedding": null, "metadata": {"window": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "original_text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "349930de-b47e-4889-a71a-6f3ac5740c7a", "node_type": "1", "metadata": {"window": "Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "original_text": "Sequence to sequence learning with neural\nnetworks. "}, "hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "84a6397b-3012-48b2-a2b0-6c4ec07eae0d", "node_type": "1", "metadata": {"window": "Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision. ", "original_text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n"}, "hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "class_name": "RelatedNodeInfo"}}, "hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "start_char_idx": 31840, "end_char_idx": 31918, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "84a6397b-3012-48b2-a2b0-6c4ec07eae0d": {"__data__": {"id_": "84a6397b-3012-48b2-a2b0-6c4ec07eae0d", "embedding": null, "metadata": {"window": "Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision. ", "original_text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a55c0d6c-647c-44e3-b58e-59157b29ea92", "node_type": "1", "metadata": {"window": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "original_text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n"}, "hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0bf6c4ec-69a8-4531-81bd-a114a119cdd5", "node_type": "1", "metadata": {"window": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n", "original_text": "Rethinking the inception architecture for computer vision. "}, "hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "class_name": "RelatedNodeInfo"}}, "hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "start_char_idx": 31918, "end_char_idx": 32012, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bf6c4ec-69a8-4531-81bd-a114a119cdd5": {"__data__": {"id_": "0bf6c4ec-69a8-4531-81bd-a114a119cdd5", "embedding": null, "metadata": {"window": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n", "original_text": "Rethinking the inception architecture for computer vision. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "84a6397b-3012-48b2-a2b0-6c4ec07eae0d", "node_type": "1", "metadata": {"window": "Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision. ", "original_text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n"}, "hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "577cddd3-a56c-47a1-a62b-8e51c801db7e", "node_type": "1", "metadata": {"window": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "original_text": "CoRR , abs/1512.00567, 2015.\n"}, "hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "class_name": "RelatedNodeInfo"}}, "hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "text": "Rethinking the inception architecture for computer vision. ", "start_char_idx": 32012, "end_char_idx": 32071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "577cddd3-a56c-47a1-a62b-8e51c801db7e": {"__data__": {"id_": "577cddd3-a56c-47a1-a62b-8e51c801db7e", "embedding": null, "metadata": {"window": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "original_text": "CoRR , abs/1512.00567, 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0bf6c4ec-69a8-4531-81bd-a114a119cdd5", "node_type": "1", "metadata": {"window": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n", "original_text": "Rethinking the inception architecture for computer vision. "}, "hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d72f8a0a-ec4f-48b9-8779-fa17215e46e6", "node_type": "1", "metadata": {"window": "Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "original_text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. "}, "hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "class_name": "RelatedNodeInfo"}}, "hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "text": "CoRR , abs/1512.00567, 2015.\n", "start_char_idx": 32071, "end_char_idx": 32100, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d72f8a0a-ec4f-48b9-8779-fa17215e46e6": {"__data__": {"id_": "d72f8a0a-ec4f-48b9-8779-fa17215e46e6", "embedding": null, "metadata": {"window": "Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "original_text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "577cddd3-a56c-47a1-a62b-8e51c801db7e", "node_type": "1", "metadata": {"window": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "original_text": "CoRR , abs/1512.00567, 2015.\n"}, "hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "927bbc4e-031b-409c-9617-ed85c4e91bf9", "node_type": "1", "metadata": {"window": "CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n", "original_text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. "}, "hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "class_name": "RelatedNodeInfo"}}, "hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "start_char_idx": 32100, "end_char_idx": 32250, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "927bbc4e-031b-409c-9617-ed85c4e91bf9": {"__data__": {"id_": "927bbc4e-031b-409c-9617-ed85c4e91bf9", "embedding": null, "metadata": {"window": "CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n", "original_text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d72f8a0a-ec4f-48b9-8779-fa17215e46e6", "node_type": "1", "metadata": {"window": "Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "original_text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. "}, "hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fba7e33-374c-4da9-8fdd-44a1016af36a", "node_type": "1", "metadata": {"window": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "original_text": "arXiv preprint\narXiv:1609.08144 , 2016.\n"}, "hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "class_name": "RelatedNodeInfo"}}, "hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "start_char_idx": 32250, "end_char_idx": 32350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fba7e33-374c-4da9-8fdd-44a1016af36a": {"__data__": {"id_": "2fba7e33-374c-4da9-8fdd-44a1016af36a", "embedding": null, "metadata": {"window": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "original_text": "arXiv preprint\narXiv:1609.08144 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "927bbc4e-031b-409c-9617-ed85c4e91bf9", "node_type": "1", "metadata": {"window": "CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n", "original_text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. "}, "hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4eb2b539-7afc-4441-9fae-3978344115fe", "node_type": "1", "metadata": {"window": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation. ", "original_text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. "}, "hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "class_name": "RelatedNodeInfo"}}, "hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "text": "arXiv preprint\narXiv:1609.08144 , 2016.\n", "start_char_idx": 32350, "end_char_idx": 32390, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4eb2b539-7afc-4441-9fae-3978344115fe": {"__data__": {"id_": "4eb2b539-7afc-4441-9fae-3978344115fe", "embedding": null, "metadata": {"window": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation. ", "original_text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fba7e33-374c-4da9-8fdd-44a1016af36a", "node_type": "1", "metadata": {"window": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "original_text": "arXiv preprint\narXiv:1609.08144 , 2016.\n"}, "hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7dd03a4d-9670-480b-b17d-432541322779", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n", "original_text": "Deep recurrent models with\nfast-forward connections for neural machine translation. "}, "hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "class_name": "RelatedNodeInfo"}}, "hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "start_char_idx": 32390, "end_char_idx": 32450, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7dd03a4d-9670-480b-b17d-432541322779": {"__data__": {"id_": "7dd03a4d-9670-480b-b17d-432541322779", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n", "original_text": "Deep recurrent models with\nfast-forward connections for neural machine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4eb2b539-7afc-4441-9fae-3978344115fe", "node_type": "1", "metadata": {"window": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation. ", "original_text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. "}, "hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "743389cc-285f-43b0-bc53-829426fc44b1", "node_type": "1", "metadata": {"window": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1606.04199, 2016.\n"}, "hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "class_name": "RelatedNodeInfo"}}, "hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "text": "Deep recurrent models with\nfast-forward connections for neural machine translation. ", "start_char_idx": 32450, "end_char_idx": 32534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "743389cc-285f-43b0-bc53-829426fc44b1": {"__data__": {"id_": "743389cc-285f-43b0-bc53-829426fc44b1", "embedding": null, "metadata": {"window": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1606.04199, 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7dd03a4d-9670-480b-b17d-432541322779", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n", "original_text": "Deep recurrent models with\nfast-forward connections for neural machine translation. "}, "hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ba96198-2e26-4113-a6f7-ee5212fafd9d", "node_type": "1", "metadata": {"window": "Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "11"}, "hash": "8d77459b8be2b95ef185499fabf082d83096113e57464684ceec6de056d85888", "class_name": "RelatedNodeInfo"}}, "hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "text": "CoRR , abs/1606.04199, 2016.\n", "start_char_idx": 32534, "end_char_idx": 32563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ba96198-2e26-4113-a6f7-ee5212fafd9d": {"__data__": {"id_": "0ba96198-2e26-4113-a6f7-ee5212fafd9d", "embedding": null, "metadata": {"window": "Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "11"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "c0bb2ec3-b919-4928-822a-daece61ddf9f", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "743389cc-285f-43b0-bc53-829426fc44b1", "node_type": "1", "metadata": {"window": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1606.04199, 2016.\n"}, "hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "class_name": "RelatedNodeInfo"}}, "hash": "8d77459b8be2b95ef185499fabf082d83096113e57464684ceec6de056d85888", "text": "11", "start_char_idx": 4980, "end_char_idx": 4982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"c0bb2ec3-b919-4928-822a-daece61ddf9f": {"node_ids": ["7d977aea-b846-4b28-8c2f-15198263d988", "ae3da133-41bb-48d6-b9d7-1563b5536cd2", "eb515e0d-0781-454f-9adf-82ba61d14cfe", "5b0241c9-bb29-4b50-b1e5-4d90b7af2a59", "306e8fd1-30cb-4b73-8baf-981a283b0b6e", "a53cbcfb-b8c8-4e04-811d-eaca46f50fc9", "514dd39d-9e22-4d7e-aac6-76b10b19c327", "f0b22973-3a27-440c-ad39-f31ea5a4c240", "acc4ef1b-f70e-437c-85cb-db15d1d6c231", "40e3c0be-9c18-430e-9ebf-c0b91dc5ca95", "b1d7a124-aa09-43e4-8055-5a241d0013cf", "56a4a9d8-0574-4ffe-824b-2b173475156f", "c6974a26-ffe1-4258-845b-08ac93497c34", "493ea385-1542-4d27-b9d5-c0c48726a5cb", "96e48f1d-a1b7-4d68-a2bc-9c311355a50f", "657858c6-0191-4942-be8b-657491187e59", "0234cf98-e705-41f6-8d72-ca62889e98b1", "da7d7fe9-f8ea-440b-9d72-b652e14531d3", "64960949-0550-4701-be29-a58945dc56d7", "c0825598-ff1b-41d8-a62b-2d5af4c9d4f6", "8efa1ddd-12e6-4a50-872c-7e7fb96029cb", "97204230-7d05-4d90-a2cd-61c6b728dd92", "571f142e-0567-4bbf-ab1d-f6adb2548ea7", "c84bb2be-863c-45ba-bc33-8a3b48995e3b", "80b80005-34a5-424f-97d7-38650ae1399a", "0f7ab5e1-7571-46b8-9ebb-0ad80979d330", "ec24fcbb-6083-4f2b-a021-e2ffc1b61b4b", "0820e01f-7960-4d8b-9d93-76eddea5d440", "b0d59e80-93a3-4989-8605-b82082b9739d", "2668f1f2-ad2e-4e58-9260-6f82026de51b", "e76fbce5-f639-4ccc-8ba5-03c9a6f0de81", "e354ea6b-e9b0-48df-8440-6dde75b2993b", "8de0f5e2-5002-4e53-962c-589d3cdc004e", "f7a47ced-cfb9-4018-9166-166041fcc1ce", "7be1920e-0fbc-4eec-9add-7a3dd2d9d5ad", "ca99c613-7a9e-42cf-b3b7-b4fd7bdd4c7d", "db40e284-5e65-42ac-8f50-5e059ed4a309", "a58df4b9-5144-4856-b2b0-7713addf97ad", "357d2574-a371-49df-b178-eb5cda95bcd4", "26d4dcdb-68bf-4d74-99f7-a124d2bbc98f", "7c9ce843-6fec-4374-8ad6-2f66b6bc7410", "f3844dc9-3cd6-4f0b-9164-2b1fc248d79b", "e6ea9f33-4be2-4147-a7ef-0496716f6095", "17a79e0b-5fb8-4ee2-93f9-1f34d1cbe6d6", "acb5016e-568f-4ca5-922d-5f6142fe8e59", "af5a4505-0f9f-4fec-9b3c-7de6ed9daf42", "d59a11bd-1bf1-4f6f-a25d-40ee6b5e4408", "0cb24c87-db11-4316-9919-0c4433d07e9b", "f750aa59-52f3-4bab-b6a5-d2ff55b3d102", "38c62408-91c1-4d22-a21c-ba5a586c364d", "a2c47aa6-a2ab-46c4-87b9-6fa8c6229638", "921b0380-94bc-4998-9540-502fdae5f310", "b5ded902-f530-4973-9cb5-04ccbd445d56", "a195498e-4c95-42fe-b3d7-2c6130ffaa4a", "9cb3716a-f958-4fd6-a79f-5b7adb06f5bf", "7031bf94-c7e9-4318-9ae9-e0d36992ff5e", "009128c4-951a-453a-9f4a-32703bf47a7f", "05cac70a-20e0-4117-bf62-ba7a6788fc17", "be7405f4-3b6d-4c06-892b-3460550939da", "6814fc5f-87f0-4d9a-917d-624af8e142da", "a516d7f0-1969-495e-9e6c-da0282577802", "bf30bafe-b6ca-439a-896d-e3ab0e39f1e0", "6f9ea990-ef04-4798-9d9f-00429718cde7", "a616492d-b519-4773-9425-d251d4d7f21c", "8935938a-5e89-40c3-9836-cb83fe60274f", "e3578190-7f0f-4371-a82e-9f88cc97a72b", "db6c2ba8-0d2f-476f-87a3-99cedaf7d8ae", "6af0fe96-43ee-4e3c-9d21-fa680793f21b", "2bb734cf-a5e7-494d-a8a8-b118f2ae4cbb", "4e208599-32f9-4531-b6d4-856c3921b48e", "12e22c45-8a9a-49c4-a524-6a543f341e7e", "df8a007e-b97b-4233-b5b6-766026d2c9df", "e83b8184-6d48-4724-a372-f64b16477d69", "ded1c147-465d-478f-add8-152824f768ec", "0186d006-875e-4f8b-b5fd-8dc80646a88b", "dcc39074-bcb5-4b7a-b73a-3c018b0bfadf", "0b3f725f-ef38-4391-af2c-f67c42807fba", "d99df5e4-0bb9-4de1-8911-8b2c6cf02faf", "e366ced6-91be-45d0-a4de-41412883d2e0", "1f9aa8a2-f160-47fd-a76e-4694b2b584b5", "c120a26f-d33b-4612-a350-42cca70d9e0a", "ee4c4ad8-4c73-4e6d-9329-aad46019453c", "58b01272-1d4c-491b-bba5-5930a5ba8db4", "c1a1c043-ff69-4e42-84ce-e3265fef9334", "9e3cc167-6fc4-4225-b2ad-fec3d46c8044", "963e2fea-633e-43d8-a46d-f2ab59dc86ec", "88d07ca3-30ff-4a24-9ef9-38b983b3429e", "0235db11-9f91-4ea3-84fe-718c3324e24d", "7c39a871-8a82-44cc-81c3-3115d102b952", "0b16fb1e-d0cd-4c6b-acd8-7eac406bece2", "0faaaf6c-dd07-4285-aecc-bea63e8baa89", "47bc6e37-8cab-49bd-a27e-90fc8b6e8902", "e2ecf01f-a8ec-454c-bcd7-136bd0d13130", "70be4d00-a733-48c6-b865-cffaad835a24", "81b1dde7-2fc8-4dd8-bcc3-bf318e8ee329", "88333afa-d9a9-40a6-b8a4-56e457f4473c", "4f3977e3-8a29-4551-8a1d-a297ce078e80", "f0443e2f-1630-446b-8308-257dc6b2dff6", "4e103e10-fcbb-47dd-bf10-88d574873f38", "11d2c647-3939-4f1b-9971-abc4fa71af22", "134b664f-504d-446b-a3a3-9b6be377d52c", "cc8d17cc-d9b0-4ccd-a424-4f68f102302a", "4074611a-652e-4674-b691-72eaea87730f", "343832e8-b73d-4c34-9b89-6860f978a045", "81795e78-149b-42cf-af24-b71f252b6807", "29f1edc5-2a79-4766-bc99-6e118b991f37", "4540548c-17f6-4f28-9f55-232ec2a2c6b5", "faa4c0e5-ed56-4d65-9726-643575ed2508", "71e14351-6d9f-43fe-8ce5-705df3460b50", "0566433b-d39c-4efb-8413-c03705156961", "66f3f839-c2c2-4b6e-9503-8898f962384f", "13cb726a-e88b-47cf-ae32-33cf2168fa16", "ce9e74ee-fd2a-406f-a8f0-ef3c7f588960", "cb2553b8-5453-4db7-b9e2-c4243fec7a18", "0d6df087-993e-4d7c-beb7-5841cb230b4c", "b0a400ef-9637-4189-93b5-a6564f5fd749", "eaa2c36a-7afe-49a8-a058-e67f0221b658", "bf13ee4d-4159-4383-adf5-67b857263377", "17f13d04-70ee-42ab-9071-87f38aa40527", "08d45d9d-8980-4563-8f72-6926ea2fdc02", "11f8c432-81c3-4721-a9fb-6f8c9e7fab8a", "eb4a9275-7c57-414d-b81a-6bcc102f3b99", "d756225f-fe80-4437-8cfb-3116b96edf12", "da0331bc-5c4d-43de-ac35-952d5e5ef258", "70310144-1651-48c2-bc89-6249d170d716", "317bcbf5-2b82-4cfb-b567-d5bd91b7fa1e", "1ef6415f-a507-4510-9b31-478a31adc9be", "14d8456e-d843-400c-9da6-fb336d2cde3a", "1cac58d9-f34c-497c-8239-0ce5251e18b5", "6efac16c-1af8-4924-8660-649c4332a3b1", "4ef994b4-9846-44cf-8e1a-26c54baaa968", "6a446516-1302-4557-ad94-435fb631e89c", "1e25264d-e5e9-46e0-a31e-81b43f07ab26", "c1d4ba13-34a3-4a9f-b16a-e0ed339df62e", "ed09576e-260f-4834-af24-ae30102ef823", "9b8d69af-2e60-47ce-86de-00654a58d49f", "885b4009-96d5-45a7-a1bc-7466eaa9ccaa", "172c0148-ae59-4520-a846-58a63dab3e84", "7c8c03e0-b6d7-4664-9e78-98da56508562", "ff686851-c01e-4785-b534-7b164cf06d9e", "1433f97f-acc9-4a64-92b5-90c9792358a0", "01843387-f23b-46b7-8748-aca8f6f66626", "72edd542-14f8-427e-816e-0af0203bd762", "380bcff7-c5cb-4048-be60-3b6e8e1a0e7c", "6ad2a372-628f-4841-afa0-cacb856d495f", "47a5ee1b-20e4-405c-afd4-2f2a30045ba4", "aa302ad9-2c53-43e4-a958-5fe5c7a47ef0", "f9b87d8d-b420-4b4e-b571-583616a11776", "b9c95e27-2791-41c2-ad31-6f327abd8b19", "d8eed128-93ea-4422-a7b0-7da23cd02176", "7daa41a9-ad27-42ea-8fd1-d81e015282be", "fa5ead81-da0d-4c02-b3ef-58a8b0145080", "ed1063c6-378a-4462-9b2e-3431ce0432e6", "493699c8-1115-47d1-91fc-369b24d15583", "53989144-2a45-4ab3-aff6-c4859b32a359", "e3ec8d78-70af-4fae-8dad-259132426462", "df98e7e2-33a7-46c1-a015-b0ff2b2b5bf7", "2603a8b1-6c71-4f8a-a478-23827f938b77", "c9c13937-ceff-4157-89d4-cdbc24fce78c", "421653b2-3ca8-4dad-a7ca-f59db757b11d", "c2257d87-d8d9-4688-89ee-d92a5cf121f2", "31a9db87-4c07-4ded-aa81-5b678dc53ddb", "56ad54b4-39a1-423b-9221-cebd11cb1535", "e14099c0-6838-46a6-bde3-a27ba473acf7", "27d89205-04a5-42b2-b584-25b54a2c5e3a", "382c985f-7e83-4bd4-b0cf-40a9ec0bbabf", "fdd5e355-ae59-4891-afbe-b5efd7ba62c7", "c1a3d6a3-7dad-489c-a76f-dcac66f60a9a", "ac0d6164-b5be-4dea-860d-2c41bc1f91e7", "6445f9f5-054e-4d50-ae42-ff9b9c93de6c", "2c9921d9-3942-4f50-a022-d7138b1f7bb5", "2bda91ad-676e-4f0a-966b-67c6b5ab87e1", "8ba53524-5eec-47ab-97a8-5705be2afc48", "10e1364c-a3cb-444e-806c-2f8ed3286691", "a47f6843-dff6-45a7-a258-0e6252b87f1a", "4ccbf5e4-8c55-4405-a8ae-f2911bb43668", "8de4dc05-24ed-487e-972a-7706bfd8513f", "d9e5e954-f046-4b50-bb71-2ba21546fcf0", "bcc44948-5a80-4d69-85d1-680beb4506f8", "c77a5570-3f3b-42f4-be16-0534053ce0c0", "4e894602-9242-4ff0-893a-bc2779f62383", "6bc83d17-6a53-42b5-9c42-cd27ffc64791", "2a56f9d4-c714-402e-a581-806be4eea15f", "1e177e7c-b119-427a-964f-3feee02c777f", "df23d43e-1716-4858-a2a7-6def496078af", "25864782-247c-4fb1-9921-1cfc9520a0e7", "1e3256ae-dea0-49b4-bb23-e781bccfc588", "98786c6f-b387-4437-a9ec-a5c86362103e", "e4147ce1-30b9-41c9-bdb7-2d348354faa2", "23a2285e-8cab-4323-92b1-f5512c04e83d", "f1951da2-be88-415d-9225-5c9c46b6d949", "cbb3f5eb-76de-4c57-ab3d-a3b930dc78b7", "81afce5c-9508-4f64-89a9-79a4e611dc57", "4a305916-d769-4287-8343-38c10426cd5f", "417bfb71-6976-4075-b8de-8d86115d999a", "79686c43-8185-45f1-9a0f-07b8ac630d2b", "bbcc8129-b03f-4d78-9698-39941bc7f325", "1dbce497-4cd2-4af7-98f9-66d70fbd9682", "037f6c8a-a99f-4110-a9c8-1c6ceb24f9ba", "9c27a5af-226c-4683-b297-de1d0ddf1c0b", "9e3f8be3-8586-4765-a653-23cd33eb94ef", "6401c647-e2c4-4292-94c0-7be9d74ac6c9", "6be37ae7-c407-428a-a78b-031d040ae12c", "6146e95f-de56-4efa-bd12-0e3f52b25ce0", "7080a58f-7673-4cfb-a349-9070fa075bc5", "26d02779-f73b-4de3-ac0e-9c77f0efc158", "2935fdaf-0b7a-4dae-a719-23d396f722de", "8517f9be-b680-41d5-bc3e-6f41fecef6fb", "9273c2fa-f8e0-4bdd-9bd4-853bd0fe5f2a", "6e28a749-85ea-4e3f-8be5-825a0a392337", "c3ab43e0-15f1-4d63-b961-2cabc05b99a3", "38db8015-33e8-4835-9f62-e025e0ec9948", "c71e3a0b-c1dd-4766-b35f-cb166d35cc60", "f08f732d-5787-4bc6-9859-736e345dd848", "69f7e83d-4447-4a3c-b82c-97eea5d3473d", "21834ee3-66a1-494b-ad54-799b3ba0de2e", "3ca59a3e-8014-4a25-8f16-918955fd53d3", "e726fcc4-cd5a-409a-94b1-844b34d5b966", "cd623b80-c5f1-4ac4-aeb7-46ec43bc8623", "13d0759f-f770-41a2-8b5a-4501bec0eaf1", "66f02d76-ebf6-441a-be1e-c4e7464be62f", "9132cedb-2eae-4392-9546-c2baa4b76a27", "7440cde8-8a4c-436d-ac6c-82689a25a536", "6f4ffab7-c5c9-4e63-8642-1696a8dcacea", "33f98a89-00ba-42da-9ef6-76578d2da972", "f5bb923b-0143-4712-9dfd-c8a78df37618", "03a5b238-c617-4352-9174-9c6704dee3f5", "a19ec2b0-57c5-40a1-a1d5-d29d6879fb69", "0f353364-7c9b-42c0-a833-f6be07d666d1", "b7e0dccf-e687-4af8-8b6d-15384bed2280", "6aed7f16-9f27-457e-b853-710f09282aa9", "0b49253f-6d77-42f4-8842-5c9ff7f5127d", "1811178e-8522-422c-8b67-492cb99653bf", "af9a7f1d-c5ca-4aa3-944d-53d394d33f81", "4b154943-09a2-4683-bfca-f5c271971d6e", "dc458765-5b32-487b-bb92-081ee4a2e8f6", "fa94b373-0f02-49e1-a74b-abce227db642", "160719d5-4658-4ec5-badc-3e28ffa9df4e", "1ffd554d-100e-4c48-88f8-9fd677220fda", "bcdabaed-3d5f-42b4-a49f-a0b75feb5adf", "f649fdd1-a021-4868-9088-a11593f46faa", "a72baed6-896f-465f-a48d-4de6898881d4", "091b31d6-655f-49ce-b6e5-5b19b37c3827", "cda66ed3-ebec-4f19-8f20-ee2823695c29", "adcade97-ec51-4729-88e7-ff564769a2f5", "0fd48060-5c91-4dd9-8400-d1152bb6fa1d", "25ed5bdc-d0c5-4757-abbe-6569467a6a5e", "289b7fec-b9a3-4f95-88a6-648de5d104f8", "9bf46313-da2a-4a80-be03-a72616ef43ad", "932146c7-0a65-4e47-86ad-c7baec6e8593", "1084eb82-e7b5-45f3-859d-e5722980b891", "03614dff-210b-42d3-933b-7b2436625b70", "063fdab0-f91a-492c-bfb3-df009a71c1dd", "68b72124-dc24-4150-a42f-8e6856e96eee", "0ae2785c-c615-448e-892d-f81ed5ffce97", "09511f02-0426-4214-ad02-ef45dc0a6d83", "0faf47f0-a2c7-4b1e-a72d-24b0ef5a7ae7", "fc232a62-1a1b-4a2b-aa5f-62490741e4d2", "c1dcb122-ab9d-43f4-ab7a-28a1f10adafc", "a39f99b8-c30f-4114-aca5-5f6122ec39b3", "80bd519c-c966-4998-850e-2d7651edd013", "1f7d3f41-487e-4dc0-adab-df0bdc67225c", "2d87345f-f8df-439e-bcea-84cbdccc333c", "80296f03-e31d-406e-ae5f-83b919ebf383", "37b83876-2a0f-4a04-9db6-ecafd3441ec3", "784b6842-3659-4779-837c-af52bc2155ee", "82a04cbd-359a-4d70-af3e-2d37cf11be47", "b5ba7e5c-f790-4261-a735-f3340cef853f", "624ef28a-13da-42a4-b00c-7eb85fc9a133", "3eddac65-81a6-4d6b-94ae-425ebfd7a342", "11e585db-2673-4b0f-8465-77551d57f8c1", "2a41e4ad-e290-4bbf-888d-c862c18d9faa", "accb1c45-f327-44e8-895e-cc1e8620c620", "349930de-b47e-4889-a71a-6f3ac5740c7a", "a55c0d6c-647c-44e3-b58e-59157b29ea92", "84a6397b-3012-48b2-a2b0-6c4ec07eae0d", "0bf6c4ec-69a8-4531-81bd-a114a119cdd5", "577cddd3-a56c-47a1-a62b-8e51c801db7e", "d72f8a0a-ec4f-48b9-8779-fa17215e46e6", "927bbc4e-031b-409c-9617-ed85c4e91bf9", "2fba7e33-374c-4da9-8fdd-44a1016af36a", "4eb2b539-7afc-4441-9fae-3978344115fe", "7dd03a4d-9670-480b-b17d-432541322779", "743389cc-285f-43b0-bc53-829426fc44b1", "0ba96198-2e26-4113-a6f7-ee5212fafd9d"], "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. ", "original_text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. "}}}}