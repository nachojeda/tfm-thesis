{"docstore/metadata": {"df132f2e-94f2-4d84-965d-ad59bb949c65": {"doc_hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e"}, "9b782640-5e17-4657-98ad-c01a0dfee6bf": {"doc_hash": "3289728c0705f201683b46382a6f628a09340b284469704b814d7386860d0a35", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "85d23c14-d06c-49a6-8da7-9f47c142876e": {"doc_hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1dbc5daa-ad1f-477c-b07c-ae21ead197cb": {"doc_hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8429bb22-6394-4d3a-a00e-1fceea1ebaf2": {"doc_hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b62d339e-49ab-4288-8e69-ad79ff334b4e": {"doc_hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "9924325b-70cb-468f-aab0-4d7a7f8cba8f": {"doc_hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "03eba757-12e2-4071-8c47-de8811876737": {"doc_hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e815df02-d232-4a78-ad95-d2d51c3efc35": {"doc_hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8fa0acf5-f6ab-4c8f-a4dd-1b170a9bc3dd": {"doc_hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "0e03ead4-0af7-4a30-be2e-41c428edb5c9": {"doc_hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1847cc45-329a-4113-a3c1-867f3075a227": {"doc_hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7904065f-6c94-4ba8-ac1d-576b6e05c3bf": {"doc_hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7bf8b76f-a598-4c16-b996-ef10b9302477": {"doc_hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e11529ac-a810-4e32-bb8f-5dd1156c12b4": {"doc_hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a6560458-0d55-4cad-b04f-ea210f3723b2": {"doc_hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ef2e3abf-c6cc-44ee-ae21-91c29f4f7632": {"doc_hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "783e270a-fecf-4433-a6d0-0ee411572e72": {"doc_hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "11c726e2-bd4a-4117-8e04-83a8c6f5bde1": {"doc_hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "aaad2c88-bd79-42ee-ae6b-53ca393dbf82": {"doc_hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b44c2162-be79-416c-863f-f699da3b6c82": {"doc_hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "cf0d57ff-9c19-46ee-901b-f07c4ef8d0f2": {"doc_hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "879ce961-680b-4552-b9c7-fda2f249a0a2": {"doc_hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1ed11b5f-ac3f-47bb-8be6-7811cfa1bd4e": {"doc_hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "96df6cdf-fc7c-4696-ba55-dd7c257925f8": {"doc_hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f818e615-229c-45ca-a236-ecc7f448249d": {"doc_hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e4922561-1cdb-456b-b361-2af8599eb926": {"doc_hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2110b5a0-c4c2-40a3-b40e-d349f8650eba": {"doc_hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c9f598ca-e327-4323-a222-6667bb87f1eb": {"doc_hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "66715fcb-5d8a-4219-9681-6af3bc4a85c0": {"doc_hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7cb2157d-072e-4283-be89-5a0587e366f9": {"doc_hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "0abde137-9581-47fe-ab2d-2fd80ea3d1d7": {"doc_hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "560584d3-212b-40a7-8457-c42546dea158": {"doc_hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "750bdd6c-98ed-4f17-b4b4-2b9765ba1331": {"doc_hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "382caf15-1219-43bd-aa14-816a978bcec2": {"doc_hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c03a7fb5-1fc9-4099-8fac-814ca152c076": {"doc_hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "be58ff04-02b8-40bb-bf74-f4aaf42c87dd": {"doc_hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c75b8402-e992-4508-841e-6db2176951c0": {"doc_hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "90abe1f3-e1ef-40fb-9b69-68c6b98c94c1": {"doc_hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2118354c-a337-4932-8378-504554a73521": {"doc_hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "54ff56a1-d2ed-4b94-9ef4-e72ab7402d63": {"doc_hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1f426cc9-b35a-46a4-bbab-ef43caa90414": {"doc_hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3573c531-5d79-4d70-abba-14a58c9a267e": {"doc_hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "0f4eb185-172d-4d9d-88a5-1f1f02b9fda1": {"doc_hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "39e14af8-b845-4b09-a213-45a13b70cfde": {"doc_hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "eaead8a4-19c6-46fa-a005-9175ed6f9426": {"doc_hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c356f552-3ee7-450e-b674-0e5ec03cc6ca": {"doc_hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5205e22e-1825-44ff-a7ab-240962938666": {"doc_hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "94524f83-7f1e-461a-af58-b20fcd2375d2": {"doc_hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "38d90384-248f-485c-aa12-b76ef73c48dd": {"doc_hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "93ffdcaf-4666-4b0c-9d56-0afb087db09f": {"doc_hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7c676aef-7eca-4095-a07c-4d8ba031f5c0": {"doc_hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f44f85df-50a7-4937-b279-2de87c420b4d": {"doc_hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a8819e9d-5a34-4994-9d9a-04c829a6efa7": {"doc_hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "850fa3da-6f18-40d8-816a-242ce66c2ffb": {"doc_hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c10ed964-2ac2-4920-a57f-386913c921fd": {"doc_hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8912afda-d1dc-47fa-bb8b-693fafe63ecf": {"doc_hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "322068ba-0686-4f63-a6a7-9d87fa7cd457": {"doc_hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "46ada6da-7562-4233-902f-081d1a7e1948": {"doc_hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e4ef5cc6-ac95-474a-9ac7-4d5583240e7d": {"doc_hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2418f743-c43a-4c0b-a73e-690a8cf3b845": {"doc_hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6bd0687b-16f2-49ce-a53f-ef2605d563d3": {"doc_hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4434355b-9e1e-436a-94e3-1b8a3767901a": {"doc_hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c7fff715-bc6e-4917-8376-087eb3fa111e": {"doc_hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ea16bd9b-46db-45b3-ae04-5295c964714c": {"doc_hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "52a06a94-3968-4e00-a70b-41ff88806adb": {"doc_hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8742531e-db1d-40e1-851b-a4fba6775be1": {"doc_hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b8c77f61-6a0d-4808-bc43-2826ba69ee4f": {"doc_hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "fb804dc8-bd6d-4879-9ae4-f2799c2920c2": {"doc_hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "504a27a0-0be0-4ec0-8962-264ac87a6e20": {"doc_hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "62ca82d7-d56f-4f05-883e-c9f21fd2baa1": {"doc_hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "9ea62d73-1a8f-42fd-ae14-194b11247ecd": {"doc_hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2875b50f-885e-4b27-9b06-1de3786ab628": {"doc_hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "737ae3be-d1bb-4d1e-9cc1-bfd245c2c708": {"doc_hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5349de03-65c4-4922-91a5-568c415f2b97": {"doc_hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "af9553c3-10a3-432c-8b86-cb91c591a94e": {"doc_hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "106268ac-158f-43fc-ac86-2ae6dbbf16f1": {"doc_hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1319640b-bac2-4a1c-a988-b306f5d8f6f2": {"doc_hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2365a2cc-8b96-4b02-8cd0-17664b3ac46c": {"doc_hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b10b4ffc-66aa-4f68-ae02-84f702259fe2": {"doc_hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6c8cd392-2298-42f6-9022-7a96b39d707c": {"doc_hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "63f5213b-eb9a-4ee6-9915-37ed7cbadc14": {"doc_hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e187906c-cb19-48a7-a306-2882fbb12fbc": {"doc_hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "80e67723-1fc9-49aa-ad5a-4ca102337034": {"doc_hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "fd39f755-4c0d-4882-ab55-c08256aaa6e3": {"doc_hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6f7ed974-5e50-48a1-ae6a-ac1094314397": {"doc_hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ca3e729d-8c02-400a-9f31-c9a614fa07ba": {"doc_hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "0ab9328c-5c9e-490f-b39c-8dd63f1530f6": {"doc_hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e6ad8570-24bf-4fe5-abf6-1537aa20a3af": {"doc_hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e8a7a8b1-0d29-4e41-9870-22e277c8f31c": {"doc_hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "02e2ea6c-5c2a-435a-858f-7a8adcd6cd91": {"doc_hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "9dc40ba8-96ca-461a-9202-43148577868b": {"doc_hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ee1d72e0-af42-431c-bd62-7b13e798ddcf": {"doc_hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c390db15-7666-483a-b188-a3fcdef52af4": {"doc_hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "570a174d-fdaf-464b-99e2-66f13545542c": {"doc_hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a9784e91-ac88-45a5-8db6-72d55eee9019": {"doc_hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4791765e-b3ee-4c1e-8cee-713d5c936f79": {"doc_hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c0099095-88eb-4e52-b63f-1e36652cf804": {"doc_hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "413a6aae-9fee-490c-8d3a-1ff7eb814902": {"doc_hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c0f33c05-8e73-489f-86e8-672fa1080260": {"doc_hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "53613ea1-8d93-4c3e-8768-86634fbbdfa3": {"doc_hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "bf50f521-eb58-463c-84d3-5a2715b13cfe": {"doc_hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3615680b-d044-4a09-bfc5-cdcd0c727e4e": {"doc_hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "15fe6a3a-1602-4d8a-84b0-01f6eb131640": {"doc_hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "92131648-8e47-43b5-84a4-1db4f3af581a": {"doc_hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3f2c9c60-b596-4565-aa32-ca7a071b920d": {"doc_hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d6ee8c9b-3933-4f90-aa8e-9bc71403ed09": {"doc_hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "86aa99af-33d2-4179-8ef6-cb581086d8d5": {"doc_hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1d66d418-b7d8-4a10-bac3-4054605b1a69": {"doc_hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "dafd35ad-9edc-467b-8ffd-be534843a6c9": {"doc_hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ebd6199c-71e8-4fd8-a43a-b92e4bfd915d": {"doc_hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1f67df46-269c-49a5-affe-fc8078790a17": {"doc_hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3f1898a6-9203-4848-a8eb-28f6e2e9b3ec": {"doc_hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c1b5137f-76ee-45b8-8ea1-cf728fd310a7": {"doc_hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "882828a4-f7ec-4698-a90a-4674c7dee4c4": {"doc_hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "580da277-88d0-4101-afdf-11b4dcf73ffd": {"doc_hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "263d30f5-78c7-4d86-bad6-4dcb231901f1": {"doc_hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4a07ed97-06fc-42bd-8a04-3d688f556883": {"doc_hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ff609b26-d1a9-4ad2-8ef5-4c8f4176f8a3": {"doc_hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "53010cad-9311-417c-aa39-d0e805341ecb": {"doc_hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e1848976-3c11-4bca-8c4e-975a41ad727a": {"doc_hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d5b783f5-e601-4116-b833-3038b9a4cbdd": {"doc_hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "87ebe4f0-4d05-4ac9-beee-442497561d54": {"doc_hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c94b1678-4776-4d23-90ea-dea9391551a0": {"doc_hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8f8f4d78-5d0b-4b79-b253-fceae48d972c": {"doc_hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "98345b2a-dfe9-41c7-92d0-e4691b06ce53": {"doc_hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7779737e-275f-4b09-9f99-e0d9f7e22e4b": {"doc_hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c54d80cd-05bd-4999-8256-de0f6ea2dc90": {"doc_hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "01c9783d-ba55-4c1d-b84c-5558f1c905dd": {"doc_hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4e4187e7-22cb-49a9-90c7-ef7047cee7d0": {"doc_hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "cbb2148d-710a-4a00-b3f7-3e4f3fe90998": {"doc_hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7a536d39-5f70-480b-a0d7-fcc09598f4bf": {"doc_hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f5a5fe64-f77a-4a75-91fd-3eb584e8ace0": {"doc_hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "60d8e55e-b55f-4a6d-8d31-8ed9a87ff484": {"doc_hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "55e59a12-5d09-4dae-a3ef-1f124b6b2993": {"doc_hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "28d3b3cf-217b-4c1e-a588-2a34d8ec5d75": {"doc_hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f35d94b3-77c6-47b5-bbb8-8a79c05c44e3": {"doc_hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "52363fe7-ecb3-4560-acd6-3f45e5323060": {"doc_hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "13a079dd-1f60-40e7-9740-2570b1b8faec": {"doc_hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "530b36cb-704a-4f7b-a777-1ec23ac2a016": {"doc_hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5ed5e532-219b-4654-8106-e7a87fa1ff9d": {"doc_hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "14be4b8f-6991-4af6-8431-076873c40e62": {"doc_hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6c83bff9-1ee4-4481-9678-8c6af7ee1e90": {"doc_hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4d574b40-0c45-4761-8ee7-715a1b9aae61": {"doc_hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "bd5bfbc4-3447-41fc-b250-3aa423dc1e48": {"doc_hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "aebb237a-1534-4003-b344-232f7c9ab9d7": {"doc_hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "072bfee2-835b-4b60-9064-436926fce916": {"doc_hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1524a306-67bd-4fff-8aed-1219007d7ccd": {"doc_hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "06247d7d-2979-4780-ad5f-a3d18b823517": {"doc_hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "87581fd2-7647-4740-98a1-31ce05effcde": {"doc_hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e0fe4dd3-188d-4dea-b443-d8fdec58eaf7": {"doc_hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e36d7722-1ad6-4a92-97bf-196a91262898": {"doc_hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "64931f1d-0a7b-4934-b986-a6a52439b557": {"doc_hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "de799068-b091-40f1-84e5-a1d99b48fbd3": {"doc_hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f9dea4d2-595e-46ff-a9d1-166915873a89": {"doc_hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ac7c065f-7516-42a4-acc5-8c386121b72b": {"doc_hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "03b5b432-d541-48ac-8034-39e2ab5100b4": {"doc_hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b271b430-4b12-4d36-8764-062429c0c402": {"doc_hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c765f383-bcb4-4372-9e14-b14bc4ec5e33": {"doc_hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "9b7fd2d1-8bee-41f3-9c4f-2ce84b0ce44c": {"doc_hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b7189a4a-641f-4889-abf5-d6280d2deaba": {"doc_hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "06009291-a1c0-45e1-a994-1456d1983b61": {"doc_hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "256ee85f-f8d2-4a11-8bbf-d5ea92011840": {"doc_hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2f78ce25-ba07-43b8-ab04-4237cf5eb06a": {"doc_hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "74f4cdb6-7ced-4cf8-ae1e-401b42903c78": {"doc_hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "cab4fcbe-2de3-4e57-a056-2b751a239107": {"doc_hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "39add761-96fb-4dbd-baf4-1e89470afd76": {"doc_hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "0685392b-72e6-4830-b31c-f8e0da8ecb40": {"doc_hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "bf3a3296-1c00-491c-9d29-bfef83f3f52e": {"doc_hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4c3cac43-a877-4594-9e87-0686e9ea47f6": {"doc_hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f62f4d6b-86f3-4cf3-9a7e-200173a52b24": {"doc_hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b98eb14b-783c-443f-943a-e01cc422db93": {"doc_hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "65ade81e-276c-4d94-9de4-371a63c4c90b": {"doc_hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "76a66884-4a86-4abd-b913-06246e6ec4e1": {"doc_hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "67c7d03c-9aad-40eb-8957-c754ffa7bc43": {"doc_hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "99568588-bad6-484f-87fc-8f11fa1b1c54": {"doc_hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8d7cc7be-62ee-49eb-890e-22a25f74d006": {"doc_hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "08370985-044b-4c66-b835-e727d3ce93d2": {"doc_hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "00b925ae-9e55-428d-832f-9b3f87dfb0b3": {"doc_hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1aad40a5-8ab1-4b37-836e-a70ebc2a1152": {"doc_hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "54d6fca5-5b8c-4a20-ba96-ef37c88e9ede": {"doc_hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "fcb7680e-ebe4-4982-87d6-5a9c4addafb2": {"doc_hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ed438742-2e0e-4be1-8151-c4c988d9790b": {"doc_hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f182cf3b-2f0f-4812-b3dc-51be06836469": {"doc_hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ae7c82c5-c1d7-4775-b879-d7a2fd8994ce": {"doc_hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d591de8d-c1b5-430a-acce-2d9431569da2": {"doc_hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8708e8cf-2b4a-4669-b681-f31f27d67d25": {"doc_hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4992a350-a164-4071-b9ed-3c38971c8911": {"doc_hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5cae61a0-d1f1-493c-84e1-d672c31cf76b": {"doc_hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "203e73fe-d0b2-41ef-9a24-90a8a9429229": {"doc_hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1a2a7e73-f34a-44b8-bebc-1feb87381a07": {"doc_hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "58249c08-36cc-40e3-9abd-32ce14267cea": {"doc_hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "32841ff9-af49-4e58-83c1-066d55a40016": {"doc_hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c5b557d8-35d5-4c3b-871c-b2157fb942de": {"doc_hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5ea97bfd-9f5c-461e-a5be-03be4d3de85c": {"doc_hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8b9e6cc4-3a9d-4798-8bc3-f75e6a35386c": {"doc_hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b79efaa1-4ecd-4f4c-8502-8736c0aa2311": {"doc_hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "0bc6ff8f-b568-413d-ae06-e14ff70fd289": {"doc_hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "1ebc10f4-6c0c-4cae-980c-e1040c454d84": {"doc_hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "efbc3f05-df23-48f3-87c8-78a92a38f6a1": {"doc_hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "96b815cf-53ff-484e-a23e-e8336d192e5d": {"doc_hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "903fc95c-42a2-4ffb-b6b7-123f0819423f": {"doc_hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "566c622d-d1db-49d1-9597-ba8c6c633f17": {"doc_hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "796f812d-43fd-442b-b29f-cf087278580b": {"doc_hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f118735f-16f9-4ef0-a909-e5917c64d0f2": {"doc_hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "91087365-5115-420a-807f-1689d70ac107": {"doc_hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6ca29f0d-e9cb-46f9-a0c1-8084a3b1ec90": {"doc_hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3054f9d2-7736-49b1-a747-6fdbe08339f8": {"doc_hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4b9cdd1d-f777-431e-82a8-eed130d2caa8": {"doc_hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5b6db37e-3aae-4ce8-b20b-11a8e400b7df": {"doc_hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b348f5de-0262-423c-8206-ba3dcb4403ea": {"doc_hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "bd593679-5aa2-4395-a772-f4e0368236b4": {"doc_hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "07015ea2-ec4f-4285-a40f-390d45c659d6": {"doc_hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "363a39c0-f95f-49fa-9ff3-7bf4903a040d": {"doc_hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e01dab66-dee6-404b-8105-02867e5d2d27": {"doc_hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a4997469-cbc7-48a7-b252-1b8cb0f335ca": {"doc_hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8228eedd-e008-4c59-b16a-dd4c1240a9db": {"doc_hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "adda93e6-d5cb-4388-9231-18fe3b7c5697": {"doc_hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d4dfcb6a-442a-47b2-9419-5d71029e90f9": {"doc_hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7081695e-8595-4c10-a14c-f1da2cd9233c": {"doc_hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "4432497f-92b4-4e61-8659-d0a39c496275": {"doc_hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a2e34b43-2d9d-4707-8ef8-35f2ec8c9457": {"doc_hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "dde8d362-146a-4023-8775-600fa0bb6ae6": {"doc_hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f5a4dbdf-a7be-47c7-bae9-e58e3e8e8ed1": {"doc_hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "509f8b9b-c228-4002-b5d0-6111bcfedfc8": {"doc_hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3dbd88c1-bde1-4415-83f5-c2d1152f0418": {"doc_hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "93394fe7-8570-4e49-ba01-9bfacf663170": {"doc_hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b1647d6b-33cd-4b05-b5d0-c36b7a3660bd": {"doc_hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c88b8339-c723-415b-add3-57ab3c893cdc": {"doc_hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "05ed8a38-2c7d-4a07-85c0-5124a1467b49": {"doc_hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "179e2c34-7920-47bb-a1aa-97a738860b99": {"doc_hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "5ddee1a2-baa9-4f30-9e21-7871ae5974c3": {"doc_hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "83d7f8f4-e6cf-4e3b-b57a-4a83243606cc": {"doc_hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "e8496b95-dd64-4ae7-b25c-ddfaac52e72a": {"doc_hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "58ad677d-1799-4e0a-9055-2683830c16a9": {"doc_hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6ab00fb3-1f30-4d3b-a37c-30e649ad80df": {"doc_hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "9e2b0ac5-fde9-45f1-b9d1-2e4283f0d0fb": {"doc_hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "968c7d14-dda0-47a5-9495-5872c4a83f85": {"doc_hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "fc5506e2-2579-4862-bbbd-99ec11eee537": {"doc_hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "163b3f41-e986-4472-8f5c-170797f5b5c3": {"doc_hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "dd08a741-9b1b-4576-a801-5d576ba48d21": {"doc_hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8be71a40-c790-482d-b524-2d56f44e0444": {"doc_hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "57f96e43-9e41-4606-9219-d8876c44189b": {"doc_hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d86f4ba7-3f3e-4452-a0f2-a8a96702710c": {"doc_hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "78a62316-5fb4-40e0-932d-49ef6d1dd50d": {"doc_hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d684ab6a-bf39-4287-b9f3-b35110c5e67d": {"doc_hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2b42d31b-8e26-4af4-b621-620e7e8a7c23": {"doc_hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8b321aa2-2920-45e0-a4f1-d95f91c204aa": {"doc_hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "315320fd-bd2b-4a9f-92f5-7c51bbeb11b7": {"doc_hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "9d85bc6e-6b1f-424c-92de-fffa207038f1": {"doc_hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "32a28b6a-7988-40fa-9e26-cb891834466b": {"doc_hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c6360555-1115-49a6-9d73-c9ca10018c2b": {"doc_hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "b111868a-d451-4cab-ada9-ba83e75e81a1": {"doc_hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "89b4dad0-d748-4791-b5e4-f2ee3e52ac72": {"doc_hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "dc702538-eec2-4ece-ab43-0c405e512ec1": {"doc_hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "68c1b35c-36a5-4ab2-94cd-58c6458409b7": {"doc_hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f1a3e28b-f22d-45e4-8b35-0a8a4d05b25a": {"doc_hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a69dcc3d-4e83-4753-9daa-e2e2694d3051": {"doc_hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "dcc54757-3884-4d69-964c-0976c0a85958": {"doc_hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7ebf6072-0910-4320-b5b3-2b77464c441f": {"doc_hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8d7ff329-4777-44c8-9538-d1f971625291": {"doc_hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "60d3fde6-9501-4c40-b2eb-b864114d8c0b": {"doc_hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a15caed1-a72d-43fa-a70f-fa4ea0aee986": {"doc_hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "486054be-2d0f-4aa3-b3e0-eb8efaef9e34": {"doc_hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d1c9a9c0-b418-48f5-a3f9-f6a3388aab04": {"doc_hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "bd6972b6-68c3-4e13-bd27-84e1c72e0574": {"doc_hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "3ed74d86-8770-431b-bf5d-d58da0d8f7be": {"doc_hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "29741c28-4a1b-4435-b4eb-a8f13d14add1": {"doc_hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "8e2891d6-4013-4d25-a37d-be6ad0d73752": {"doc_hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "2e3a244d-a95e-42a1-b859-e0e92596d603": {"doc_hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ffb2e25f-7208-4d2a-a0b5-8ea05e4f404d": {"doc_hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "545fcc65-ce45-46dd-a9f2-73b207443f85": {"doc_hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "363ce7bb-a1b0-4b9c-8da2-97cfd851b667": {"doc_hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "6e580363-1d1b-4a81-95d1-9011a518884e": {"doc_hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "db82123e-b504-44b7-8649-0c3d9d0cfd7f": {"doc_hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "a4121176-b93a-435c-bde6-f726f8cbb478": {"doc_hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "740520eb-f580-43f3-9745-8b72e788b401": {"doc_hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "ac957156-1efd-465f-b54f-aa9d3b05fcf9": {"doc_hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "f86ab7cf-e2df-40c3-814f-ea609edfd60c": {"doc_hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "c256bccb-e675-4377-850b-89e2e45e86f8": {"doc_hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "fab1119d-7ef9-48c2-aa1e-5d3013867f12": {"doc_hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d28b47a1-f83c-4db7-9449-22631e08c2e0": {"doc_hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "7574ef0a-a488-4576-a092-5351910fc9ff": {"doc_hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "cb41785a-a3e8-49b9-930c-1dc800437014": {"doc_hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "d7ec28a6-5cca-48bf-a6f0-eec890286238": {"doc_hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}, "72b72c2c-a8ab-4ab7-adfb-908b1f50b53d": {"doc_hash": "8d77459b8be2b95ef185499fabf082d83096113e57464684ceec6de056d85888", "ref_doc_id": "df132f2e-94f2-4d84-965d-ad59bb949c65"}}, "docstore/data": {"9b782640-5e17-4657-98ad-c01a0dfee6bf": {"__data__": {"id_": "9b782640-5e17-4657-98ad-c01a0dfee6bf", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random. ", "original_text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "85d23c14-d06c-49a6-8da7-9f47c142876e", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "original_text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. "}, "hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "class_name": "RelatedNodeInfo"}}, "hash": "3289728c0705f201683b46382a6f628a09340b284469704b814d7386860d0a35", "text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. ", "start_char_idx": 0, "end_char_idx": 565, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85d23c14-d06c-49a6-8da7-9f47c142876e": {"__data__": {"id_": "85d23c14-d06c-49a6-8da7-9f47c142876e", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "original_text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b782640-5e17-4657-98ad-c01a0dfee6bf", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random. ", "original_text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. "}, "hash": "3289728c0705f201683b46382a6f628a09340b284469704b814d7386860d0a35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1dbc5daa-ad1f-477c-b07c-ae21ead197cb", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "original_text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. "}, "hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "class_name": "RelatedNodeInfo"}}, "hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. ", "start_char_idx": 565, "end_char_idx": 661, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1dbc5daa-ad1f-477c-b07c-ae21ead197cb": {"__data__": {"id_": "1dbc5daa-ad1f-477c-b07c-ae21ead197cb", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "original_text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "85d23c14-d06c-49a6-8da7-9f47c142876e", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "original_text": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. "}, "hash": "40d86a68fe776963766ea14158f79334b75de7a319044ce62523c28668800373", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8429bb22-6394-4d3a-a00e-1fceea1ebaf2", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "original_text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. "}, "hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "class_name": "RelatedNodeInfo"}}, "hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. ", "start_char_idx": 661, "end_char_idx": 816, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8429bb22-6394-4d3a-a00e-1fceea1ebaf2": {"__data__": {"id_": "8429bb22-6394-4d3a-a00e-1fceea1ebaf2", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "original_text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1dbc5daa-ad1f-477c-b07c-ae21ead197cb", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "original_text": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. "}, "hash": "17fd7b4a9c546ef134340449612e084f85bbb1ddda2f90040ef11212843a8e47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b62d339e-49ab-4288-8e69-ad79ff334b4e", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "original_text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. "}, "hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "class_name": "RelatedNodeInfo"}}, "hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. ", "start_char_idx": 816, "end_char_idx": 984, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b62d339e-49ab-4288-8e69-ad79ff334b4e": {"__data__": {"id_": "b62d339e-49ab-4288-8e69-ad79ff334b4e", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "original_text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8429bb22-6394-4d3a-a00e-1fceea1ebaf2", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "original_text": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train. "}, "hash": "23792f269f33463545b33e649f3b0ebf4e097f51e5feb0da1406fb96a42ec6c7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9924325b-70cb-468f-aab0-4d7a7f8cba8f", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "original_text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n"}, "hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "class_name": "RelatedNodeInfo"}}, "hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. ", "start_char_idx": 984, "end_char_idx": 1145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9924325b-70cb-468f-aab0-4d7a7f8cba8f": {"__data__": {"id_": "9924325b-70cb-468f-aab0-4d7a7f8cba8f", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "original_text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b62d339e-49ab-4288-8e69-ad79ff334b4e", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "original_text": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. "}, "hash": "56da176c7772c2e381ef48718c89e5e266b63073d45799e0b30bf6413fedc7dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03eba757-12e2-4071-8c47-de8811876737", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "original_text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. "}, "hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "class_name": "RelatedNodeInfo"}}, "hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n", "start_char_idx": 1145, "end_char_idx": 1396, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03eba757-12e2-4071-8c47-de8811876737": {"__data__": {"id_": "03eba757-12e2-4071-8c47-de8811876737", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "original_text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9924325b-70cb-468f-aab0-4d7a7f8cba8f", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "original_text": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n"}, "hash": "af38e54af27124698e2d2275043c350e94a97e1d8f623bf23f7145a669820a87", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e815df02-d232-4a78-ad95-d2d51c3efc35", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n", "original_text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n"}, "hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "class_name": "RelatedNodeInfo"}}, "hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. ", "start_char_idx": 1396, "end_char_idx": 1690, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e815df02-d232-4a78-ad95-d2d51c3efc35": {"__data__": {"id_": "e815df02-d232-4a78-ad95-d2d51c3efc35", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n", "original_text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03eba757-12e2-4071-8c47-de8811876737", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "original_text": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5]. "}, "hash": "4eb2f4a4ce8c033b5e143b0bdebc9bdaa30cf13cf209c7d414f7c26cb73b4e88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8fa0acf5-f6ab-4c8f-a4dd-1b170a9bc3dd", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n", "original_text": "\u2217Equal contribution. "}, "hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "class_name": "RelatedNodeInfo"}}, "hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n", "start_char_idx": 1690, "end_char_idx": 1828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8fa0acf5-f6ab-4c8f-a4dd-1b170a9bc3dd": {"__data__": {"id_": "8fa0acf5-f6ab-4c8f-a4dd-1b170a9bc3dd", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n", "original_text": "\u2217Equal contribution. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e815df02-d232-4a78-ad95-d2d51c3efc35", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n", "original_text": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n"}, "hash": "766c081917be82bee13aad4b52db9c3ac646d59fb62899c3235502d6685882d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e03ead4-0af7-4a30-be2e-41c428edb5c9", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "original_text": "Listing order is random. "}, "hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "class_name": "RelatedNodeInfo"}}, "hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "text": "\u2217Equal contribution. ", "start_char_idx": 1828, "end_char_idx": 1849, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e03ead4-0af7-4a30-be2e-41c428edb5c9": {"__data__": {"id_": "0e03ead4-0af7-4a30-be2e-41c428edb5c9", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "original_text": "Listing order is random. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8fa0acf5-f6ab-4c8f-a4dd-1b170a9bc3dd", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n", "original_text": "\u2217Equal contribution. "}, "hash": "dd7e3f7e52e993fe74992dd3a17b70044f44b614e3b6a97cf5944a6ea0903bad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1847cc45-329a-4113-a3c1-867f3075a227", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "original_text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. "}, "hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "class_name": "RelatedNodeInfo"}}, "hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "text": "Listing order is random. ", "start_char_idx": 1849, "end_char_idx": 1874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1847cc45-329a-4113-a3c1-867f3075a227": {"__data__": {"id_": "1847cc45-329a-4113-a3c1-867f3075a227", "embedding": null, "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "original_text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e03ead4-0af7-4a30-be2e-41c428edb5c9", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "original_text": "Listing order is random. "}, "hash": "3076f9bff5aaa1b0f710531638910b2947a1fe9f4744f5c5a0cb6651ff84b962", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7904065f-6c94-4ba8-ac1d-576b6e05c3bf", "node_type": "1", "metadata": {"window": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "original_text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. "}, "hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "class_name": "RelatedNodeInfo"}}, "hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. ", "start_char_idx": 1874, "end_char_idx": 1970, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7904065f-6c94-4ba8-ac1d-576b6e05c3bf": {"__data__": {"id_": "7904065f-6c94-4ba8-ac1d-576b6e05c3bf", "embedding": null, "metadata": {"window": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "original_text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1847cc45-329a-4113-a3c1-867f3075a227", "node_type": "1", "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "original_text": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. "}, "hash": "9a8626b1055011a8ccc5d5cd6babe1d7d8a767f29a45ad8386da60b472b6bb64", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7bf8b76f-a598-4c16-b996-ef10b9302477", "node_type": "1", "metadata": {"window": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "original_text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. "}, "hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "class_name": "RelatedNodeInfo"}}, "hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. ", "start_char_idx": 1970, "end_char_idx": 2105, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7bf8b76f-a598-4c16-b996-ef10b9302477": {"__data__": {"id_": "7bf8b76f-a598-4c16-b996-ef10b9302477", "embedding": null, "metadata": {"window": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "original_text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7904065f-6c94-4ba8-ac1d-576b6e05c3bf", "node_type": "1", "metadata": {"window": "The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "original_text": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work. "}, "hash": "5ed14e43763884de2bd19d451d8350d24fe1301eca53ba896617f5fbfa83b9d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e11529ac-a810-4e32-bb8f-5dd1156c12b4", "node_type": "1", "metadata": {"window": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n", "original_text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. "}, "hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "class_name": "RelatedNodeInfo"}}, "hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. ", "start_char_idx": 2105, "end_char_idx": 2278, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e11529ac-a810-4e32-bb8f-5dd1156c12b4": {"__data__": {"id_": "e11529ac-a810-4e32-bb8f-5dd1156c12b4", "embedding": null, "metadata": {"window": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n", "original_text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7bf8b76f-a598-4c16-b996-ef10b9302477", "node_type": "1", "metadata": {"window": "We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "original_text": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. "}, "hash": "369e2b15768f963b086ffc90c632a22faefc0483deac7e070e388688806978b4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a6560458-0d55-4cad-b04f-ea210f3723b2", "node_type": "1", "metadata": {"window": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "original_text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. "}, "hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "class_name": "RelatedNodeInfo"}}, "hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. ", "start_char_idx": 2278, "end_char_idx": 2395, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6560458-0d55-4cad-b04f-ea210f3723b2": {"__data__": {"id_": "a6560458-0d55-4cad-b04f-ea210f3723b2", "embedding": null, "metadata": {"window": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "original_text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e11529ac-a810-4e32-bb8f-5dd1156c12b4", "node_type": "1", "metadata": {"window": "Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n", "original_text": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. "}, "hash": "4cc8586440c07b5511b4f70e652a96958ddde6b6ac063ea2f73d467ed2fc38fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef2e3abf-c6cc-44ee-ae21-91c29f4f7632", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "original_text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n"}, "hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "class_name": "RelatedNodeInfo"}}, "hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. ", "start_char_idx": 2395, "end_char_idx": 2531, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef2e3abf-c6cc-44ee-ae21-91c29f4f7632": {"__data__": {"id_": "ef2e3abf-c6cc-44ee-ae21-91c29f4f7632", "embedding": null, "metadata": {"window": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "original_text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a6560458-0d55-4cad-b04f-ea210f3723b2", "node_type": "1", "metadata": {"window": "Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "original_text": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations. "}, "hash": "eccdd2adcf200dc5970fcea2447c12a759c2151c09cbfd89c00f4fb845b50085", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "783e270a-fecf-4433-a6d0-0ee411572e72", "node_type": "1", "metadata": {"window": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "original_text": "\u2020Work performed while at Google Brain.\n"}, "hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "class_name": "RelatedNodeInfo"}}, "hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "start_char_idx": 2531, "end_char_idx": 2732, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "783e270a-fecf-4433-a6d0-0ee411572e72": {"__data__": {"id_": "783e270a-fecf-4433-a6d0-0ee411572e72", "embedding": null, "metadata": {"window": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "original_text": "\u2020Work performed while at Google Brain.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef2e3abf-c6cc-44ee-ae21-91c29f4f7632", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "original_text": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n"}, "hash": "175c2f9d7c080f31860bda4abde0c8e1729ba6f317234bea9764383381eefecd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "11c726e2-bd4a-4117-8e04-83a8c6f5bde1", "node_type": "1", "metadata": {"window": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "original_text": "\u2021Work performed while at Google Research.\n"}, "hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "class_name": "RelatedNodeInfo"}}, "hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "text": "\u2020Work performed while at Google Brain.\n", "start_char_idx": 2732, "end_char_idx": 2771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "11c726e2-bd4a-4117-8e04-83a8c6f5bde1": {"__data__": {"id_": "11c726e2-bd4a-4117-8e04-83a8c6f5bde1", "embedding": null, "metadata": {"window": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "original_text": "\u2021Work performed while at Google Research.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "783e270a-fecf-4433-a6d0-0ee411572e72", "node_type": "1", "metadata": {"window": "1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "original_text": "\u2020Work performed while at Google Brain.\n"}, "hash": "c2925c56609b6b68545d61d22e1adf92cd756f36ee3a552dc435b84a6a36a85e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aaad2c88-bd79-42ee-ae6b-53ca393dbf82", "node_type": "1", "metadata": {"window": "\u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "original_text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n"}, "hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "class_name": "RelatedNodeInfo"}}, "hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "text": "\u2021Work performed while at Google Research.\n", "start_char_idx": 2771, "end_char_idx": 2813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aaad2c88-bd79-42ee-ae6b-53ca393dbf82": {"__data__": {"id_": "aaad2c88-bd79-42ee-ae6b-53ca393dbf82", "embedding": null, "metadata": {"window": "\u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "original_text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "11c726e2-bd4a-4117-8e04-83a8c6f5bde1", "node_type": "1", "metadata": {"window": "Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "original_text": "\u2021Work performed while at Google Research.\n"}, "hash": "433cd17c9046f5ca81a4ca0cf6fa9e5743e02a01c8cc399cf9c4415406b6061b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b44c2162-be79-416c-863f-f699da3b6c82", "node_type": "1", "metadata": {"window": "Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "original_text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. "}, "hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "class_name": "RelatedNodeInfo"}}, "hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n", "start_char_idx": 2813, "end_char_idx": 2905, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b44c2162-be79-416c-863f-f699da3b6c82": {"__data__": {"id_": "b44c2162-be79-416c-863f-f699da3b6c82", "embedding": null, "metadata": {"window": "Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "original_text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aaad2c88-bd79-42ee-ae6b-53ca393dbf82", "node_type": "1", "metadata": {"window": "\u2217Equal contribution.  Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "original_text": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n"}, "hash": "2b170982fd1cdb076c013ee4251560d7e5e9a4a00c2c1675a15fc12ac44ab8ec", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf0d57ff-9c19-46ee-901b-f07c4ef8d0f2", "node_type": "1", "metadata": {"window": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "original_text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. "}, "hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "class_name": "RelatedNodeInfo"}}, "hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. ", "start_char_idx": 2905, "end_char_idx": 3013, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf0d57ff-9c19-46ee-901b-f07c4ef8d0f2": {"__data__": {"id_": "cf0d57ff-9c19-46ee-901b-f07c4ef8d0f2", "embedding": null, "metadata": {"window": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "original_text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b44c2162-be79-416c-863f-f699da3b6c82", "node_type": "1", "metadata": {"window": "Listing order is random.  Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "original_text": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. "}, "hash": "49667a8a7f6e1f46f2464b3af93a17b8c66b3de47cc108507ab1dc519372a7cd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "879ce961-680b-4552-b9c7-fda2f249a0a2", "node_type": "1", "metadata": {"window": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "original_text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. "}, "hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "class_name": "RelatedNodeInfo"}}, "hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. ", "start_char_idx": 3013, "end_char_idx": 3379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "879ce961-680b-4552-b9c7-fda2f249a0a2": {"__data__": {"id_": "879ce961-680b-4552-b9c7-fda2f249a0a2", "embedding": null, "metadata": {"window": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "original_text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf0d57ff-9c19-46ee-901b-f07c4ef8d0f2", "node_type": "1", "metadata": {"window": "Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.  Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "original_text": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. "}, "hash": "843e34696382a8dfbf03bd1152f380b1ff5a27d760c74c430a78c287981f6e07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ed11b5f-ac3f-47bb-8be6-7811cfa1bd4e", "node_type": "1", "metadata": {"window": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "original_text": "The fundamental\nconstraint of sequential computation, however, remains.\n"}, "hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "class_name": "RelatedNodeInfo"}}, "hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. ", "start_char_idx": 3379, "end_char_idx": 3587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ed11b5f-ac3f-47bb-8be6-7811cfa1bd4e": {"__data__": {"id_": "1ed11b5f-ac3f-47bb-8be6-7811cfa1bd4e", "embedding": null, "metadata": {"window": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "original_text": "The fundamental\nconstraint of sequential computation, however, remains.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "879ce961-680b-4552-b9c7-fda2f249a0a2", "node_type": "1", "metadata": {"window": "Ashish, with Illia, designed and implemented the \ufb01rst Transformer models and\nhas been crucially involved in every aspect of this work.  Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "original_text": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter. "}, "hash": "490e296a88fdcd6f68438bd4ae62208714226f82fe2d39263627761ac51b7d1b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96df6cdf-fc7c-4696-ba55-dd7c257925f8", "node_type": "1", "metadata": {"window": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "original_text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. "}, "hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "class_name": "RelatedNodeInfo"}}, "hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "text": "The fundamental\nconstraint of sequential computation, however, remains.\n", "start_char_idx": 3587, "end_char_idx": 3659, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96df6cdf-fc7c-4696-ba55-dd7c257925f8": {"__data__": {"id_": "96df6cdf-fc7c-4696-ba55-dd7c257925f8", "embedding": null, "metadata": {"window": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "original_text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ed11b5f-ac3f-47bb-8be6-7811cfa1bd4e", "node_type": "1", "metadata": {"window": "Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.  Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "original_text": "The fundamental\nconstraint of sequential computation, however, remains.\n"}, "hash": "c8fc865ce4a016ca5eec27d5d739cae0fa6f73a431a93835d36b4e8a695d641a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f818e615-229c-45ca-a236-ecc7f448249d", "node_type": "1", "metadata": {"window": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "original_text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n"}, "hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "class_name": "RelatedNodeInfo"}}, "hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. ", "start_char_idx": 3659, "end_char_idx": 3894, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f818e615-229c-45ca-a236-ecc7f448249d": {"__data__": {"id_": "f818e615-229c-45ca-a236-ecc7f448249d", "embedding": null, "metadata": {"window": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "original_text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96df6cdf-fc7c-4696-ba55-dd7c257925f8", "node_type": "1", "metadata": {"window": "Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.  Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "original_text": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16]. "}, "hash": "4f929a2dadbef30bf108042da112e332d507266e082d65ac3cf524bbe67e6655", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4922561-1cdb-456b-b361-2af8599eb926", "node_type": "1", "metadata": {"window": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "original_text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n"}, "hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "class_name": "RelatedNodeInfo"}}, "hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "start_char_idx": 3894, "end_char_idx": 4009, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4922561-1cdb-456b-b361-2af8599eb926": {"__data__": {"id_": "e4922561-1cdb-456b-b361-2af8599eb926", "embedding": null, "metadata": {"window": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "original_text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f818e615-229c-45ca-a236-ecc7f448249d", "node_type": "1", "metadata": {"window": "Llion also experimented with novel model variants, was responsible for our initial codebase, and\nef\ufb01cient inference and visualizations.  Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "original_text": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n"}, "hash": "766e47d3f2a9abd5b2c7ec1ed8dffd60d0e6540a4eb0ba10ea2d0d7d0c41b7e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2110b5a0-c4c2-40a3-b40e-d349f8650eba", "node_type": "1", "metadata": {"window": "\u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "original_text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n"}, "hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "class_name": "RelatedNodeInfo"}}, "hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n", "start_char_idx": 4009, "end_char_idx": 4201, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2110b5a0-c4c2-40a3-b40e-d349f8650eba": {"__data__": {"id_": "2110b5a0-c4c2-40a3-b40e-d349f8650eba", "embedding": null, "metadata": {"window": "\u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "original_text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4922561-1cdb-456b-b361-2af8599eb926", "node_type": "1", "metadata": {"window": "Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n \u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "original_text": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n"}, "hash": "c70098423220cf68ccd47f4d773471782f3f235bac651a95bb3b335ee965d7e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9f598ca-e327-4323-a222-6667bb87f1eb", "node_type": "1", "metadata": {"window": "\u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "original_text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. "}, "hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "class_name": "RelatedNodeInfo"}}, "hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "start_char_idx": 4201, "end_char_idx": 4392, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9f598ca-e327-4323-a222-6667bb87f1eb": {"__data__": {"id_": "c9f598ca-e327-4323-a222-6667bb87f1eb", "embedding": null, "metadata": {"window": "\u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "original_text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2110b5a0-c4c2-40a3-b40e-d349f8650eba", "node_type": "1", "metadata": {"window": "\u2020Work performed while at Google Brain.\n \u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "original_text": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n"}, "hash": "4f155921e5efe4a066126ad56353b4a187c2e117c2c3a505b19d388e05750e48", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "66715fcb-5d8a-4219-9681-6af3bc4a85c0", "node_type": "1", "metadata": {"window": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "original_text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. "}, "hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "class_name": "RelatedNodeInfo"}}, "hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. ", "start_char_idx": 4392, "end_char_idx": 4693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "66715fcb-5d8a-4219-9681-6af3bc4a85c0": {"__data__": {"id_": "66715fcb-5d8a-4219-9681-6af3bc4a85c0", "embedding": null, "metadata": {"window": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "original_text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9f598ca-e327-4323-a222-6667bb87f1eb", "node_type": "1", "metadata": {"window": "\u2021Work performed while at Google Research.\n 31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "original_text": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. "}, "hash": "0f74d77c769379ef012aad0d70d40a07cf5db6b4084a7d108884c807aed56b77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7cb2157d-072e-4283-be89-5a0587e366f9", "node_type": "1", "metadata": {"window": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "original_text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. "}, "hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "class_name": "RelatedNodeInfo"}}, "hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. ", "start_char_idx": 4693, "end_char_idx": 4902, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7cb2157d-072e-4283-be89-5a0587e366f9": {"__data__": {"id_": "7cb2157d-072e-4283-be89-5a0587e366f9", "embedding": null, "metadata": {"window": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "original_text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "66715fcb-5d8a-4219-9681-6af3bc4a85c0", "node_type": "1", "metadata": {"window": "31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.\n\n Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "original_text": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. "}, "hash": "d895e1f83e34cf72b3563254db33eda628707007ed611633a84197791293a083", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0abde137-9581-47fe-ab2d-2fd80ea3d1d7", "node_type": "1", "metadata": {"window": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "original_text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n"}, "hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "class_name": "RelatedNodeInfo"}}, "hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. ", "start_char_idx": 4902, "end_char_idx": 4985, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0abde137-9581-47fe-ab2d-2fd80ea3d1d7": {"__data__": {"id_": "0abde137-9581-47fe-ab2d-2fd80ea3d1d7", "embedding": null, "metadata": {"window": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "original_text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7cb2157d-072e-4283-be89-5a0587e366f9", "node_type": "1", "metadata": {"window": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.  Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "original_text": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11]. "}, "hash": "278de88c3b6ce8c736aace77ca11753a5a2aed88711d67d14a409acc35479212", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "560584d3-212b-40a7-8457-c42546dea158", "node_type": "1", "metadata": {"window": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "original_text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. "}, "hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "class_name": "RelatedNodeInfo"}}, "hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "start_char_idx": 4985, "end_char_idx": 5233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "560584d3-212b-40a7-8457-c42546dea158": {"__data__": {"id_": "560584d3-212b-40a7-8457-c42546dea158", "embedding": null, "metadata": {"window": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "original_text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0abde137-9581-47fe-ab2d-2fd80ea3d1d7", "node_type": "1", "metadata": {"window": "Aligning the positions to steps in computation time, they generate a sequence of hidden\nstatesht, as a function of the previous hidden state ht\u22121and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.  Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "original_text": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n"}, "hash": "9da790b46c0ffebfdf836954a2fdecd3e7d7da93034d6c68df11aa21377d6614", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "750bdd6c-98ed-4f17-b4b4-2b9765ba1331", "node_type": "1", "metadata": {"window": "The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "original_text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n"}, "hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "class_name": "RelatedNodeInfo"}}, "hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. ", "start_char_idx": 5233, "end_char_idx": 5412, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "750bdd6c-98ed-4f17-b4b4-2b9765ba1331": {"__data__": {"id_": "750bdd6c-98ed-4f17-b4b4-2b9765ba1331", "embedding": null, "metadata": {"window": "The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "original_text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "560584d3-212b-40a7-8457-c42546dea158", "node_type": "1", "metadata": {"window": "Recent work has achieved\nsigni\ufb01cant improvements in computational ef\ufb01ciency through factorization tricks [ 18] and conditional\ncomputation [ 26], while also improving model performance in case of the latter.  The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "original_text": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. "}, "hash": "e133fdc5387f6afbdaec040073e047d27cd4b24e698ec12601c3b8c018bd9ae7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "382caf15-1219-43bd-aa14-816a978bcec2", "node_type": "1", "metadata": {"window": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers. ", "original_text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n"}, "hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "class_name": "RelatedNodeInfo"}}, "hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n", "start_char_idx": 5412, "end_char_idx": 5627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "382caf15-1219-43bd-aa14-816a978bcec2": {"__data__": {"id_": "382caf15-1219-43bd-aa14-816a978bcec2", "embedding": null, "metadata": {"window": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers. ", "original_text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "750bdd6c-98ed-4f17-b4b4-2b9765ba1331", "node_type": "1", "metadata": {"window": "The fundamental\nconstraint of sequential computation, however, remains.\n Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "original_text": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n"}, "hash": "3c11814f0c6217b9a22188806d07bad1aaac46ef5a420a9894f5757844f20b13", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c03a7fb5-1fc9-4099-8fac-814ca152c076", "node_type": "1", "metadata": {"window": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "original_text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. "}, "hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "class_name": "RelatedNodeInfo"}}, "hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n", "start_char_idx": 5627, "end_char_idx": 5847, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c03a7fb5-1fc9-4099-8fac-814ca152c076": {"__data__": {"id_": "c03a7fb5-1fc9-4099-8fac-814ca152c076", "embedding": null, "metadata": {"window": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "original_text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "382caf15-1219-43bd-aa14-816a978bcec2", "node_type": "1", "metadata": {"window": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,16].  In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers. ", "original_text": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n"}, "hash": "992d94a2ae6104dfd4f47488e4706e38ce4458b4fd51736cb84d9429af36397e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be58ff04-02b8-40bb-bf74-f4aaf42c87dd", "node_type": "1", "metadata": {"window": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network. ", "original_text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n"}, "hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "class_name": "RelatedNodeInfo"}}, "hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. ", "start_char_idx": 5847, "end_char_idx": 6072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be58ff04-02b8-40bb-bf74-f4aaf42c87dd": {"__data__": {"id_": "be58ff04-02b8-40bb-bf74-f4aaf42c87dd", "embedding": null, "metadata": {"window": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network. ", "original_text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c03a7fb5-1fc9-4099-8fac-814ca152c076", "node_type": "1", "metadata": {"window": "In all but a few cases [ 22], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "original_text": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. "}, "hash": "7cdf4cbb854d38fbe32b2384d3fa27efee0c2867b3bffbcd45169b4217ad5850", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c75b8402-e992-4508-841e-6db2176951c0", "node_type": "1", "metadata": {"window": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "original_text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n"}, "hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "class_name": "RelatedNodeInfo"}}, "hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n", "start_char_idx": 6072, "end_char_idx": 6222, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c75b8402-e992-4508-841e-6db2176951c0": {"__data__": {"id_": "c75b8402-e992-4508-841e-6db2176951c0", "embedding": null, "metadata": {"window": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "original_text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be58ff04-02b8-40bb-bf74-f4aaf42c87dd", "node_type": "1", "metadata": {"window": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network. ", "original_text": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n"}, "hash": "fa99f26f707f02c9147566d56aeaaf944ff29d5568cf8577826e93b8fb18796d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90abe1f3-e1ef-40fb-9b69-68c6b98c94c1", "node_type": "1", "metadata": {"window": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "original_text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). "}, "hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "class_name": "RelatedNodeInfo"}}, "hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n", "start_char_idx": 6222, "end_char_idx": 6341, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90abe1f3-e1ef-40fb-9b69-68c6b98c94c1": {"__data__": {"id_": "90abe1f3-e1ef-40fb-9b69-68c6b98c94c1", "embedding": null, "metadata": {"window": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "original_text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c75b8402-e992-4508-841e-6db2176951c0", "node_type": "1", "metadata": {"window": "The Transformer allows for signi\ufb01cantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n 2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "original_text": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n"}, "hash": "bf24c212a36268efa42ab02dabd02e5a5824dfee4c8b0bab4d02b3e31cfb6faf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2118354c-a337-4932-8378-504554a73521", "node_type": "1", "metadata": {"window": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "original_text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. "}, "hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "class_name": "RelatedNodeInfo"}}, "hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). ", "start_char_idx": 6341, "end_char_idx": 6481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2118354c-a337-4932-8378-504554a73521": {"__data__": {"id_": "2118354c-a337-4932-8378-504554a73521", "embedding": null, "metadata": {"window": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "original_text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90abe1f3-e1ef-40fb-9b69-68c6b98c94c1", "node_type": "1", "metadata": {"window": "2 Background\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[20], ByteNet [ 15] and ConvS2S [ 8], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.  In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "original_text": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n). "}, "hash": "fb43878f0b887b1229dda9d51c9d00a98b326b0d807df6360f036c5771f7db94", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54ff56a1-d2ed-4b94-9ef4-e72ab7402d63", "node_type": "1", "metadata": {"window": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "original_text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n"}, "hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "class_name": "RelatedNodeInfo"}}, "hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. ", "start_char_idx": 6481, "end_char_idx": 6582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54ff56a1-d2ed-4b94-9ef4-e72ab7402d63": {"__data__": {"id_": "54ff56a1-d2ed-4b94-9ef4-e72ab7402d63", "embedding": null, "metadata": {"window": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "original_text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2118354c-a337-4932-8378-504554a73521", "node_type": "1", "metadata": {"window": "In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.  This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "original_text": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time. "}, "hash": "62d2ca362e097faf1a5768d8e5679ba3d8e0437c6e84184aea63c98cf0e4f252", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f426cc9-b35a-46a4-bbab-ef43caa90414", "node_type": "1", "metadata": {"window": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "original_text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n"}, "hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "class_name": "RelatedNodeInfo"}}, "hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n", "start_char_idx": 6582, "end_char_idx": 6718, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f426cc9-b35a-46a4-bbab-ef43caa90414": {"__data__": {"id_": "1f426cc9-b35a-46a4-bbab-ef43caa90414", "embedding": null, "metadata": {"window": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "original_text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54ff56a1-d2ed-4b94-9ef4-e72ab7402d63", "node_type": "1", "metadata": {"window": "This makes\nit more dif\ufb01cult to learn dependencies between distant positions [ 11].  In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "original_text": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n"}, "hash": "58c3a02d0006c18cf58a70f77e1e63ec46fe369e050f15f46fc02eb04968c75d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3573c531-5d79-4d70-abba-14a58c9a267e", "node_type": "1", "metadata": {"window": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "original_text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. "}, "hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "class_name": "RelatedNodeInfo"}}, "hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "start_char_idx": 6718, "end_char_idx": 6932, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3573c531-5d79-4d70-abba-14a58c9a267e": {"__data__": {"id_": "3573c531-5d79-4d70-abba-14a58c9a267e", "embedding": null, "metadata": {"window": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "original_text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f426cc9-b35a-46a4-bbab-ef43caa90414", "node_type": "1", "metadata": {"window": "In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "original_text": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n"}, "hash": "1cf3e383e5f68d48d46472d013f9adc31de4f1861278143d3220852335865555", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f4eb185-172d-4d9d-88a5-1f1f02b9fda1", "node_type": "1", "metadata": {"window": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "original_text": "Each layer has two\nsub-layers. "}, "hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "class_name": "RelatedNodeInfo"}}, "hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. ", "start_char_idx": 6932, "end_char_idx": 7033, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f4eb185-172d-4d9d-88a5-1f1f02b9fda1": {"__data__": {"id_": "0f4eb185-172d-4d9d-88a5-1f1f02b9fda1", "embedding": null, "metadata": {"window": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "original_text": "Each layer has two\nsub-layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3573c531-5d79-4d70-abba-14a58c9a267e", "node_type": "1", "metadata": {"window": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.  Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "original_text": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers. "}, "hash": "43eb030964ed3f650b209345e8763e86645fbae8c566f2a9858e7d53004fc8aa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "39e14af8-b845-4b09-a213-45a13b70cfde", "node_type": "1", "metadata": {"window": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "original_text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n"}, "hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "class_name": "RelatedNodeInfo"}}, "hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "text": "Each layer has two\nsub-layers. ", "start_char_idx": 7033, "end_char_idx": 7064, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39e14af8-b845-4b09-a213-45a13b70cfde": {"__data__": {"id_": "39e14af8-b845-4b09-a213-45a13b70cfde", "embedding": null, "metadata": {"window": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "original_text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0f4eb185-172d-4d9d-88a5-1f1f02b9fda1", "node_type": "1", "metadata": {"window": "Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 22, 23, 19].\n End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "original_text": "Each layer has two\nsub-layers. "}, "hash": "f90222ae497866bc008cacc0b6398dc0b3944ae49646109541e1a03577f39ad8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eaead8a4-19c6-46fa-a005-9175ed6f9426", "node_type": "1", "metadata": {"window": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "original_text": "wise fully connected feed-forward network. "}, "hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "class_name": "RelatedNodeInfo"}}, "hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n", "start_char_idx": 7064, "end_char_idx": 7204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eaead8a4-19c6-46fa-a005-9175ed6f9426": {"__data__": {"id_": "eaead8a4-19c6-46fa-a005-9175ed6f9426", "embedding": null, "metadata": {"window": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "original_text": "wise fully connected feed-forward network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39e14af8-b845-4b09-a213-45a13b70cfde", "node_type": "1", "metadata": {"window": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence-\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [28].\n To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "original_text": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n"}, "hash": "676b25d940be3a04328417ccb08a0b1e9c9e119c91f4d80f6c85d081ed9c2e9f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c356f552-3ee7-450e-b674-0e5ec03cc6ca", "node_type": "1", "metadata": {"window": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "original_text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. "}, "hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "class_name": "RelatedNodeInfo"}}, "hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "text": "wise fully connected feed-forward network. ", "start_char_idx": 7204, "end_char_idx": 7247, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c356f552-3ee7-450e-b674-0e5ec03cc6ca": {"__data__": {"id_": "c356f552-3ee7-450e-b674-0e5ec03cc6ca", "embedding": null, "metadata": {"window": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "original_text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eaead8a4-19c6-46fa-a005-9175ed6f9426", "node_type": "1", "metadata": {"window": "To the best of our knowledge, however, the Transformer is the \ufb01rst transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.  In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "original_text": "wise fully connected feed-forward network. "}, "hash": "7f337229da98f203b19ceb9dd7f21a4694512d64ecb239129c644e507539b00b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5205e22e-1825-44ff-a7ab-240962938666", "node_type": "1", "metadata": {"window": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "original_text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. "}, "hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "class_name": "RelatedNodeInfo"}}, "hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. ", "start_char_idx": 7247, "end_char_idx": 7358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5205e22e-1825-44ff-a7ab-240962938666": {"__data__": {"id_": "5205e22e-1825-44ff-a7ab-240962938666", "embedding": null, "metadata": {"window": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "original_text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c356f552-3ee7-450e-b674-0e5ec03cc6ca", "node_type": "1", "metadata": {"window": "In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [14, 15] and [8].\n 3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "original_text": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1]. "}, "hash": "77f457b6ceea5130a524c0f41732d29a33a817d0753112f9079e19add5e97ada", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "94524f83-7f1e-461a-af58-b20fcd2375d2", "node_type": "1", "metadata": {"window": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "original_text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n"}, "hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "class_name": "RelatedNodeInfo"}}, "hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. ", "start_char_idx": 7358, "end_char_idx": 7498, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "94524f83-7f1e-461a-af58-b20fcd2375d2": {"__data__": {"id_": "94524f83-7f1e-461a-af58-b20fcd2375d2", "embedding": null, "metadata": {"window": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "original_text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5205e22e-1825-44ff-a7ab-240962938666", "node_type": "1", "metadata": {"window": "3 Model Architecture\nMost competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,29].\n Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "original_text": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself. "}, "hash": "7569319385b420f1e8dd1c9f70073850b7b55916eba1883f964830cf042d6034", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "38d90384-248f-485c-aa12-b76ef73c48dd", "node_type": "1", "metadata": {"window": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "original_text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. "}, "hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "class_name": "RelatedNodeInfo"}}, "hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n", "start_char_idx": 7498, "end_char_idx": 7646, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "38d90384-248f-485c-aa12-b76ef73c48dd": {"__data__": {"id_": "38d90384-248f-485c-aa12-b76ef73c48dd", "embedding": null, "metadata": {"window": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "original_text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "94524f83-7f1e-461a-af58-b20fcd2375d2", "node_type": "1", "metadata": {"window": "Here, the encoder maps an input sequence of symbol representations (x1,...,x n)to a sequence\nof continuous representations z= (z1,...,z n).  Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "original_text": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n"}, "hash": "844af1e3a004fc91b539ead48b5f6fbd1f9688860d949e451f5b7579fedbb2e7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93ffdcaf-4666-4b0c-9d56-0afb087db09f", "node_type": "1", "metadata": {"window": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "original_text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. "}, "hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "class_name": "RelatedNodeInfo"}}, "hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. ", "start_char_idx": 7646, "end_char_idx": 7720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93ffdcaf-4666-4b0c-9d56-0afb087db09f": {"__data__": {"id_": "93ffdcaf-4666-4b0c-9d56-0afb087db09f", "embedding": null, "metadata": {"window": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "original_text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "38d90384-248f-485c-aa12-b76ef73c48dd", "node_type": "1", "metadata": {"window": "Given z, the decoder then generates an output\nsequence (y1,...,y m)of symbols one element at a time.  At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "original_text": "Decoder: The decoder is also composed of a stack of N= 6identical layers. "}, "hash": "884ba1a81f08b403cf7116ac87a3f1e36f9f71d45fc95fb43eba7143c1242a06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7c676aef-7eca-4095-a07c-4d8ba031f5c0", "node_type": "1", "metadata": {"window": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "original_text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. "}, "hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "class_name": "RelatedNodeInfo"}}, "hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. ", "start_char_idx": 7720, "end_char_idx": 7890, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7c676aef-7eca-4095-a07c-4d8ba031f5c0": {"__data__": {"id_": "7c676aef-7eca-4095-a07c-4d8ba031f5c0", "embedding": null, "metadata": {"window": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "original_text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93ffdcaf-4666-4b0c-9d56-0afb087db09f", "node_type": "1", "metadata": {"window": "At each step the model is auto-regressive\n[9], consuming the previously generated symbols as additional input when generating the next.\n The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "original_text": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. "}, "hash": "fff9819e376adfdebf3eca0557a7e2d30bad66ce5f225a343593ca93e23a527c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f44f85df-50a7-4937-b279-2de87c420b4d", "node_type": "1", "metadata": {"window": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "original_text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. "}, "hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "class_name": "RelatedNodeInfo"}}, "hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. ", "start_char_idx": 7890, "end_char_idx": 8009, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f44f85df-50a7-4937-b279-2de87c420b4d": {"__data__": {"id_": "f44f85df-50a7-4937-b279-2de87c420b4d", "embedding": null, "metadata": {"window": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "original_text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7c676aef-7eca-4095-a07c-4d8ba031f5c0", "node_type": "1", "metadata": {"window": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n 3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "original_text": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. "}, "hash": "33bd7fd81f598cbf3455ece0586051e913068fee4431d2ea2c44b14bf594ab88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a8819e9d-5a34-4994-9d9a-04c829a6efa7", "node_type": "1", "metadata": {"window": "Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "original_text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n"}, "hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "class_name": "RelatedNodeInfo"}}, "hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. ", "start_char_idx": 8009, "end_char_idx": 8135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a8819e9d-5a34-4994-9d9a-04c829a6efa7": {"__data__": {"id_": "a8819e9d-5a34-4994-9d9a-04c829a6efa7", "embedding": null, "metadata": {"window": "Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "original_text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f44f85df-50a7-4937-b279-2de87c420b4d", "node_type": "1", "metadata": {"window": "3.1 Encoder and Decoder Stacks\nEncoder: The encoder is composed of a stack of N= 6 identical layers.  Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "original_text": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. "}, "hash": "e6ffe06052ccb299d5f2fd2aab119da7779d46c410077302481f179380e3e970", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "850fa3da-6f18-40d8-816a-242ce66c2ffb", "node_type": "1", "metadata": {"window": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "original_text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. "}, "hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "class_name": "RelatedNodeInfo"}}, "hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n", "start_char_idx": 8135, "end_char_idx": 8329, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "850fa3da-6f18-40d8-816a-242ce66c2ffb": {"__data__": {"id_": "850fa3da-6f18-40d8-816a-242ce66c2ffb", "embedding": null, "metadata": {"window": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "original_text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a8819e9d-5a34-4994-9d9a-04c829a6efa7", "node_type": "1", "metadata": {"window": "Each layer has two\nsub-layers.  The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "original_text": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n"}, "hash": "4525816e989e41edc3d7d8782463de7ab1790dcdbc83d6572584853e86907935", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c10ed964-2ac2-4920-a57f-386913c921fd", "node_type": "1", "metadata": {"window": "wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "original_text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n"}, "hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "class_name": "RelatedNodeInfo"}}, "hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. ", "start_char_idx": 8329, "end_char_idx": 8503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c10ed964-2ac2-4920-a57f-386913c921fd": {"__data__": {"id_": "c10ed964-2ac2-4920-a57f-386913c921fd", "embedding": null, "metadata": {"window": "wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "original_text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "850fa3da-6f18-40d8-816a-242ce66c2ffb", "node_type": "1", "metadata": {"window": "The \ufb01rst is a multi-head self-attention mechanism, and the second is a simple, position-\n2\n\nFigure 1: The Transformer - model architecture.\n wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "original_text": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. "}, "hash": "e6fbd9f5cb10734bff383583057ee47880b16976205c79c19c231c89adcaadf3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8912afda-d1dc-47fa-bb8b-693fafe63ecf", "node_type": "1", "metadata": {"window": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "original_text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). "}, "hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "class_name": "RelatedNodeInfo"}}, "hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "start_char_idx": 8503, "end_char_idx": 8680, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8912afda-d1dc-47fa-bb8b-693fafe63ecf": {"__data__": {"id_": "8912afda-d1dc-47fa-bb8b-693fafe63ecf", "embedding": null, "metadata": {"window": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "original_text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c10ed964-2ac2-4920-a57f-386913c921fd", "node_type": "1", "metadata": {"window": "wise fully connected feed-forward network.  We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "original_text": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n"}, "hash": "dc28c499ba4017894e67ea5359b542ffb9f1b68a08859c732c601adc7033a6fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "322068ba-0686-4f63-a6a7-9d87fa7cd457", "node_type": "1", "metadata": {"window": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "original_text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. "}, "hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "class_name": "RelatedNodeInfo"}}, "hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). ", "start_char_idx": 8680, "end_char_idx": 8791, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "322068ba-0686-4f63-a6a7-9d87fa7cd457": {"__data__": {"id_": "322068ba-0686-4f63-a6a7-9d87fa7cd457", "embedding": null, "metadata": {"window": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "original_text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8912afda-d1dc-47fa-bb8b-693fafe63ecf", "node_type": "1", "metadata": {"window": "We employ a residual connection [ 10] around each of\nthe two sub-layers, followed by layer normalization [ 1].  That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "original_text": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). "}, "hash": "41f7db1542698580f25e4d8ead7d7936b5114ed2cd8196dfb580566612de1ab1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "46ada6da-7562-4233-902f-081d1a7e1948", "node_type": "1", "metadata": {"window": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "original_text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. "}, "hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "class_name": "RelatedNodeInfo"}}, "hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. ", "start_char_idx": 8791, "end_char_idx": 8875, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "46ada6da-7562-4233-902f-081d1a7e1948": {"__data__": {"id_": "46ada6da-7562-4233-902f-081d1a7e1948", "embedding": null, "metadata": {"window": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "original_text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "322068ba-0686-4f63-a6a7-9d87fa7cd457", "node_type": "1", "metadata": {"window": "That is, the output of each sub-layer is\nLayerNorm( x+ Sublayer( x)), where Sublayer(x)is the function implemented by the sub-layer\nitself.  To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "original_text": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv. "}, "hash": "903f8b64d61e2de5ad39aca4a24956acf37e4c5ad176498275d65d99c7fcafd4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4ef5cc6-ac95-474a-9ac7-4d5583240e7d", "node_type": "1", "metadata": {"window": "Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n", "original_text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n"}, "hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "class_name": "RelatedNodeInfo"}}, "hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. ", "start_char_idx": 8875, "end_char_idx": 9011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4ef5cc6-ac95-474a-9ac7-4d5583240e7d": {"__data__": {"id_": "e4ef5cc6-ac95-474a-9ac7-4d5583240e7d", "embedding": null, "metadata": {"window": "Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n", "original_text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "46ada6da-7562-4233-902f-081d1a7e1948", "node_type": "1", "metadata": {"window": "To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmodel = 512 .\n Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "original_text": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention. "}, "hash": "99b186774c1669db936d8041c131d91a9db6e5ef0e8584386c2aab2830e9cf11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2418f743-c43a-4c0b-a73e-690a8cf3b845", "node_type": "1", "metadata": {"window": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "original_text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n"}, "hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "class_name": "RelatedNodeInfo"}}, "hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n", "start_char_idx": 9011, "end_char_idx": 9098, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2418f743-c43a-4c0b-a73e-690a8cf3b845": {"__data__": {"id_": "2418f743-c43a-4c0b-a73e-690a8cf3b845", "embedding": null, "metadata": {"window": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "original_text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4ef5cc6-ac95-474a-9ac7-4d5583240e7d", "node_type": "1", "metadata": {"window": "Decoder: The decoder is also composed of a stack of N= 6identical layers.  In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n", "original_text": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n"}, "hash": "75bb789f34a8c2854bf1f16d61c993ea020edc6fa206d9378e9ac6e66e12ce8d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6bd0687b-16f2-49ce-a53f-ef2605d563d3", "node_type": "1", "metadata": {"window": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "original_text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. "}, "hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "class_name": "RelatedNodeInfo"}}, "hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n", "start_char_idx": 9098, "end_char_idx": 9204, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6bd0687b-16f2-49ce-a53f-ef2605d563d3": {"__data__": {"id_": "6bd0687b-16f2-49ce-a53f-ef2605d563d3", "embedding": null, "metadata": {"window": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "original_text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2418f743-c43a-4c0b-a73e-690a8cf3b845", "node_type": "1", "metadata": {"window": "In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.  Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "original_text": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n"}, "hash": "70b79cda4d8ab6fffdc0e51035a532f76718be5bb09554b6e3ca1004c3848a79", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4434355b-9e1e-436a-94e3-1b8a3767901a", "node_type": "1", "metadata": {"window": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "original_text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. "}, "hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "class_name": "RelatedNodeInfo"}}, "hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. ", "start_char_idx": 9204, "end_char_idx": 9386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4434355b-9e1e-436a-94e3-1b8a3767901a": {"__data__": {"id_": "4434355b-9e1e-436a-94e3-1b8a3767901a", "embedding": null, "metadata": {"window": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "original_text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6bd0687b-16f2-49ce-a53f-ef2605d563d3", "node_type": "1", "metadata": {"window": "Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.  We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "original_text": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV. "}, "hash": "a9858cd876e514663c819edb33358e490095b347c9d83f4dafe893c6352a18b6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c7fff715-bc6e-4917-8376-087eb3fa111e", "node_type": "1", "metadata": {"window": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "original_text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. "}, "hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "class_name": "RelatedNodeInfo"}}, "hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. ", "start_char_idx": 9386, "end_char_idx": 9587, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c7fff715-bc6e-4917-8376-087eb3fa111e": {"__data__": {"id_": "c7fff715-bc6e-4917-8376-087eb3fa111e", "embedding": null, "metadata": {"window": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "original_text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4434355b-9e1e-436a-94e3-1b8a3767901a", "node_type": "1", "metadata": {"window": "We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.  This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "original_text": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention. "}, "hash": "f5ddf053af90e202b35c64bdd948d86363c913905aafdaaddba04b38166532a1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ea16bd9b-46db-45b3-ae04-5295c964714c", "node_type": "1", "metadata": {"window": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n", "original_text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. "}, "hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "class_name": "RelatedNodeInfo"}}, "hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. ", "start_char_idx": 9587, "end_char_idx": 9678, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ea16bd9b-46db-45b3-ae04-5295c964714c": {"__data__": {"id_": "ea16bd9b-46db-45b3-ae04-5295c964714c", "embedding": null, "metadata": {"window": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n", "original_text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7fff715-bc6e-4917-8376-087eb3fa111e", "node_type": "1", "metadata": {"window": "This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position ican depend only on the known outputs at positions less than i.\n 3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "original_text": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk. "}, "hash": "45b05869a94bed33945483c6fde32465c61d397e224996310512ff9a628d3e1a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52a06a94-3968-4e00-a70b-41ff88806adb", "node_type": "1", "metadata": {"window": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "original_text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n"}, "hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "class_name": "RelatedNodeInfo"}}, "hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. ", "start_char_idx": 9678, "end_char_idx": 9790, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52a06a94-3968-4e00-a70b-41ff88806adb": {"__data__": {"id_": "52a06a94-3968-4e00-a70b-41ff88806adb", "embedding": null, "metadata": {"window": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "original_text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ea16bd9b-46db-45b3-ae04-5295c964714c", "node_type": "1", "metadata": {"window": "3.2 Attention\nAn attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.  The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n", "original_text": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. "}, "hash": "099a3fa85a16097c8f77cd69e98683aa56ced272bb709984686f4b7b943bda8a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8742531e-db1d-40e1-851b-a4fba6775be1", "node_type": "1", "metadata": {"window": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "original_text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. "}, "hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "class_name": "RelatedNodeInfo"}}, "hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "start_char_idx": 9790, "end_char_idx": 9996, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8742531e-db1d-40e1-851b-a4fba6775be1": {"__data__": {"id_": "8742531e-db1d-40e1-851b-a4fba6775be1", "embedding": null, "metadata": {"window": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "original_text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52a06a94-3968-4e00-a70b-41ff88806adb", "node_type": "1", "metadata": {"window": "The output is computed as a weighted sum\nof the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n 3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "original_text": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n"}, "hash": "97df3503f98ba788d26b10da01c05115fb216ae86bf331997d12b78cce84eea0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b8c77f61-6a0d-4808-bc43-2826ba69ee4f", "node_type": "1", "metadata": {"window": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "original_text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. "}, "hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "class_name": "RelatedNodeInfo"}}, "hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. ", "start_char_idx": 9996, "end_char_idx": 10159, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b8c77f61-6a0d-4808-bc43-2826ba69ee4f": {"__data__": {"id_": "b8c77f61-6a0d-4808-bc43-2826ba69ee4f", "embedding": null, "metadata": {"window": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "original_text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8742531e-db1d-40e1-851b-a4fba6775be1", "node_type": "1", "metadata": {"window": "3.2.1 Scaled Dot-Product Attention\nWe call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).  The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "original_text": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3]. "}, "hash": "86838066f565e04bf5ff487d80bec225b18e05f9b7e484bc98bddfc3ba9c7210", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fb804dc8-bd6d-4879-9ae4-f2799c2920c2", "node_type": "1", "metadata": {"window": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads. ", "original_text": "To counteract this effect, we scale the dot products by1\u221adk.\n"}, "hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "class_name": "RelatedNodeInfo"}}, "hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. ", "start_char_idx": 10159, "end_char_idx": 10324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb804dc8-bd6d-4879-9ae4-f2799c2920c2": {"__data__": {"id_": "fb804dc8-bd6d-4879-9ae4-f2799c2920c2", "embedding": null, "metadata": {"window": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads. ", "original_text": "To counteract this effect, we scale the dot products by1\u221adk.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b8c77f61-6a0d-4808-bc43-2826ba69ee4f", "node_type": "1", "metadata": {"window": "The input consists of\nqueries and keys of dimension dk, and values of dimension dv.  We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "original_text": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4. "}, "hash": "04ababdf8b8ea5875e8c719ab35c30690de5d30ac773ef34761847eeb09fea43", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "504a27a0-0be0-4ec0-8962-264ac87a6e20", "node_type": "1", "metadata": {"window": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 . ", "original_text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. "}, "hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "class_name": "RelatedNodeInfo"}}, "hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "text": "To counteract this effect, we scale the dot products by1\u221adk.\n", "start_char_idx": 10324, "end_char_idx": 10385, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "504a27a0-0be0-4ec0-8962-264ac87a6e20": {"__data__": {"id_": "504a27a0-0be0-4ec0-8962-264ac87a6e20", "embedding": null, "metadata": {"window": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 . ", "original_text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb804dc8-bd6d-4879-9ae4-f2799c2920c2", "node_type": "1", "metadata": {"window": "We compute the dot products of the\n3\n\nScaled Dot-Product Attention\n Multi-Head Attention\nFigure 2: (left) Scaled Dot-Product Attention.  (right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads. ", "original_text": "To counteract this effect, we scale the dot products by1\u221adk.\n"}, "hash": "a23759e63caf4fda1578a73a5b7b01ce7c4e46e076eb8b1d6a85ab5786ad2e39", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "62ca82d7-d56f-4f05-883e-c9f21fd2baa1", "node_type": "1", "metadata": {"window": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "original_text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. "}, "hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "class_name": "RelatedNodeInfo"}}, "hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. ", "start_char_idx": 10385, "end_char_idx": 10672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "62ca82d7-d56f-4f05-883e-c9f21fd2baa1": {"__data__": {"id_": "62ca82d7-d56f-4f05-883e-c9f21fd2baa1", "embedding": null, "metadata": {"window": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "original_text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "504a27a0-0be0-4ec0-8962-264ac87a6e20", "node_type": "1", "metadata": {"window": "(right) Multi-Head Attention consists of several\nattention layers running in parallel.\n query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 . ", "original_text": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively. "}, "hash": "1b6e02b7308ef38775660edb184245f0ca3ce33a8c21d43787f77ff4b63e5d48", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ea62d73-1a8f-42fd-ae14-194b11247ecd", "node_type": "1", "metadata": {"window": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "original_text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n"}, "hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "class_name": "RelatedNodeInfo"}}, "hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. ", "start_char_idx": 10672, "end_char_idx": 10827, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ea62d73-1a8f-42fd-ae14-194b11247ecd": {"__data__": {"id_": "9ea62d73-1a8f-42fd-ae14-194b11247ecd", "embedding": null, "metadata": {"window": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "original_text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "62ca82d7-d56f-4f05-883e-c9f21fd2baa1", "node_type": "1", "metadata": {"window": "query with all keys, divide each by\u221adk, and apply a softmax function to obtain the weights on the\nvalues.\n In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "original_text": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values. "}, "hash": "0aac2bd8cbfc1c3e25319aa8cb8a93b6979b9e501a5820b2e273b9c36f663f54", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2875b50f-885e-4b27-9b06-1de3786ab628", "node_type": "1", "metadata": {"window": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "original_text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. "}, "hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "class_name": "RelatedNodeInfo"}}, "hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n", "start_char_idx": 10827, "end_char_idx": 10931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2875b50f-885e-4b27-9b06-1de3786ab628": {"__data__": {"id_": "2875b50f-885e-4b27-9b06-1de3786ab628", "embedding": null, "metadata": {"window": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "original_text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9ea62d73-1a8f-42fd-ae14-194b11247ecd", "node_type": "1", "metadata": {"window": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices KandV.  We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "original_text": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n"}, "hash": "43db0bf94c999ca26f2aa8a8b76625816c0d77fc53b31c4a709a2cbfb5fe86c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "737ae3be-d1bb-4d1e-9cc1-bfd245c2c708", "node_type": "1", "metadata": {"window": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "original_text": "With a single attention head, averaging inhibits this.\n"}, "hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "class_name": "RelatedNodeInfo"}}, "hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. ", "start_char_idx": 10931, "end_char_idx": 11066, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "737ae3be-d1bb-4d1e-9cc1-bfd245c2c708": {"__data__": {"id_": "737ae3be-d1bb-4d1e-9cc1-bfd245c2c708", "embedding": null, "metadata": {"window": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "original_text": "With a single attention head, averaging inhibits this.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2875b50f-885e-4b27-9b06-1de3786ab628", "node_type": "1", "metadata": {"window": "We compute\nthe matrix of outputs as:\nAttention(Q,K,V ) = softmax(QKT\n\u221adk)V (1)\nThe two most commonly used attention functions are additive attention [ 2], and dot-product (multi-\nplicative) attention.  Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "original_text": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. "}, "hash": "314f2c1bd3df54de268479ad571d4b1c6eb0d6e1b0dd2af8b4d86d3aed1745ff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5349de03-65c4-4922-91a5-568c415f2b97", "node_type": "1", "metadata": {"window": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers. ", "original_text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. "}, "hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "class_name": "RelatedNodeInfo"}}, "hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "text": "With a single attention head, averaging inhibits this.\n", "start_char_idx": 11066, "end_char_idx": 11121, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5349de03-65c4-4922-91a5-568c415f2b97": {"__data__": {"id_": "5349de03-65c4-4922-91a5-568c415f2b97", "embedding": null, "metadata": {"window": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers. ", "original_text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "737ae3be-d1bb-4d1e-9cc1-bfd245c2c708", "node_type": "1", "metadata": {"window": "Dot-product attention is identical to our algorithm, except for the scaling factor\nof1\u221adk.  Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "original_text": "With a single attention head, averaging inhibits this.\n"}, "hash": "621fdae8a323071f3f911c0f80c5acd897bf52eafbb81b6188b6287c11d8ab9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af9553c3-10a3-432c-8b86-cb91c591a94e", "node_type": "1", "metadata": {"window": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "original_text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n"}, "hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "class_name": "RelatedNodeInfo"}}, "hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. ", "start_char_idx": 11121, "end_char_idx": 11263, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af9553c3-10a3-432c-8b86-cb91c591a94e": {"__data__": {"id_": "af9553c3-10a3-432c-8b86-cb91c591a94e", "embedding": null, "metadata": {"window": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "original_text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5349de03-65c4-4922-91a5-568c415f2b97", "node_type": "1", "metadata": {"window": "Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.  While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers. ", "original_text": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1. "}, "hash": "6c25df150d13452e17517e0fbe2e79677b318d5f358003f6e5b63e2c37cfd647", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "106268ac-158f-43fc-ac86-2ae6dbbf16f1", "node_type": "1", "metadata": {"window": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "original_text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n"}, "hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "class_name": "RelatedNodeInfo"}}, "hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n", "start_char_idx": 11263, "end_char_idx": 11331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "106268ac-158f-43fc-ac86-2ae6dbbf16f1": {"__data__": {"id_": "106268ac-158f-43fc-ac86-2ae6dbbf16f1", "embedding": null, "metadata": {"window": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "original_text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af9553c3-10a3-432c-8b86-cb91c591a94e", "node_type": "1", "metadata": {"window": "While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-ef\ufb01cient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "original_text": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n"}, "hash": "641ffdd2c5d1bdce819e0b86dc849e77fcf1548d951869c4196e728273e305f7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1319640b-bac2-4a1c-a988-b306f5d8f6f2", "node_type": "1", "metadata": {"window": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "original_text": "In this work we employ h= 8 parallel attention layers, or heads. "}, "hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "class_name": "RelatedNodeInfo"}}, "hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n", "start_char_idx": 11331, "end_char_idx": 11539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1319640b-bac2-4a1c-a988-b306f5d8f6f2": {"__data__": {"id_": "1319640b-bac2-4a1c-a988-b306f5d8f6f2", "embedding": null, "metadata": {"window": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "original_text": "In this work we employ h= 8 parallel attention layers, or heads. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "106268ac-158f-43fc-ac86-2ae6dbbf16f1", "node_type": "1", "metadata": {"window": "While for small values of dkthe two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of dk[3].  We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "original_text": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n"}, "hash": "a561be5eadd54075e30de7b58437831a2c65c02a9f70a6466a576e5b06acc8f6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2365a2cc-8b96-4b02-8cd0-17664b3ac46c", "node_type": "1", "metadata": {"window": "To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "original_text": "For each of these we use\ndk=dv=dmodel/h= 64 . "}, "hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "class_name": "RelatedNodeInfo"}}, "hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "text": "In this work we employ h= 8 parallel attention layers, or heads. ", "start_char_idx": 11539, "end_char_idx": 11604, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2365a2cc-8b96-4b02-8cd0-17664b3ac46c": {"__data__": {"id_": "2365a2cc-8b96-4b02-8cd0-17664b3ac46c", "embedding": null, "metadata": {"window": "To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "original_text": "For each of these we use\ndk=dv=dmodel/h= 64 . "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1319640b-bac2-4a1c-a988-b306f5d8f6f2", "node_type": "1", "metadata": {"window": "We suspect that for large values of\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients4.  To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "original_text": "In this work we employ h= 8 parallel attention layers, or heads. "}, "hash": "ee93ae773133e1af4a42a50284fc01cddd3e16b764b75e44d20da509ca6dd174", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b10b4ffc-66aa-4f68-ae02-84f702259fe2", "node_type": "1", "metadata": {"window": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "original_text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n"}, "hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "class_name": "RelatedNodeInfo"}}, "hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "text": "For each of these we use\ndk=dv=dmodel/h= 64 . ", "start_char_idx": 11604, "end_char_idx": 11650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b10b4ffc-66aa-4f68-ae02-84f702259fe2": {"__data__": {"id_": "b10b4ffc-66aa-4f68-ae02-84f702259fe2", "embedding": null, "metadata": {"window": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "original_text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2365a2cc-8b96-4b02-8cd0-17664b3ac46c", "node_type": "1", "metadata": {"window": "To counteract this effect, we scale the dot products by1\u221adk.\n 3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "original_text": "For each of these we use\ndk=dv=dmodel/h= 64 . "}, "hash": "f25e407c11f19b260b79f5599f5de5ac4a45d41eb0a86d6833393986926d1ff8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c8cd392-2298-42f6-9022-7a96b39d707c", "node_type": "1", "metadata": {"window": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n", "original_text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. "}, "hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "class_name": "RelatedNodeInfo"}}, "hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "start_char_idx": 11650, "end_char_idx": 11792, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c8cd392-2298-42f6-9022-7a96b39d707c": {"__data__": {"id_": "6c8cd392-2298-42f6-9022-7a96b39d707c", "embedding": null, "metadata": {"window": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n", "original_text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b10b4ffc-66aa-4f68-ae02-84f702259fe2", "node_type": "1", "metadata": {"window": "3.2.2 Multi-Head Attention\nInstead of performing a single attention function with dmodel-dimensional keys, values and queries,\nwe found it bene\ufb01cial to linearly project the queries, keys and values htimes with different, learned\nlinear projections to dk,dkanddvdimensions, respectively.  On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "original_text": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n"}, "hash": "6dfca4536d96c04fce41997871b1ed60620f14e9dd268b82596147b483f9114e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63f5213b-eb9a-4ee6-9915-37ed7cbadc14", "node_type": "1", "metadata": {"window": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "original_text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. "}, "hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "class_name": "RelatedNodeInfo"}}, "hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. ", "start_char_idx": 11792, "end_char_idx": 12062, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63f5213b-eb9a-4ee6-9915-37ed7cbadc14": {"__data__": {"id_": "63f5213b-eb9a-4ee6-9915-37ed7cbadc14", "embedding": null, "metadata": {"window": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "original_text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c8cd392-2298-42f6-9022-7a96b39d707c", "node_type": "1", "metadata": {"window": "On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding dv-dimensional\noutput values.  These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n", "original_text": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. "}, "hash": "529e939f47a2225b78cd6312b38c8e10795a8c760f60910b9fa662fb484dfa65", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e187906c-cb19-48a7-a306-2882fbb12fbc", "node_type": "1", "metadata": {"window": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n", "original_text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n"}, "hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "class_name": "RelatedNodeInfo"}}, "hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. ", "start_char_idx": 12062, "end_char_idx": 12156, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e187906c-cb19-48a7-a306-2882fbb12fbc": {"__data__": {"id_": "e187906c-cb19-48a7-a306-2882fbb12fbc", "embedding": null, "metadata": {"window": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n", "original_text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63f5213b-eb9a-4ee6-9915-37ed7cbadc14", "node_type": "1", "metadata": {"window": "These are concatenated and once again projected, resulting in the \ufb01nal values, as\ndepicted in Figure 2.\n Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "original_text": "This allows every\nposition in the decoder to attend over all positions in the input sequence. "}, "hash": "a6307b63aa5d78f2c855b667791d963943a6afd487b9e052d65f4dac9a8a04b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "80e67723-1fc9-49aa-ad5a-4ca102337034", "node_type": "1", "metadata": {"window": "With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "original_text": "\u2022The encoder contains self-attention layers. "}, "hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "class_name": "RelatedNodeInfo"}}, "hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n", "start_char_idx": 12156, "end_char_idx": 12268, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "80e67723-1fc9-49aa-ad5a-4ca102337034": {"__data__": {"id_": "80e67723-1fc9-49aa-ad5a-4ca102337034", "embedding": null, "metadata": {"window": "With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "original_text": "\u2022The encoder contains self-attention layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e187906c-cb19-48a7-a306-2882fbb12fbc", "node_type": "1", "metadata": {"window": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.  With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n", "original_text": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n"}, "hash": "6dff70bc37aa297c1a180f5c5534b37b422946a7e8b8e6dbf9956d06e8869aa2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd39f755-4c0d-4882-ab55-c08256aaa6e3", "node_type": "1", "metadata": {"window": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n", "original_text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. "}, "hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "class_name": "RelatedNodeInfo"}}, "hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "text": "\u2022The encoder contains self-attention layers. ", "start_char_idx": 12268, "end_char_idx": 12313, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd39f755-4c0d-4882-ab55-c08256aaa6e3": {"__data__": {"id_": "fd39f755-4c0d-4882-ab55-c08256aaa6e3", "embedding": null, "metadata": {"window": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n", "original_text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "80e67723-1fc9-49aa-ad5a-4ca102337034", "node_type": "1", "metadata": {"window": "With a single attention head, averaging inhibits this.\n 4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "original_text": "\u2022The encoder contains self-attention layers. "}, "hash": "f5c7ce22b8070e7f97c58bacf7fe585a02d44509c60adff2edd0acec133682e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f7ed974-5e50-48a1-ae6a-ac1094314397", "node_type": "1", "metadata": {"window": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "original_text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n"}, "hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "class_name": "RelatedNodeInfo"}}, "hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. ", "start_char_idx": 12313, "end_char_idx": 12464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f7ed974-5e50-48a1-ae6a-ac1094314397": {"__data__": {"id_": "6f7ed974-5e50-48a1-ae6a-ac1094314397", "embedding": null, "metadata": {"window": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "original_text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fd39f755-4c0d-4882-ab55-c08256aaa6e3", "node_type": "1", "metadata": {"window": "4To illustrate why the dot products get large, assume that the components of qandkare independent random\nvariables with mean 0and variance 1.  Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n", "original_text": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. "}, "hash": "ead93d3163d8f6bd3772ab637fd4a50a885b43719e9118b5c6fded5c07a984d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ca3e729d-8c02-400a-9f31-c9a614fa07ba", "node_type": "1", "metadata": {"window": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "original_text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. "}, "hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "class_name": "RelatedNodeInfo"}}, "hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n", "start_char_idx": 12464, "end_char_idx": 12559, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ca3e729d-8c02-400a-9f31-c9a614fa07ba": {"__data__": {"id_": "ca3e729d-8c02-400a-9f31-c9a614fa07ba", "embedding": null, "metadata": {"window": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "original_text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f7ed974-5e50-48a1-ae6a-ac1094314397", "node_type": "1", "metadata": {"window": "Then their dot product, q\u00b7k=\u2211dk\ni=1qiki, has mean 0and variance dk.\n 4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "original_text": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n"}, "hash": "ea937bca28dac1990c002c572cc89d269cea1366e7e16a95b0889aaff1ef5bd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ab9328c-5c9e-490f-b39c-8dd63f1530f6", "node_type": "1", "metadata": {"window": "In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "original_text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. "}, "hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "class_name": "RelatedNodeInfo"}}, "hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. ", "start_char_idx": 12559, "end_char_idx": 12720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ab9328c-5c9e-490f-b39c-8dd63f1530f6": {"__data__": {"id_": "0ab9328c-5c9e-490f-b39c-8dd63f1530f6", "embedding": null, "metadata": {"window": "In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "original_text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ca3e729d-8c02-400a-9f31-c9a614fa07ba", "node_type": "1", "metadata": {"window": "4\n\nMultiHead( Q,K,V ) = Concat(head 1,...,head h)WO\nwhere head i= Attention( QWQ\ni,KWK\ni,VWV\ni)\nWhere the projections are parameter matrices WQ\ni\u2208Rdmodel\u00d7dk,WK\ni\u2208Rdmodel\u00d7dk,WV\ni\u2208Rdmodel\u00d7dv\nandWO\u2208Rhdv\u00d7dmodel.\n In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "original_text": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. "}, "hash": "72d85aa366d99797ccfcfc31018117f096524d0f5730ce8bacb3965675d8fa10", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e6ad8570-24bf-4fe5-abf6-1537aa20a3af", "node_type": "1", "metadata": {"window": "For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "original_text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. "}, "hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "class_name": "RelatedNodeInfo"}}, "hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. ", "start_char_idx": 12720, "end_char_idx": 12821, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e6ad8570-24bf-4fe5-abf6-1537aa20a3af": {"__data__": {"id_": "e6ad8570-24bf-4fe5-abf6-1537aa20a3af", "embedding": null, "metadata": {"window": "For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "original_text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ab9328c-5c9e-490f-b39c-8dd63f1530f6", "node_type": "1", "metadata": {"window": "In this work we employ h= 8 parallel attention layers, or heads.  For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "original_text": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property. "}, "hash": "5b2cd8de2a0460e751450536af9f3597fa6f3e93cbfd390ecf1ede036a060df7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8a7a8b1-0d29-4e41-9870-22e277c8f31c", "node_type": "1", "metadata": {"window": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n", "original_text": "See Figure 2.\n"}, "hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "class_name": "RelatedNodeInfo"}}, "hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. ", "start_char_idx": 12821, "end_char_idx": 12989, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8a7a8b1-0d29-4e41-9870-22e277c8f31c": {"__data__": {"id_": "e8a7a8b1-0d29-4e41-9870-22e277c8f31c", "embedding": null, "metadata": {"window": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n", "original_text": "See Figure 2.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e6ad8570-24bf-4fe5-abf6-1537aa20a3af", "node_type": "1", "metadata": {"window": "For each of these we use\ndk=dv=dmodel/h= 64 .  Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "original_text": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections. "}, "hash": "a5472486c3b89529656ad2e257f9066ac5b7e3cac2b60f48d91f90808ab0090b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02e2ea6c-5c2a-435a-858f-7a8adcd6cd91", "node_type": "1", "metadata": {"window": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "original_text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. "}, "hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "class_name": "RelatedNodeInfo"}}, "hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "text": "See Figure 2.\n", "start_char_idx": 12989, "end_char_idx": 13003, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02e2ea6c-5c2a-435a-858f-7a8adcd6cd91": {"__data__": {"id_": "02e2ea6c-5c2a-435a-858f-7a8adcd6cd91", "embedding": null, "metadata": {"window": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "original_text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8a7a8b1-0d29-4e41-9870-22e277c8f31c", "node_type": "1", "metadata": {"window": "Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n 3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n", "original_text": "See Figure 2.\n"}, "hash": "91026c79ac63b05de93c9eb7c9efb8ec1c8599351121a4c81b23e5ba66b04b98", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9dc40ba8-96ca-461a-9202-43148577868b", "node_type": "1", "metadata": {"window": "This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "original_text": "This\nconsists of two linear transformations with a ReLU activation in between.\n"}, "hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "class_name": "RelatedNodeInfo"}}, "hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. ", "start_char_idx": 13003, "end_char_idx": 13237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9dc40ba8-96ca-461a-9202-43148577868b": {"__data__": {"id_": "9dc40ba8-96ca-461a-9202-43148577868b", "embedding": null, "metadata": {"window": "This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "original_text": "This\nconsists of two linear transformations with a ReLU activation in between.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02e2ea6c-5c2a-435a-858f-7a8adcd6cd91", "node_type": "1", "metadata": {"window": "3.2.3 Applications of Attention in our Model\nThe Transformer uses multi-head attention in three different ways:\n\u2022In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.  This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "original_text": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. "}, "hash": "b8de8ff80418ad0c534b974afceef5523d5798c8e2fe2e3cf613047fff919868", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ee1d72e0-af42-431c-bd62-7b13e798ddcf", "node_type": "1", "metadata": {"window": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "original_text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. "}, "hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "class_name": "RelatedNodeInfo"}}, "hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "text": "This\nconsists of two linear transformations with a ReLU activation in between.\n", "start_char_idx": 13237, "end_char_idx": 13316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ee1d72e0-af42-431c-bd62-7b13e798ddcf": {"__data__": {"id_": "ee1d72e0-af42-431c-bd62-7b13e798ddcf", "embedding": null, "metadata": {"window": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "original_text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9dc40ba8-96ca-461a-9202-43148577868b", "node_type": "1", "metadata": {"window": "This allows every\nposition in the decoder to attend over all positions in the input sequence.  This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "original_text": "This\nconsists of two linear transformations with a ReLU activation in between.\n"}, "hash": "bf508554015bc281fad14c0af9527c6cf2724e6c67c062b928e92db1686f2d2b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c390db15-7666-483a-b188-a3fcdef52af4", "node_type": "1", "metadata": {"window": "\u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "original_text": "Another way of describing this is as two convolutions with kernel size 1.\n"}, "hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "class_name": "RelatedNodeInfo"}}, "hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. ", "start_char_idx": 13316, "end_char_idx": 13474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c390db15-7666-483a-b188-a3fcdef52af4": {"__data__": {"id_": "c390db15-7666-483a-b188-a3fcdef52af4", "embedding": null, "metadata": {"window": "\u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "original_text": "Another way of describing this is as two convolutions with kernel size 1.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ee1d72e0-af42-431c-bd62-7b13e798ddcf", "node_type": "1", "metadata": {"window": "This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[31, 2, 8].\n \u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "original_text": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. "}, "hash": "d5b6414b1648a6a82faa1d1169e892f64ee5273f15ba447fe2521cfec4f95509", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "570a174d-fdaf-464b-99e2-66f13545542c", "node_type": "1", "metadata": {"window": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "original_text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n"}, "hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "class_name": "RelatedNodeInfo"}}, "hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "text": "Another way of describing this is as two convolutions with kernel size 1.\n", "start_char_idx": 13474, "end_char_idx": 13548, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "570a174d-fdaf-464b-99e2-66f13545542c": {"__data__": {"id_": "570a174d-fdaf-464b-99e2-66f13545542c", "embedding": null, "metadata": {"window": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "original_text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c390db15-7666-483a-b188-a3fcdef52af4", "node_type": "1", "metadata": {"window": "\u2022The encoder contains self-attention layers.  In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "original_text": "Another way of describing this is as two convolutions with kernel size 1.\n"}, "hash": "af80321259dc6e25d9dd981e52ceb855c3ca78bf625961f786b5456f4af0bf73", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9784e91-ac88-45a5-8db6-72d55eee9019", "node_type": "1", "metadata": {"window": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "original_text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. "}, "hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "class_name": "RelatedNodeInfo"}}, "hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n", "start_char_idx": 13548, "end_char_idx": 13656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9784e91-ac88-45a5-8db6-72d55eee9019": {"__data__": {"id_": "a9784e91-ac88-45a5-8db6-72d55eee9019", "embedding": null, "metadata": {"window": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "original_text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "570a174d-fdaf-464b-99e2-66f13545542c", "node_type": "1", "metadata": {"window": "In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.  Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "original_text": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n"}, "hash": "13bbf6cd7ae1766c5016ccc16e4d024b84630d9fe8db0ab94e525d6c098eb41d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4791765e-b3ee-4c1e-8cee-713d5c936f79", "node_type": "1", "metadata": {"window": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "original_text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. "}, "hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "class_name": "RelatedNodeInfo"}}, "hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. ", "start_char_idx": 13656, "end_char_idx": 13836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4791765e-b3ee-4c1e-8cee-713d5c936f79": {"__data__": {"id_": "4791765e-b3ee-4c1e-8cee-713d5c936f79", "embedding": null, "metadata": {"window": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "original_text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9784e91-ac88-45a5-8db6-72d55eee9019", "node_type": "1", "metadata": {"window": "Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n \u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "original_text": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel. "}, "hash": "1424f1a239186d13ad48e5ed36e95447375c9cc67b302ce3cb01d959b3fcdedb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0099095-88eb-4e52-b63f-1e36652cf804", "node_type": "1", "metadata": {"window": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "original_text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. "}, "hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "class_name": "RelatedNodeInfo"}}, "hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. ", "start_char_idx": 13836, "end_char_idx": 13980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0099095-88eb-4e52-b63f-1e36652cf804": {"__data__": {"id_": "c0099095-88eb-4e52-b63f-1e36652cf804", "embedding": null, "metadata": {"window": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "original_text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4791765e-b3ee-4c1e-8cee-713d5c936f79", "node_type": "1", "metadata": {"window": "\u2022Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.  We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "original_text": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. "}, "hash": "16912993a59dbd1fca42ae52a281061f2f1667448609204905cdf5ec3e7a2e69", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "413a6aae-9fee-490c-8d3a-1ff7eb814902", "node_type": "1", "metadata": {"window": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "original_text": "In the embedding layers, we multiply those weights by\u221admodel.\n"}, "hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "class_name": "RelatedNodeInfo"}}, "hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. ", "start_char_idx": 13980, "end_char_idx": 14120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "413a6aae-9fee-490c-8d3a-1ff7eb814902": {"__data__": {"id_": "413a6aae-9fee-490c-8d3a-1ff7eb814902", "embedding": null, "metadata": {"window": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "original_text": "In the embedding layers, we multiply those weights by\u221admodel.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0099095-88eb-4e52-b63f-1e36652cf804", "node_type": "1", "metadata": {"window": "We need to prevent leftward\ninformation \ufb02ow in the decoder to preserve the auto-regressive property.  We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "original_text": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24]. "}, "hash": "ed027758a5affb83577f130ed6be5b94174642065e3f1b0d135981b680a25224", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c0f33c05-8e73-489f-86e8-672fa1080260", "node_type": "1", "metadata": {"window": "See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "original_text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. "}, "hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "class_name": "RelatedNodeInfo"}}, "hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "text": "In the embedding layers, we multiply those weights by\u221admodel.\n", "start_char_idx": 14120, "end_char_idx": 14182, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c0f33c05-8e73-489f-86e8-672fa1080260": {"__data__": {"id_": "c0f33c05-8e73-489f-86e8-672fa1080260", "embedding": null, "metadata": {"window": "See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "original_text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "413a6aae-9fee-490c-8d3a-1ff7eb814902", "node_type": "1", "metadata": {"window": "We implement this\ninside of scaled dot-product attention by masking out (setting to \u2212\u221e) all values in the input\nof the softmax which correspond to illegal connections.  See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "original_text": "In the embedding layers, we multiply those weights by\u221admodel.\n"}, "hash": "118c97e5059700db87539c18e7b1b83b89b5391db30f2ab4bfc978e25df02b6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53613ea1-8d93-4c3e-8768-86634fbbdfa3", "node_type": "1", "metadata": {"window": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "original_text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. "}, "hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "class_name": "RelatedNodeInfo"}}, "hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. ", "start_char_idx": 14182, "end_char_idx": 14433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53613ea1-8d93-4c3e-8768-86634fbbdfa3": {"__data__": {"id_": "53613ea1-8d93-4c3e-8768-86634fbbdfa3", "embedding": null, "metadata": {"window": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "original_text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c0f33c05-8e73-489f-86e8-672fa1080260", "node_type": "1", "metadata": {"window": "See Figure 2.\n 3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "original_text": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence. "}, "hash": "3ce092702ab9db3ecb03e3e75ab29164488a52bee2a978ae7283c215e6bb25f0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf50f521-eb58-463c-84d3-5a2715b13cfe", "node_type": "1", "metadata": {"window": "This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "original_text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n"}, "hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "class_name": "RelatedNodeInfo"}}, "hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. ", "start_char_idx": 14433, "end_char_idx": 14633, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf50f521-eb58-463c-84d3-5a2715b13cfe": {"__data__": {"id_": "bf50f521-eb58-463c-84d3-5a2715b13cfe", "embedding": null, "metadata": {"window": "This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "original_text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53613ea1-8d93-4c3e-8768-86634fbbdfa3", "node_type": "1", "metadata": {"window": "3.3 Position-wise Feed-Forward Networks\nIn addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.  This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "original_text": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types. "}, "hash": "125907d921945e6f6f47d248188879390b3dca3fd2bbe495f0905e58d259c1d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3615680b-d044-4a09-bfc5-cdcd0c727e4e", "node_type": "1", "metadata": {"window": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "original_text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. "}, "hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "class_name": "RelatedNodeInfo"}}, "hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n", "start_char_idx": 14633, "end_char_idx": 14792, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3615680b-d044-4a09-bfc5-cdcd0c727e4e": {"__data__": {"id_": "3615680b-d044-4a09-bfc5-cdcd0c727e4e", "embedding": null, "metadata": {"window": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "original_text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf50f521-eb58-463c-84d3-5a2715b13cfe", "node_type": "1", "metadata": {"window": "This\nconsists of two linear transformations with a ReLU activation in between.\n FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "original_text": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n"}, "hash": "df9c777eb3890f08298b796e81fa3dbcd878d3573c90d3aed6cadb61ab7c9178", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15fe6a3a-1602-4d8a-84b0-01f6eb131640", "node_type": "1", "metadata": {"window": "Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n", "original_text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. "}, "hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "class_name": "RelatedNodeInfo"}}, "hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. ", "start_char_idx": 14792, "end_char_idx": 15057, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15fe6a3a-1602-4d8a-84b0-01f6eb131640": {"__data__": {"id_": "15fe6a3a-1602-4d8a-84b0-01f6eb131640", "embedding": null, "metadata": {"window": "Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n", "original_text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3615680b-d044-4a09-bfc5-cdcd0c727e4e", "node_type": "1", "metadata": {"window": "FFN(x) = max(0,xW 1+b1)W2+b2 (2)\nWhile the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.  Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "original_text": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks. "}, "hash": "19f6e36038827be427e9433e4ecb473a7aaacbfc1604edcf7650743fea5d2c40", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92131648-8e47-43b5-84a4-1db4f3af581a", "node_type": "1", "metadata": {"window": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer. ", "original_text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n"}, "hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "class_name": "RelatedNodeInfo"}}, "hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. ", "start_char_idx": 15057, "end_char_idx": 15163, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92131648-8e47-43b5-84a4-1db4f3af581a": {"__data__": {"id_": "92131648-8e47-43b5-84a4-1db4f3af581a", "embedding": null, "metadata": {"window": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer. ", "original_text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15fe6a3a-1602-4d8a-84b0-01f6eb131640", "node_type": "1", "metadata": {"window": "Another way of describing this is as two convolutions with kernel size 1.\n The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n", "original_text": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed. "}, "hash": "2de58f52b61d5f64b6c19de886722b40cb3fc255f2b543f5be024a46e032986c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f2c9c60-b596-4565-aa32-ca7a071b920d", "node_type": "1", "metadata": {"window": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "original_text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. "}, "hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "class_name": "RelatedNodeInfo"}}, "hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n", "start_char_idx": 15163, "end_char_idx": 15233, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f2c9c60-b596-4565-aa32-ca7a071b920d": {"__data__": {"id_": "3f2c9c60-b596-4565-aa32-ca7a071b920d", "embedding": null, "metadata": {"window": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "original_text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92131648-8e47-43b5-84a4-1db4f3af581a", "node_type": "1", "metadata": {"window": "The dimensionality of input and output is dmodel = 512 , and the inner-layer has dimensionality\ndff= 2048 .\n 3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer. ", "original_text": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n"}, "hash": "42fb0e34ab74f023fd8277e8fd0a5e31fe09b9c5b7e936988904905595c6e84f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d6ee8c9b-3933-4f90-aa8e-9bc71403ed09", "node_type": "1", "metadata": {"window": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network. ", "original_text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. "}, "hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "class_name": "RelatedNodeInfo"}}, "hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. ", "start_char_idx": 15233, "end_char_idx": 15427, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d6ee8c9b-3933-4f90-aa8e-9bc71403ed09": {"__data__": {"id_": "d6ee8c9b-3933-4f90-aa8e-9bc71403ed09", "embedding": null, "metadata": {"window": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network. ", "original_text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f2c9c60-b596-4565-aa32-ca7a071b920d", "node_type": "1", "metadata": {"window": "3.4 Embeddings and Softmax\nSimilarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodel.  We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "original_text": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension. "}, "hash": "ec51b46a9f021c88b26f147649965d3a4ee4d8c0323a2bf456a5593f66cc31e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "86aa99af-33d2-4179-8ef6-cb581086d8d5", "node_type": "1", "metadata": {"window": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "original_text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. "}, "hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "class_name": "RelatedNodeInfo"}}, "hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. ", "start_char_idx": 15427, "end_char_idx": 15505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "86aa99af-33d2-4179-8ef6-cb581086d8d5": {"__data__": {"id_": "86aa99af-33d2-4179-8ef6-cb581086d8d5", "embedding": null, "metadata": {"window": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "original_text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d6ee8c9b-3933-4f90-aa8e-9bc71403ed09", "node_type": "1", "metadata": {"window": "We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.  In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network. ", "original_text": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid. "}, "hash": "4031fef572e558d7f3f5093562138408f9a4d86818331503ba5ffb2569c887eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d66d418-b7d8-4a10-bac3-4054605b1a69", "node_type": "1", "metadata": {"window": "In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "original_text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n"}, "hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "class_name": "RelatedNodeInfo"}}, "hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. ", "start_char_idx": 15505, "end_char_idx": 15569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d66d418-b7d8-4a10-bac3-4054605b1a69": {"__data__": {"id_": "1d66d418-b7d8-4a10-bac3-4054605b1a69", "embedding": null, "metadata": {"window": "In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "original_text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "86aa99af-33d2-4179-8ef6-cb581086d8d5", "node_type": "1", "metadata": {"window": "In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [ 24].  In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "original_text": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0. "}, "hash": "a13a26be652b635354801e3c2d1aac493162ffd26408fb4b03943e143bbdfce4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dafd35ad-9edc-467b-8ffd-be534843a6c9", "node_type": "1", "metadata": {"window": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "original_text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). "}, "hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "class_name": "RelatedNodeInfo"}}, "hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n", "start_char_idx": 15569, "end_char_idx": 15775, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dafd35ad-9edc-467b-8ffd-be534843a6c9": {"__data__": {"id_": "dafd35ad-9edc-467b-8ffd-be534843a6c9", "embedding": null, "metadata": {"window": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "original_text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d66d418-b7d8-4a10-bac3-4054605b1a69", "node_type": "1", "metadata": {"window": "In the embedding layers, we multiply those weights by\u221admodel.\n 3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "original_text": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n"}, "hash": "870f5e7a4d028d6363e433d9f35060c229411c0627b5ad0f8df7b9348c821e3c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebd6199c-71e8-4fd8-a43a-b92e4bfd915d", "node_type": "1", "metadata": {"window": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "original_text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n"}, "hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "class_name": "RelatedNodeInfo"}}, "hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). ", "start_char_idx": 15775, "end_char_idx": 15940, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebd6199c-71e8-4fd8-a43a-b92e4bfd915d": {"__data__": {"id_": "ebd6199c-71e8-4fd8-a43a-b92e4bfd915d", "embedding": null, "metadata": {"window": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "original_text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dafd35ad-9edc-467b-8ffd-be534843a6c9", "node_type": "1", "metadata": {"window": "3.5 Positional Encoding\nSince our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\ntokens in the sequence.  To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "original_text": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). "}, "hash": "4ea6614199148226896e0ac9a3f20953114c737f02542557ad3002e6a9f69b00", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f67df46-269c-49a5-affe-fc8078790a17", "node_type": "1", "metadata": {"window": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "original_text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. "}, "hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "class_name": "RelatedNodeInfo"}}, "hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "start_char_idx": 15940, "end_char_idx": 16088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f67df46-269c-49a5-affe-fc8078790a17": {"__data__": {"id_": "1f67df46-269c-49a5-affe-fc8078790a17", "embedding": null, "metadata": {"window": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "original_text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebd6199c-71e8-4fd8-a43a-b92e4bfd915d", "node_type": "1", "metadata": {"window": "To this end, we add \"positional encodings\" to the input embeddings at the\n5\n\nTable 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations\nfor different layer types.  nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "original_text": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n"}, "hash": "dde48346f99c6446079c55dd57686aa439dd3ff370d3e30eef1dd26216956b88", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f1898a6-9203-4848-a8eb-28f6e2e9b3ec", "node_type": "1", "metadata": {"window": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "original_text": "Motivating our use of self-attention we\nconsider three desiderata.\n"}, "hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "class_name": "RelatedNodeInfo"}}, "hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. ", "start_char_idx": 16088, "end_char_idx": 16456, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f1898a6-9203-4848-a8eb-28f6e2e9b3ec": {"__data__": {"id_": "3f1898a6-9203-4848-a8eb-28f6e2e9b3ec", "embedding": null, "metadata": {"window": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "original_text": "Motivating our use of self-attention we\nconsider three desiderata.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f67df46-269c-49a5-affe-fc8078790a17", "node_type": "1", "metadata": {"window": "nis the sequence length, dis the representation dimension, kis the kernel\nsize of convolutions and rthe size of the neighborhood in restricted self-attention.\n Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "original_text": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. "}, "hash": "0a10d5ace9f2faf197bb93350244386719cba34ef8937126b32ca3b8996abf55", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c1b5137f-76ee-45b8-8ea1-cf728fd310a7", "node_type": "1", "metadata": {"window": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "original_text": "One is the total computational complexity per layer. "}, "hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "class_name": "RelatedNodeInfo"}}, "hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "text": "Motivating our use of self-attention we\nconsider three desiderata.\n", "start_char_idx": 16456, "end_char_idx": 16523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c1b5137f-76ee-45b8-8ea1-cf728fd310a7": {"__data__": {"id_": "c1b5137f-76ee-45b8-8ea1-cf728fd310a7", "embedding": null, "metadata": {"window": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "original_text": "One is the total computational complexity per layer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f1898a6-9203-4848-a8eb-28f6e2e9b3ec", "node_type": "1", "metadata": {"window": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\nSelf-Attention O(n2\u00b7d) O(1) O(1)\nRecurrent O(n\u00b7d2) O(n) O(n)\nConvolutional O(k\u00b7n\u00b7d2)O(1) O(logk(n))\nSelf-Attention (restricted) O(r\u00b7n\u00b7d)O(1) O(n/r)\nbottoms of the encoder and decoder stacks.  The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "original_text": "Motivating our use of self-attention we\nconsider three desiderata.\n"}, "hash": "164e4fe2b0a42a9b088175261c9199f619109357afd463ac41c6444c8d179e34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "882828a4-f7ec-4698-a90a-4674c7dee4c4", "node_type": "1", "metadata": {"window": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r). ", "original_text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n"}, "hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "class_name": "RelatedNodeInfo"}}, "hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "text": "One is the total computational complexity per layer. ", "start_char_idx": 16523, "end_char_idx": 16576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "882828a4-f7ec-4698-a90a-4674c7dee4c4": {"__data__": {"id_": "882828a4-f7ec-4698-a90a-4674c7dee4c4", "embedding": null, "metadata": {"window": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r). ", "original_text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c1b5137f-76ee-45b8-8ea1-cf728fd310a7", "node_type": "1", "metadata": {"window": "The positional encodings have the same dimension dmodel\nas the embeddings, so that the two can be summed.  There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "original_text": "One is the total computational complexity per layer. "}, "hash": "529205e3a6d8b748eba53794c5d10346f0dc59338979ad554e1a9f3eefb693ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "580da277-88d0-4101-afdf-11b4dcf73ffd", "node_type": "1", "metadata": {"window": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n", "original_text": "The third is the path length between long-range dependencies in the network. "}, "hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "class_name": "RelatedNodeInfo"}}, "hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "start_char_idx": 16576, "end_char_idx": 16708, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "580da277-88d0-4101-afdf-11b4dcf73ffd": {"__data__": {"id_": "580da277-88d0-4101-afdf-11b4dcf73ffd", "embedding": null, "metadata": {"window": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n", "original_text": "The third is the path length between long-range dependencies in the network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "882828a4-f7ec-4698-a90a-4674c7dee4c4", "node_type": "1", "metadata": {"window": "There are many choices of positional encodings,\nlearned and \ufb01xed [8].\n In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r). ", "original_text": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n"}, "hash": "be7f8e7a02273b2969cbc14301ac13839044472d6b5052d1e8619827cf1c6a82", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "263d30f5-78c7-4d86-bad6-4dcb231901f1", "node_type": "1", "metadata": {"window": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "original_text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. "}, "hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "class_name": "RelatedNodeInfo"}}, "hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "text": "The third is the path length between long-range dependencies in the network. ", "start_char_idx": 16708, "end_char_idx": 16785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "263d30f5-78c7-4d86-bad6-4dcb231901f1": {"__data__": {"id_": "263d30f5-78c7-4d86-bad6-4dcb231901f1", "embedding": null, "metadata": {"window": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "original_text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "580da277-88d0-4101-afdf-11b4dcf73ffd", "node_type": "1", "metadata": {"window": "In this work, we use sine and cosine functions of different frequencies:\nPE(pos,2i)=sin(pos/100002i/d model)\nPE(pos,2i+1)=cos(pos/100002i/d model)\nwhereposis the position and iis the dimension.  That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n", "original_text": "The third is the path length between long-range dependencies in the network. "}, "hash": "7bc8671412dabdeb98e1c02b075b7bdcec0c6cb74d02fc0a4dcef01b696ef96e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a07ed97-06fc-42bd-8a04-3d688f556883", "node_type": "1", "metadata": {"window": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "original_text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. "}, "hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "class_name": "RelatedNodeInfo"}}, "hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. ", "start_char_idx": 16785, "end_char_idx": 16874, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a07ed97-06fc-42bd-8a04-3d688f556883": {"__data__": {"id_": "4a07ed97-06fc-42bd-8a04-3d688f556883", "embedding": null, "metadata": {"window": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "original_text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "263d30f5-78c7-4d86-bad6-4dcb231901f1", "node_type": "1", "metadata": {"window": "That is, each dimension of the positional encoding\ncorresponds to a sinusoid.  The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "original_text": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. "}, "hash": "af7b46660d2bcc00fc6441bc6199cc3721739d1bfde1e242236202130e8aa71f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ff609b26-d1a9-4ad2-8ef5-4c8f4176f8a3", "node_type": "1", "metadata": {"window": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "original_text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. "}, "hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "class_name": "RelatedNodeInfo"}}, "hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. ", "start_char_idx": 16874, "end_char_idx": 17027, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ff609b26-d1a9-4ad2-8ef5-4c8f4176f8a3": {"__data__": {"id_": "ff609b26-d1a9-4ad2-8ef5-4c8f4176f8a3", "embedding": null, "metadata": {"window": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "original_text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a07ed97-06fc-42bd-8a04-3d688f556883", "node_type": "1", "metadata": {"window": "The wavelengths form a geometric progression from 2\u03c0to10000\u00b72\u03c0.  We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "original_text": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. "}, "hash": "734d985a1bd1ea3429e6dbcfb0a65b6d0bf68ee4742af093b17b6a2ec28748e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "53010cad-9311-417c-aa39-d0e805341ecb", "node_type": "1", "metadata": {"window": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "original_text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n"}, "hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "class_name": "RelatedNodeInfo"}}, "hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. ", "start_char_idx": 17027, "end_char_idx": 17180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "53010cad-9311-417c-aa39-d0e805341ecb": {"__data__": {"id_": "53010cad-9311-417c-aa39-d0e805341ecb", "embedding": null, "metadata": {"window": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "original_text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ff609b26-d1a9-4ad2-8ef5-4c8f4176f8a3", "node_type": "1", "metadata": {"window": "We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any \ufb01xed offset k,PEpos+kcan be represented as a linear function of\nPEpos.\n We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "original_text": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11]. "}, "hash": "d29c382f76cb08a10c81a4c07ac242c47c7db0e88411e5a1ae023bc2687b8abe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e1848976-3c11-4bca-8c4e-975a41ad727a", "node_type": "1", "metadata": {"window": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models. ", "original_text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. "}, "hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "class_name": "RelatedNodeInfo"}}, "hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "start_char_idx": 17180, "end_char_idx": 17320, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e1848976-3c11-4bca-8c4e-975a41ad727a": {"__data__": {"id_": "e1848976-3c11-4bca-8c4e-975a41ad727a", "embedding": null, "metadata": {"window": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models. ", "original_text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53010cad-9311-417c-aa39-d0e805341ecb", "node_type": "1", "metadata": {"window": "We also experimented with using learned positional embeddings [ 8] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).  We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "original_text": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n"}, "hash": "09f5ff747a6dc04ab13295b87e9d3bbd28b89a1371fe3710de8ea05aed83494b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d5b783f5-e601-4116-b833-3038b9a4cbdd", "node_type": "1", "metadata": {"window": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "original_text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. "}, "hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "class_name": "RelatedNodeInfo"}}, "hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. ", "start_char_idx": 17320, "end_char_idx": 17509, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5b783f5-e601-4116-b833-3038b9a4cbdd": {"__data__": {"id_": "d5b783f5-e601-4116-b833-3038b9a4cbdd", "embedding": null, "metadata": {"window": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "original_text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e1848976-3c11-4bca-8c4e-975a41ad727a", "node_type": "1", "metadata": {"window": "We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n 4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models. ", "original_text": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations. "}, "hash": "8ae255f64d2e1c3231cf13f86ca112d5772393e2822a9f204ae6a6913cdbf878", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87ebe4f0-4d05-4ac9-beee-442497561d54", "node_type": "1", "metadata": {"window": "Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "original_text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. "}, "hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "class_name": "RelatedNodeInfo"}}, "hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. ", "start_char_idx": 17509, "end_char_idx": 17857, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87ebe4f0-4d05-4ac9-beee-442497561d54": {"__data__": {"id_": "87ebe4f0-4d05-4ac9-beee-442497561d54", "embedding": null, "metadata": {"window": "Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "original_text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5b783f5-e601-4116-b833-3038b9a4cbdd", "node_type": "1", "metadata": {"window": "4 Why Self-Attention\nIn this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(x1,...,x n)to another sequence of equal length (z1,...,z n), withxi,zi\u2208Rd, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.  Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "original_text": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations. "}, "hash": "79461d0da0115dbe7f6fec543fc5c5f2433bb724349b7e38ffa39c448ee2d506", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c94b1678-4776-4d23-90ea-dea9391551a0", "node_type": "1", "metadata": {"window": "One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n", "original_text": "This would increase the maximum\npath length to O(n/r). "}, "hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "class_name": "RelatedNodeInfo"}}, "hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. ", "start_char_idx": 17857, "end_char_idx": 18087, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c94b1678-4776-4d23-90ea-dea9391551a0": {"__data__": {"id_": "c94b1678-4776-4d23-90ea-dea9391551a0", "embedding": null, "metadata": {"window": "One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n", "original_text": "This would increase the maximum\npath length to O(n/r). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87ebe4f0-4d05-4ac9-beee-442497561d54", "node_type": "1", "metadata": {"window": "Motivating our use of self-attention we\nconsider three desiderata.\n One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "original_text": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position. "}, "hash": "2c7ebacbcc51680e631c7db06319e629912926aca84578bf19395e5da86ac52b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8f8f4d78-5d0b-4b79-b253-fceae48d972c", "node_type": "1", "metadata": {"window": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "original_text": "We plan to investigate this approach further in future work.\n"}, "hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "class_name": "RelatedNodeInfo"}}, "hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "text": "This would increase the maximum\npath length to O(n/r). ", "start_char_idx": 18087, "end_char_idx": 18142, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8f8f4d78-5d0b-4b79-b253-fceae48d972c": {"__data__": {"id_": "8f8f4d78-5d0b-4b79-b253-fceae48d972c", "embedding": null, "metadata": {"window": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "original_text": "We plan to investigate this approach further in future work.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c94b1678-4776-4d23-90ea-dea9391551a0", "node_type": "1", "metadata": {"window": "One is the total computational complexity per layer.  Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n", "original_text": "This would increase the maximum\npath length to O(n/r). "}, "hash": "7102b5f90610b753b5896009ec3f7c60861180448b04fe8c9b95c9894d1a7cde", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "98345b2a-dfe9-41c7-92d0-e4691b06ce53", "node_type": "1", "metadata": {"window": "The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "original_text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. "}, "hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "class_name": "RelatedNodeInfo"}}, "hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "text": "We plan to investigate this approach further in future work.\n", "start_char_idx": 18142, "end_char_idx": 18203, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "98345b2a-dfe9-41c7-92d0-e4691b06ce53": {"__data__": {"id_": "98345b2a-dfe9-41c7-92d0-e4691b06ce53", "embedding": null, "metadata": {"window": "The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "original_text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8f8f4d78-5d0b-4b79-b253-fceae48d972c", "node_type": "1", "metadata": {"window": "Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "original_text": "We plan to investigate this approach further in future work.\n"}, "hash": "73d82d8226aabdb702b3ff4965c30ad66c48352eb7d2b206447f98e0a9addcbc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7779737e-275f-4b09-9f99-e0d9f7e22e4b", "node_type": "1", "metadata": {"window": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "original_text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. "}, "hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "class_name": "RelatedNodeInfo"}}, "hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. ", "start_char_idx": 18203, "end_char_idx": 18312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7779737e-275f-4b09-9f99-e0d9f7e22e4b": {"__data__": {"id_": "7779737e-275f-4b09-9f99-e0d9f7e22e4b", "embedding": null, "metadata": {"window": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "original_text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "98345b2a-dfe9-41c7-92d0-e4691b06ce53", "node_type": "1", "metadata": {"window": "The third is the path length between long-range dependencies in the network.  Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "original_text": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions. "}, "hash": "c299f691b8f04c6385f83c1369800f7ce6508f3886649990e5a79a7904f507ed", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c54d80cd-05bd-4999-8256-de0f6ea2dc90", "node_type": "1", "metadata": {"window": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length. ", "original_text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). "}, "hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "class_name": "RelatedNodeInfo"}}, "hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. ", "start_char_idx": 18312, "end_char_idx": 18543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c54d80cd-05bd-4999-8256-de0f6ea2dc90": {"__data__": {"id_": "c54d80cd-05bd-4999-8256-de0f6ea2dc90", "embedding": null, "metadata": {"window": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length. ", "original_text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7779737e-275f-4b09-9f99-e0d9f7e22e4b", "node_type": "1", "metadata": {"window": "Learning long-range\ndependencies is a key challenge in many sequence transduction tasks.  One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "original_text": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network. "}, "hash": "ee924661a58f6a0fb3f9358286fcc995dfb1b7be737001619a6a97f8fc3f93f2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "01c9783d-ba55-4c1d-b84c-5558f1c905dd", "node_type": "1", "metadata": {"window": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "original_text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n"}, "hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "class_name": "RelatedNodeInfo"}}, "hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). ", "start_char_idx": 18543, "end_char_idx": 18728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "01c9783d-ba55-4c1d-b84c-5558f1c905dd": {"__data__": {"id_": "01c9783d-ba55-4c1d-b84c-5558f1c905dd", "embedding": null, "metadata": {"window": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "original_text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c54d80cd-05bd-4999-8256-de0f6ea2dc90", "node_type": "1", "metadata": {"window": "One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.  The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length. ", "original_text": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). "}, "hash": "172f86d8dac3315d2b861c16c913c82740e67f0a5101c1fa7995e9b3db417efd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e4187e7-22cb-49a9-90c7-ef7047cee7d0", "node_type": "1", "metadata": {"window": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "original_text": "As side bene\ufb01t, self-attention could yield more interpretable models. "}, "hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "class_name": "RelatedNodeInfo"}}, "hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n", "start_char_idx": 18728, "end_char_idx": 18920, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e4187e7-22cb-49a9-90c7-ef7047cee7d0": {"__data__": {"id_": "4e4187e7-22cb-49a9-90c7-ef7047cee7d0", "embedding": null, "metadata": {"window": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "original_text": "As side bene\ufb01t, self-attention could yield more interpretable models. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "01c9783d-ba55-4c1d-b84c-5558f1c905dd", "node_type": "1", "metadata": {"window": "The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [ 11].  Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "original_text": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n"}, "hash": "283057653a22cab541982cce3b1f0cb9f99976143062a68bf04b4d8ea6929f0a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cbb2148d-710a-4a00-b3f7-3e4f3fe90998", "node_type": "1", "metadata": {"window": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "original_text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. "}, "hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "class_name": "RelatedNodeInfo"}}, "hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "text": "As side bene\ufb01t, self-attention could yield more interpretable models. ", "start_char_idx": 18920, "end_char_idx": 18990, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbb2148d-710a-4a00-b3f7-3e4f3fe90998": {"__data__": {"id_": "cbb2148d-710a-4a00-b3f7-3e4f3fe90998", "embedding": null, "metadata": {"window": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "original_text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e4187e7-22cb-49a9-90c7-ef7047cee7d0", "node_type": "1", "metadata": {"window": "Hence we also compare\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "original_text": "As side bene\ufb01t, self-attention could yield more interpretable models. "}, "hash": "85406a35be0c8c0dcdc2ee090b62c3e13aca01d5cc8a7b4ac02f5b2363483df5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7a536d39-5f70-480b-a0d7-fcc09598f4bf", "node_type": "1", "metadata": {"window": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "original_text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n"}, "hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "class_name": "RelatedNodeInfo"}}, "hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. ", "start_char_idx": 18990, "end_char_idx": 19091, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7a536d39-5f70-480b-a0d7-fcc09598f4bf": {"__data__": {"id_": "7a536d39-5f70-480b-a0d7-fcc09598f4bf", "embedding": null, "metadata": {"window": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "original_text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cbb2148d-710a-4a00-b3f7-3e4f3fe90998", "node_type": "1", "metadata": {"window": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n)sequential operations.  In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "original_text": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. "}, "hash": "a05933d5eda0d472aefc247e962964b4c103f7310135380c3fe1caf0d04569f4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5a5fe64-f77a-4a75-91fd-3eb584e8ace0", "node_type": "1", "metadata": {"window": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "original_text": "5 Training\nThis section describes the training regime for our models.\n"}, "hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "class_name": "RelatedNodeInfo"}}, "hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "start_char_idx": 19091, "end_char_idx": 19270, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5a5fe64-f77a-4a75-91fd-3eb584e8ace0": {"__data__": {"id_": "f5a5fe64-f77a-4a75-91fd-3eb584e8ace0", "embedding": null, "metadata": {"window": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "original_text": "5 Training\nThis section describes the training regime for our models.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7a536d39-5f70-480b-a0d7-fcc09598f4bf", "node_type": "1", "metadata": {"window": "In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\nlengthnis smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[31] and byte-pair [ 25] representations.  To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "original_text": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n"}, "hash": "caed2e78df9561078aad2b7d57a7dd202eb80cffb7badcca56d181342fe29754", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60d8e55e-b55f-4a6d-8d31-8ed9a87ff484", "node_type": "1", "metadata": {"window": "This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n", "original_text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. "}, "hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "class_name": "RelatedNodeInfo"}}, "hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "text": "5 Training\nThis section describes the training regime for our models.\n", "start_char_idx": 19270, "end_char_idx": 19340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60d8e55e-b55f-4a6d-8d31-8ed9a87ff484": {"__data__": {"id_": "60d8e55e-b55f-4a6d-8d31-8ed9a87ff484", "embedding": null, "metadata": {"window": "This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n", "original_text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5a5fe64-f77a-4a75-91fd-3eb584e8ace0", "node_type": "1", "metadata": {"window": "To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size rin\n6\n\nthe input sequence centered around the respective output position.  This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "original_text": "5 Training\nThis section describes the training regime for our models.\n"}, "hash": "0d3795857984d15c6fc84921ab807e1e0a2ad24b2a125273259040962cb815c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "55e59a12-5d09-4dae-a3ef-1f124b6b2993", "node_type": "1", "metadata": {"window": "We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "original_text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. "}, "hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "class_name": "RelatedNodeInfo"}}, "hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. ", "start_char_idx": 19340, "end_char_idx": 19478, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "55e59a12-5d09-4dae-a3ef-1f124b6b2993": {"__data__": {"id_": "55e59a12-5d09-4dae-a3ef-1f124b6b2993", "embedding": null, "metadata": {"window": "We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "original_text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60d8e55e-b55f-4a6d-8d31-8ed9a87ff484", "node_type": "1", "metadata": {"window": "This would increase the maximum\npath length to O(n/r).  We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n", "original_text": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. "}, "hash": "643deeb1e2cde84c0cadc761328f4b6ec84def237505c877faa0d7283a261b3a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "28d3b3cf-217b-4c1e-a588-2a34d8ec5d75", "node_type": "1", "metadata": {"window": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "original_text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. "}, "hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "class_name": "RelatedNodeInfo"}}, "hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. ", "start_char_idx": 19478, "end_char_idx": 19600, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "28d3b3cf-217b-4c1e-a588-2a34d8ec5d75": {"__data__": {"id_": "28d3b3cf-217b-4c1e-a588-2a34d8ec5d75", "embedding": null, "metadata": {"window": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "original_text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "55e59a12-5d09-4dae-a3ef-1f124b6b2993", "node_type": "1", "metadata": {"window": "We plan to investigate this approach further in future work.\n A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "original_text": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens. "}, "hash": "ee96af41120c70b0fddeb0026bd7fae0a81d7f6ae0977eb6322d4520fea06c78", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f35d94b3-77c6-47b5-bbb8-8a79c05c44e3", "node_type": "1", "metadata": {"window": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n", "original_text": "Sentence pairs were batched together by approximate sequence length. "}, "hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "class_name": "RelatedNodeInfo"}}, "hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. ", "start_char_idx": 19600, "end_char_idx": 19771, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f35d94b3-77c6-47b5-bbb8-8a79c05c44e3": {"__data__": {"id_": "f35d94b3-77c6-47b5-bbb8-8a79c05c44e3", "embedding": null, "metadata": {"window": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n", "original_text": "Sentence pairs were batched together by approximate sequence length. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "28d3b3cf-217b-4c1e-a588-2a34d8ec5d75", "node_type": "1", "metadata": {"window": "A single convolutional layer with kernel width k<n does not connect all pairs of input and output\npositions.  Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "original_text": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31]. "}, "hash": "8fc9a06e8ea095816e0c5e50366c33cc813724b274072a2e10f185d599b8d79f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "52363fe7-ecb3-4560-acd6-3f45e5323060", "node_type": "1", "metadata": {"window": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "original_text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n"}, "hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "class_name": "RelatedNodeInfo"}}, "hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "text": "Sentence pairs were batched together by approximate sequence length. ", "start_char_idx": 19771, "end_char_idx": 19840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "52363fe7-ecb3-4560-acd6-3f45e5323060": {"__data__": {"id_": "52363fe7-ecb3-4560-acd6-3f45e5323060", "embedding": null, "metadata": {"window": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "original_text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f35d94b3-77c6-47b5-bbb8-8a79c05c44e3", "node_type": "1", "metadata": {"window": "Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels,\norO(logk(n))in the case of dilated convolutions [ 15], increasing the length of the longest paths\nbetween any two positions in the network.  Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n", "original_text": "Sentence pairs were batched together by approximate sequence length. "}, "hash": "60b3b6d82d37c5342361d752c896e69c4638f002b22bc250e0918350f0f0d793", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13a079dd-1f60-40e7-9740-2570b1b8faec", "node_type": "1", "metadata": {"window": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "original_text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. "}, "hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "class_name": "RelatedNodeInfo"}}, "hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "start_char_idx": 19840, "end_char_idx": 19964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13a079dd-1f60-40e7-9740-2570b1b8faec": {"__data__": {"id_": "13a079dd-1f60-40e7-9740-2570b1b8faec", "embedding": null, "metadata": {"window": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "original_text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "52363fe7-ecb3-4560-acd6-3f45e5323060", "node_type": "1", "metadata": {"window": "Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2).  Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "original_text": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n"}, "hash": "60d7a7bca29cde782a50d9b0062d23ba84cfac9c09fdda7bf351ebf76a069892", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "530b36cb-704a-4f7b-a777-1ec23ac2a016", "node_type": "1", "metadata": {"window": "As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n", "original_text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. "}, "hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "class_name": "RelatedNodeInfo"}}, "hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. ", "start_char_idx": 19964, "end_char_idx": 20052, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "530b36cb-704a-4f7b-a777-1ec23ac2a016": {"__data__": {"id_": "530b36cb-704a-4f7b-a777-1ec23ac2a016", "embedding": null, "metadata": {"window": "As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n", "original_text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "13a079dd-1f60-40e7-9740-2570b1b8faec", "node_type": "1", "metadata": {"window": "Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\n As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "original_text": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs. "}, "hash": "8d4ca3c4085734c06b43e28536e78c24f9b39e3785438a858649795158264ed3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ed5e532-219b-4654-8106-e7a87fa1ff9d", "node_type": "1", "metadata": {"window": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "original_text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. "}, "hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "class_name": "RelatedNodeInfo"}}, "hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. ", "start_char_idx": 20052, "end_char_idx": 20173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ed5e532-219b-4654-8106-e7a87fa1ff9d": {"__data__": {"id_": "5ed5e532-219b-4654-8106-e7a87fa1ff9d", "embedding": null, "metadata": {"window": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "original_text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "530b36cb-704a-4f7b-a777-1ec23ac2a016", "node_type": "1", "metadata": {"window": "As side bene\ufb01t, self-attention could yield more interpretable models.  We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n", "original_text": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. "}, "hash": "1ed81c86d73077b09b7f45b749e6e0c498bf82d83c950e8f3bb8553356559c6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14be4b8f-6991-4af6-8431-076873c40e62", "node_type": "1", "metadata": {"window": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "original_text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. "}, "hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "class_name": "RelatedNodeInfo"}}, "hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. ", "start_char_idx": 20173, "end_char_idx": 20242, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14be4b8f-6991-4af6-8431-076873c40e62": {"__data__": {"id_": "14be4b8f-6991-4af6-8431-076873c40e62", "embedding": null, "metadata": {"window": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "original_text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ed5e532-219b-4654-8106-e7a87fa1ff9d", "node_type": "1", "metadata": {"window": "We inspect attention distributions\nfrom our models and present and discuss examples in the appendix.  Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "original_text": "We\ntrained the base models for a total of 100,000 steps or 12 hours. "}, "hash": "2cbd4c1cf40bbc1fbf470e92dff63e3e101e5a5d4dd6fbabc78c186e480ea593", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6c83bff9-1ee4-4481-9678-8c6af7ee1e90", "node_type": "1", "metadata": {"window": "5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "original_text": "The big models were trained for 300,000 steps\n(3.5 days).\n"}, "hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "class_name": "RelatedNodeInfo"}}, "hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. ", "start_char_idx": 20242, "end_char_idx": 20331, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6c83bff9-1ee4-4481-9678-8c6af7ee1e90": {"__data__": {"id_": "6c83bff9-1ee4-4481-9678-8c6af7ee1e90", "embedding": null, "metadata": {"window": "5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "original_text": "The big models were trained for 300,000 steps\n(3.5 days).\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14be4b8f-6991-4af6-8431-076873c40e62", "node_type": "1", "metadata": {"window": "Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n 5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "original_text": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds. "}, "hash": "713eb40f178c31d96e8bb9e3ecb73fa6c35997db979284e43ba8f776836dde26", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d574b40-0c45-4761-8ee7-715a1b9aae61", "node_type": "1", "metadata": {"window": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "original_text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. "}, "hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "class_name": "RelatedNodeInfo"}}, "hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "text": "The big models were trained for 300,000 steps\n(3.5 days).\n", "start_char_idx": 20331, "end_char_idx": 20389, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d574b40-0c45-4761-8ee7-715a1b9aae61": {"__data__": {"id_": "4d574b40-0c45-4761-8ee7-715a1b9aae61", "embedding": null, "metadata": {"window": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "original_text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6c83bff9-1ee4-4481-9678-8c6af7ee1e90", "node_type": "1", "metadata": {"window": "5 Training\nThis section describes the training regime for our models.\n 5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "original_text": "The big models were trained for 300,000 steps\n(3.5 days).\n"}, "hash": "294f0860045abb0b2da073135a7d6e0dc291c1b6ec821bda76920f1c98902651", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd5bfbc4-3447-41fc-b250-3aa423dc1e48", "node_type": "1", "metadata": {"window": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "original_text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. "}, "hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "class_name": "RelatedNodeInfo"}}, "hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. ", "start_char_idx": 20389, "end_char_idx": 20468, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd5bfbc4-3447-41fc-b250-3aa423dc1e48": {"__data__": {"id_": "bd5bfbc4-3447-41fc-b250-3aa423dc1e48", "embedding": null, "metadata": {"window": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "original_text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d574b40-0c45-4761-8ee7-715a1b9aae61", "node_type": "1", "metadata": {"window": "5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.  Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "original_text": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129. "}, "hash": "6c2270fdff4fb0cd339dd11f2d6126657fca91aeae58d57717c8acb24694c143", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aebb237a-1534-4003-b344-232f7c9ab9d7", "node_type": "1", "metadata": {"window": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs. ", "original_text": "We used\nwarmup _steps = 4000 .\n"}, "hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "class_name": "RelatedNodeInfo"}}, "hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. ", "start_char_idx": 20468, "end_char_idx": 20812, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aebb237a-1534-4003-b344-232f7c9ab9d7": {"__data__": {"id_": "aebb237a-1534-4003-b344-232f7c9ab9d7", "embedding": null, "metadata": {"window": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs. ", "original_text": "We used\nwarmup _steps = 4000 .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd5bfbc4-3447-41fc-b250-3aa423dc1e48", "node_type": "1", "metadata": {"window": "Sentences were encoded using byte-pair encoding [ 3], which has a shared source-\ntarget vocabulary of about 37000 tokens.  For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "original_text": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number. "}, "hash": "93ae717a2510b8724d9464e90492df3834c7f4f484c693fa0de06cfb6d51a090", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "072bfee2-835b-4b60-9064-436926fce916", "node_type": "1", "metadata": {"window": "Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "original_text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. "}, "hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "class_name": "RelatedNodeInfo"}}, "hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "text": "We used\nwarmup _steps = 4000 .\n", "start_char_idx": 20812, "end_char_idx": 20843, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "072bfee2-835b-4b60-9064-436926fce916": {"__data__": {"id_": "072bfee2-835b-4b60-9064-436926fce916", "embedding": null, "metadata": {"window": "Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "original_text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aebb237a-1534-4003-b344-232f7c9ab9d7", "node_type": "1", "metadata": {"window": "For English-French, we used the signi\ufb01cantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [ 31].  Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs. ", "original_text": "We used\nwarmup _steps = 4000 .\n"}, "hash": "f8ef2851beb137ce6e735f0a676a01cd2075543e80da4faf064bcd94ac6501c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1524a306-67bd-4fff-8aed-1219007d7ccd", "node_type": "1", "metadata": {"window": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "original_text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. "}, "hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "class_name": "RelatedNodeInfo"}}, "hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. ", "start_char_idx": 20843, "end_char_idx": 21050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1524a306-67bd-4fff-8aed-1219007d7ccd": {"__data__": {"id_": "1524a306-67bd-4fff-8aed-1219007d7ccd", "embedding": null, "metadata": {"window": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "original_text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "072bfee2-835b-4b60-9064-436926fce916", "node_type": "1", "metadata": {"window": "Sentence pairs were batched together by approximate sequence length.  Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "original_text": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. "}, "hash": "4a3cb1a602744a1c26826263876200dd2c5f2ae8b32db547150e37e80f9f53a7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06247d7d-2979-4780-ad5f-a3d18b823517", "node_type": "1", "metadata": {"window": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "original_text": "For the base model, we use a rate of\nPdrop= 0.1.\n"}, "hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "class_name": "RelatedNodeInfo"}}, "hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. ", "start_char_idx": 21050, "end_char_idx": 21179, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06247d7d-2979-4780-ad5f-a3d18b823517": {"__data__": {"id_": "06247d7d-2979-4780-ad5f-a3d18b823517", "embedding": null, "metadata": {"window": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "original_text": "For the base model, we use a rate of\nPdrop= 0.1.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1524a306-67bd-4fff-8aed-1219007d7ccd", "node_type": "1", "metadata": {"window": "Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n 5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "original_text": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. "}, "hash": "8288c91d14ab9c8b6dd12b7f0b472bb87c3dd5278405b5a4ff4fb0cca777dbe1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87581fd2-7647-4740-98a1-31ce05effcde", "node_type": "1", "metadata": {"window": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "original_text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n"}, "hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "class_name": "RelatedNodeInfo"}}, "hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "text": "For the base model, we use a rate of\nPdrop= 0.1.\n", "start_char_idx": 21179, "end_char_idx": 21228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87581fd2-7647-4740-98a1-31ce05effcde": {"__data__": {"id_": "87581fd2-7647-4740-98a1-31ce05effcde", "embedding": null, "metadata": {"window": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "original_text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06247d7d-2979-4780-ad5f-a3d18b823517", "node_type": "1", "metadata": {"window": "5.2 Hardware and Schedule\nWe trained our models on one machine with 8 NVIDIA P100 GPUs.  For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "original_text": "For the base model, we use a rate of\nPdrop= 0.1.\n"}, "hash": "625ad0a437e44fa7363ee08598ac0f4c4cf4bbdd34f28e1bb21fabf46b61d780", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0fe4dd3-188d-4dea-b443-d8fdec58eaf7", "node_type": "1", "metadata": {"window": "We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints. ", "original_text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. "}, "hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "class_name": "RelatedNodeInfo"}}, "hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n", "start_char_idx": 21228, "end_char_idx": 21424, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0fe4dd3-188d-4dea-b443-d8fdec58eaf7": {"__data__": {"id_": "e0fe4dd3-188d-4dea-b443-d8fdec58eaf7", "embedding": null, "metadata": {"window": "We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints. ", "original_text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87581fd2-7647-4740-98a1-31ce05effcde", "node_type": "1", "metadata": {"window": "For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.  We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "original_text": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n"}, "hash": "310b0f5d049e362abeaf3baefabfb925b76a7f911caa7ba287aaafb4a03a8678", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e36d7722-1ad6-4a92-97bf-196a91262898", "node_type": "1", "metadata": {"window": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "original_text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n"}, "hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "class_name": "RelatedNodeInfo"}}, "hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. ", "start_char_idx": 21424, "end_char_idx": 21972, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e36d7722-1ad6-4a92-97bf-196a91262898": {"__data__": {"id_": "e36d7722-1ad6-4a92-97bf-196a91262898", "embedding": null, "metadata": {"window": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "original_text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0fe4dd3-188d-4dea-b443-d8fdec58eaf7", "node_type": "1", "metadata": {"window": "We\ntrained the base models for a total of 100,000 steps or 12 hours.  For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints. ", "original_text": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30]. "}, "hash": "30dc990c7eae728203f60b46796b0f4c2d149c901ccb4bff72ef033683cd42b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "64931f1d-0a7b-4934-b986-a6a52439b557", "node_type": "1", "metadata": {"window": "The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set. ", "original_text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. "}, "hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "class_name": "RelatedNodeInfo"}}, "hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "start_char_idx": 21972, "end_char_idx": 22072, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "64931f1d-0a7b-4934-b986-a6a52439b557": {"__data__": {"id_": "64931f1d-0a7b-4934-b986-a6a52439b557", "embedding": null, "metadata": {"window": "The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set. ", "original_text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e36d7722-1ad6-4a92-97bf-196a91262898", "node_type": "1", "metadata": {"window": "For our big models,(described on the\nbottom line of table 3), step time was 1.0 seconds.  The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "original_text": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n"}, "hash": "a3059c417a9d74200624c676712ca6c9fd9741e598ac84553715ecce2a8c9a9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "de799068-b091-40f1-84e5-a1d99b48fbd3", "node_type": "1", "metadata": {"window": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "original_text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. "}, "hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "class_name": "RelatedNodeInfo"}}, "hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. ", "start_char_idx": 22072, "end_char_idx": 22364, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de799068-b091-40f1-84e5-a1d99b48fbd3": {"__data__": {"id_": "de799068-b091-40f1-84e5-a1d99b48fbd3", "embedding": null, "metadata": {"window": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "original_text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "64931f1d-0a7b-4934-b986-a6a52439b557", "node_type": "1", "metadata": {"window": "The big models were trained for 300,000 steps\n(3.5 days).\n 5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set. ", "original_text": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. "}, "hash": "68cc9e5f5b60b4fb898790c6bac58f47cc78ad577a57f4a160cdd34763a22a11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f9dea4d2-595e-46ff-a9d1-166915873a89", "node_type": "1", "metadata": {"window": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "original_text": "Training took 3.5days on 8P100 GPUs. "}, "hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "class_name": "RelatedNodeInfo"}}, "hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. ", "start_char_idx": 22364, "end_char_idx": 22436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f9dea4d2-595e-46ff-a9d1-166915873a89": {"__data__": {"id_": "f9dea4d2-595e-46ff-a9d1-166915873a89", "embedding": null, "metadata": {"window": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "original_text": "Training took 3.5days on 8P100 GPUs. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de799068-b091-40f1-84e5-a1d99b48fbd3", "node_type": "1", "metadata": {"window": "5.3 Optimizer\nWe used the Adam optimizer [ 17] with\u03b21= 0.9,\u03b22= 0.98and\u03f5= 10\u22129.  We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "original_text": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3. "}, "hash": "10bfecff5e47d54d6081cbf6f3c770354084f1057ce52b58d53c024a147ac93d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac7c065f-7516-42a4-acc5-8c386121b72b", "node_type": "1", "metadata": {"window": "We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "original_text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n"}, "hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "class_name": "RelatedNodeInfo"}}, "hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "text": "Training took 3.5days on 8P100 GPUs. ", "start_char_idx": 22436, "end_char_idx": 22473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac7c065f-7516-42a4-acc5-8c386121b72b": {"__data__": {"id_": "ac7c065f-7516-42a4-acc5-8c386121b72b", "embedding": null, "metadata": {"window": "We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "original_text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f9dea4d2-595e-46ff-a9d1-166915873a89", "node_type": "1", "metadata": {"window": "We varied the learning\nrate over the course of training, according to the formula:\nlrate =d\u22120.5\nmodel\u00b7min(step_num\u22120.5,step _num\u00b7warmup _steps\u22121.5) (3)\nThis corresponds to increasing the learning rate linearly for the \ufb01rst warmup _steps training steps,\nand decreasing it thereafter proportionally to the inverse square root of the step number.  We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "original_text": "Training took 3.5days on 8P100 GPUs. "}, "hash": "1f11f3d4b074e475256d461861d74e5a614a7d390d749227be4222349d82fcb5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03b5b432-d541-48ac-8034-39e2ab5100b4", "node_type": "1", "metadata": {"window": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "original_text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. "}, "hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "class_name": "RelatedNodeInfo"}}, "hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "start_char_idx": 22473, "end_char_idx": 22619, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03b5b432-d541-48ac-8034-39e2ab5100b4": {"__data__": {"id_": "03b5b432-d541-48ac-8034-39e2ab5100b4", "embedding": null, "metadata": {"window": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "original_text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac7c065f-7516-42a4-acc5-8c386121b72b", "node_type": "1", "metadata": {"window": "We used\nwarmup _steps = 4000 .\n 5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "original_text": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n"}, "hash": "fc7d08d4f506d1b5cf49545775c1a2102155aa23b6c4f54574022ffbe334a10f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b271b430-4b12-4d36-8764-062429c0c402", "node_type": "1", "metadata": {"window": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "original_text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n"}, "hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "class_name": "RelatedNodeInfo"}}, "hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. ", "start_char_idx": 22619, "end_char_idx": 22851, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b271b430-4b12-4d36-8764-062429c0c402": {"__data__": {"id_": "b271b430-4b12-4d36-8764-062429c0c402", "embedding": null, "metadata": {"window": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "original_text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03b5b432-d541-48ac-8034-39e2ab5100b4", "node_type": "1", "metadata": {"window": "5.4 Regularization\nWe employ three types of regularization during training:\nResidual Dropout We apply dropout [ 27] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.  In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "original_text": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model. "}, "hash": "7b8de21c841e3caa0284ac83db455533e4464196f73083aee9cf4ce64e80649e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c765f383-bcb4-4372-9e14-b14bc4ec5e33", "node_type": "1", "metadata": {"window": "For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n", "original_text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. "}, "hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "class_name": "RelatedNodeInfo"}}, "hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n", "start_char_idx": 22851, "end_char_idx": 22955, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c765f383-bcb4-4372-9e14-b14bc4ec5e33": {"__data__": {"id_": "c765f383-bcb4-4372-9e14-b14bc4ec5e33", "embedding": null, "metadata": {"window": "For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n", "original_text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b271b430-4b12-4d36-8764-062429c0c402", "node_type": "1", "metadata": {"window": "In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.  For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "original_text": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n"}, "hash": "52c0e79fde84cd77a1dba70778487619a6d6c793536c638351735109f7428781", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b7fd2d1-8bee-41f3-9c4f-2ce84b0ce44c", "node_type": "1", "metadata": {"window": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "original_text": "For the big models, we averaged the last 20 checkpoints. "}, "hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "class_name": "RelatedNodeInfo"}}, "hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. ", "start_char_idx": 22955, "end_char_idx": 23088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b7fd2d1-8bee-41f3-9c4f-2ce84b0ce44c": {"__data__": {"id_": "9b7fd2d1-8bee-41f3-9c4f-2ce84b0ce44c", "embedding": null, "metadata": {"window": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "original_text": "For the big models, we averaged the last 20 checkpoints. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c765f383-bcb4-4372-9e14-b14bc4ec5e33", "node_type": "1", "metadata": {"window": "For the base model, we use a rate of\nPdrop= 0.1.\n 7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n", "original_text": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals. "}, "hash": "4e8ddd0c4a5b11f8a2e63fd29b88b1faae17cbfa649afe5ef5a4e28d36cf43b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7189a4a-641f-4889-abf5-d6280d2deaba", "node_type": "1", "metadata": {"window": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "original_text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. "}, "hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "class_name": "RelatedNodeInfo"}}, "hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "text": "For the big models, we averaged the last 20 checkpoints. ", "start_char_idx": 23088, "end_char_idx": 23145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7189a4a-641f-4889-abf5-d6280d2deaba": {"__data__": {"id_": "b7189a4a-641f-4889-abf5-d6280d2deaba", "embedding": null, "metadata": {"window": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "original_text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b7fd2d1-8bee-41f3-9c4f-2ce84b0ce44c", "node_type": "1", "metadata": {"window": "7\n\nTable 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "original_text": "For the big models, we averaged the last 20 checkpoints. "}, "hash": "04390937edd69b9eb38482e3a4a75724700bcd245f8d6a9227fd5961f65e3461", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "06009291-a1c0-45e1-a994-1456d1983b61", "node_type": "1", "metadata": {"window": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "original_text": "These hyperparameters\nwere chosen after experimentation on the development set. "}, "hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "class_name": "RelatedNodeInfo"}}, "hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. ", "start_char_idx": 23145, "end_char_idx": 23217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "06009291-a1c0-45e1-a994-1456d1983b61": {"__data__": {"id_": "06009291-a1c0-45e1-a994-1456d1983b61", "embedding": null, "metadata": {"window": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "original_text": "These hyperparameters\nwere chosen after experimentation on the development set. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7189a4a-641f-4889-abf5-d6280d2deaba", "node_type": "1", "metadata": {"window": "ModelBLEU Training Cost (FLOPs)\nEN-DE EN-FR EN-DE EN-FR\nByteNet [15] 23.75\nDeep-Att + PosUnk [32] 39.2 1.0\u00b71020\nGNMT + RL [31] 24.6 39.92 2.3\u00b710191.4\u00b71020\nConvS2S [8] 25.16 40.46 9.6\u00b710181.5\u00b71020\nMoE [26] 26.03 40.56 2.0\u00b710191.2\u00b71020\nDeep-Att + PosUnk Ensemble [32] 40.4 8.0\u00b71020\nGNMT + RL Ensemble [31] 26.30 41.16 1.8\u00b710201.1\u00b71021\nConvS2S Ensemble [8] 26.36 41.29 7.7\u00b710191.2\u00b71021\nTransformer (base model) 27.3 38.1 3.3\u00b71018\nTransformer (big) 28.4 41.0 2.3\u00b71019\nLabel Smoothing During training, we employed label smoothing of value \u03f5ls= 0.1[30].  This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "original_text": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31]. "}, "hash": "77ccc95bafb14094e58c73db88d387078e2ef9decd3b659bc6a8ec394c8c2a93", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "256ee85f-f8d2-4a11-8bbf-d5ea92011840", "node_type": "1", "metadata": {"window": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture. ", "original_text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n"}, "hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "class_name": "RelatedNodeInfo"}}, "hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "text": "These hyperparameters\nwere chosen after experimentation on the development set. ", "start_char_idx": 23217, "end_char_idx": 23297, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "256ee85f-f8d2-4a11-8bbf-d5ea92011840": {"__data__": {"id_": "256ee85f-f8d2-4a11-8bbf-d5ea92011840", "embedding": null, "metadata": {"window": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture. ", "original_text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "06009291-a1c0-45e1-a994-1456d1983b61", "node_type": "1", "metadata": {"window": "This\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n 6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "original_text": "These hyperparameters\nwere chosen after experimentation on the development set. "}, "hash": "415e283692da731d7678b34fa5434791e1687eacc8e3c314666faf32b42a12c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2f78ce25-ba07-43b8-ab04-4237cf5eb06a", "node_type": "1", "metadata": {"window": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel. ", "original_text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. "}, "hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "class_name": "RelatedNodeInfo"}}, "hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n", "start_char_idx": 23297, "end_char_idx": 23409, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2f78ce25-ba07-43b8-ab04-4237cf5eb06a": {"__data__": {"id_": "2f78ce25-ba07-43b8-ab04-4237cf5eb06a", "embedding": null, "metadata": {"window": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel. ", "original_text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "256ee85f-f8d2-4a11-8bbf-d5ea92011840", "node_type": "1", "metadata": {"window": "6 Results\n6.1 Machine Translation\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.  The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture. ", "original_text": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n"}, "hash": "4a3b3b6d78891eba852f324549170caa43fabe48e559a06346aa5f9d4f0bc726", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "74f4cdb6-7ced-4cf8-ae1e-401b42903c78", "node_type": "1", "metadata": {"window": "Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013. ", "original_text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n"}, "hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "class_name": "RelatedNodeInfo"}}, "hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. ", "start_char_idx": 23409, "end_char_idx": 23546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "74f4cdb6-7ced-4cf8-ae1e-401b42903c78": {"__data__": {"id_": "74f4cdb6-7ced-4cf8-ae1e-401b42903c78", "embedding": null, "metadata": {"window": "Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013. ", "original_text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2f78ce25-ba07-43b8-ab04-4237cf5eb06a", "node_type": "1", "metadata": {"window": "The con\ufb01guration of this model is\nlisted in the bottom line of Table 3.  Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel. ", "original_text": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. "}, "hash": "f3a238ade08904d1d1ec684209256e64b9422b1d9a09fcdec06c799e1f1625e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cab4fcbe-2de3-4e57-a056-2b751a239107", "node_type": "1", "metadata": {"window": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "original_text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. "}, "hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "class_name": "RelatedNodeInfo"}}, "hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n", "start_char_idx": 23546, "end_char_idx": 23765, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cab4fcbe-2de3-4e57-a056-2b751a239107": {"__data__": {"id_": "cab4fcbe-2de3-4e57-a056-2b751a239107", "embedding": null, "metadata": {"window": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "original_text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "74f4cdb6-7ced-4cf8-ae1e-401b42903c78", "node_type": "1", "metadata": {"window": "Training took 3.5days on 8P100 GPUs.  Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013. ", "original_text": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n"}, "hash": "6b531f7fbf53045b5060f9649b6371fb2057f7b42c8218231258c3c4d00004a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "39add761-96fb-4dbd-baf4-1e89470afd76", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "original_text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. "}, "hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "class_name": "RelatedNodeInfo"}}, "hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. ", "start_char_idx": 23765, "end_char_idx": 24008, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "39add761-96fb-4dbd-baf4-1e89470afd76": {"__data__": {"id_": "39add761-96fb-4dbd-baf4-1e89470afd76", "embedding": null, "metadata": {"window": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "original_text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cab4fcbe-2de3-4e57-a056-2b751a239107", "node_type": "1", "metadata": {"window": "Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "original_text": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013. "}, "hash": "25ba8456d867eb413b3187527c04c86d6e51e03c4a3056d9e878aef360c730ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0685392b-72e6-4830-b31c-f8e0da8ecb40", "node_type": "1", "metadata": {"window": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "original_text": "We present these results in Table 3.\n"}, "hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "class_name": "RelatedNodeInfo"}}, "hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. ", "start_char_idx": 24008, "end_char_idx": 24095, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0685392b-72e6-4830-b31c-f8e0da8ecb40": {"__data__": {"id_": "0685392b-72e6-4830-b31c-f8e0da8ecb40", "embedding": null, "metadata": {"window": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "original_text": "We present these results in Table 3.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "39add761-96fb-4dbd-baf4-1e89470afd76", "node_type": "1", "metadata": {"window": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4the training cost of the\nprevious state-of-the-art model.  The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "original_text": "We used beam search as described in the previous section, but no\ncheckpoint averaging. "}, "hash": "050d0918ed3b96e29c3425c59a2389d64b299c4900cbb3c044ab11f40dc4e87d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf3a3296-1c00-491c-9d29-bfef83f3f52e", "node_type": "1", "metadata": {"window": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "original_text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. "}, "hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "class_name": "RelatedNodeInfo"}}, "hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "text": "We present these results in Table 3.\n", "start_char_idx": 24095, "end_char_idx": 24132, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf3a3296-1c00-491c-9d29-bfef83f3f52e": {"__data__": {"id_": "bf3a3296-1c00-491c-9d29-bfef83f3f52e", "embedding": null, "metadata": {"window": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "original_text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0685392b-72e6-4830-b31c-f8e0da8ecb40", "node_type": "1", "metadata": {"window": "The Transformer (big) model trained for English-to-French used\ndropout rate Pdrop= 0.1, instead of 0.3.\n For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "original_text": "We present these results in Table 3.\n"}, "hash": "5dbff127ebc7c560a55bcd122d30082ce309667f6a9bca1fe99b4e19e083dadd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c3cac43-a877-4594-9e87-0686e9ea47f6", "node_type": "1", "metadata": {"window": "For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "original_text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n"}, "hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "class_name": "RelatedNodeInfo"}}, "hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. ", "start_char_idx": 24132, "end_char_idx": 24310, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c3cac43-a877-4594-9e87-0686e9ea47f6": {"__data__": {"id_": "4c3cac43-a877-4594-9e87-0686e9ea47f6", "embedding": null, "metadata": {"window": "For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "original_text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf3a3296-1c00-491c-9d29-bfef83f3f52e", "node_type": "1", "metadata": {"window": "For the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nwere written at 10-minute intervals.  For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "original_text": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. "}, "hash": "e5f7c0b58c71dd14dbf5d0b7444fd806bc27fe6ce1bf9b3e41d054a657f887f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f62f4d6b-86f3-4cf3-9a7e-200173a52b24", "node_type": "1", "metadata": {"window": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "original_text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n"}, "hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "class_name": "RelatedNodeInfo"}}, "hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "start_char_idx": 24310, "end_char_idx": 24423, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f62f4d6b-86f3-4cf3-9a7e-200173a52b24": {"__data__": {"id_": "f62f4d6b-86f3-4cf3-9a7e-200173a52b24", "embedding": null, "metadata": {"window": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "original_text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4c3cac43-a877-4594-9e87-0686e9ea47f6", "node_type": "1", "metadata": {"window": "For the big models, we averaged the last 20 checkpoints.  We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "original_text": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n"}, "hash": "98c307346139ef435b2030755fa3291bd3a2b0cbbd7cf2d0265a84f154f6bf21", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b98eb14b-783c-443f-943a-e01cc422db93", "node_type": "1", "metadata": {"window": "These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "original_text": "8\n\nTable 3: Variations on the Transformer architecture. "}, "hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "class_name": "RelatedNodeInfo"}}, "hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "start_char_idx": 24423, "end_char_idx": 24513, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b98eb14b-783c-443f-943a-e01cc422db93": {"__data__": {"id_": "b98eb14b-783c-443f-943a-e01cc422db93", "embedding": null, "metadata": {"window": "These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "original_text": "8\n\nTable 3: Variations on the Transformer architecture. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f62f4d6b-86f3-4cf3-9a7e-200173a52b24", "node_type": "1", "metadata": {"window": "We\nused beam search with a beam size of 4and length penalty \u03b1= 0.6[31].  These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "original_text": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n"}, "hash": "d94705cb0b9822b0539820c893035f07f6a8aaaf970c32480e694702b860a1ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "65ade81e-276c-4d94-9de4-371a63c4c90b", "node_type": "1", "metadata": {"window": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "original_text": "Unlisted values are identical to those of the base\nmodel. "}, "hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "class_name": "RelatedNodeInfo"}}, "hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "text": "8\n\nTable 3: Variations on the Transformer architecture. ", "start_char_idx": 24513, "end_char_idx": 24569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65ade81e-276c-4d94-9de4-371a63c4c90b": {"__data__": {"id_": "65ade81e-276c-4d94-9de4-371a63c4c90b", "embedding": null, "metadata": {"window": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "original_text": "Unlisted values are identical to those of the base\nmodel. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b98eb14b-783c-443f-943a-e01cc422db93", "node_type": "1", "metadata": {"window": "These hyperparameters\nwere chosen after experimentation on the development set.  We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "original_text": "8\n\nTable 3: Variations on the Transformer architecture. "}, "hash": "764b70fcb2d3ccb0263cdd5bf6fc311527a3cba7481b3fb18cc1792f9da2e67f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76a66884-4a86-4abd-b913-06246e6ec4e1", "node_type": "1", "metadata": {"window": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "original_text": "All metrics are on the English-to-German translation development set, newstest2013. "}, "hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "class_name": "RelatedNodeInfo"}}, "hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "text": "Unlisted values are identical to those of the base\nmodel. ", "start_char_idx": 24569, "end_char_idx": 24627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76a66884-4a86-4abd-b913-06246e6ec4e1": {"__data__": {"id_": "76a66884-4a86-4abd-b913-06246e6ec4e1", "embedding": null, "metadata": {"window": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "original_text": "All metrics are on the English-to-German translation development set, newstest2013. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65ade81e-276c-4d94-9de4-371a63c4c90b", "node_type": "1", "metadata": {"window": "We set the maximum output length during\ninference to input length + 50, but terminate early when possible [31].\n Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "original_text": "Unlisted values are identical to those of the base\nmodel. "}, "hash": "5f87d8e9f2be94383e48cc65e5b5fff9854b57edc6dc045163a780a32c0240ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "67c7d03c-9aad-40eb-8957-c754ffa7bc43", "node_type": "1", "metadata": {"window": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks. ", "original_text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n"}, "hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "class_name": "RelatedNodeInfo"}}, "hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "text": "All metrics are on the English-to-German translation development set, newstest2013. ", "start_char_idx": 24627, "end_char_idx": 24711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "67c7d03c-9aad-40eb-8957-c754ffa7bc43": {"__data__": {"id_": "67c7d03c-9aad-40eb-8957-c754ffa7bc43", "embedding": null, "metadata": {"window": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks. ", "original_text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "76a66884-4a86-4abd-b913-06246e6ec4e1", "node_type": "1", "metadata": {"window": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.  We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "original_text": "All metrics are on the English-to-German translation development set, newstest2013. "}, "hash": "131970983343d37939f7ec14359aeae8a0319fdeddb3d5405aff54028ea4fd22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "99568588-bad6-484f-87fc-8f11fa1b1c54", "node_type": "1", "metadata": {"window": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "original_text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. "}, "hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "class_name": "RelatedNodeInfo"}}, "hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "start_char_idx": 24711, "end_char_idx": 24840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "99568588-bad6-484f-87fc-8f11fa1b1c54": {"__data__": {"id_": "99568588-bad6-484f-87fc-8f11fa1b1c54", "embedding": null, "metadata": {"window": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "original_text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "67c7d03c-9aad-40eb-8957-c754ffa7bc43", "node_type": "1", "metadata": {"window": "We estimate the number of \ufb02oating point operations used to train a\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision \ufb02oating-point capacity of each GPU5.\n 6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks. ", "original_text": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n"}, "hash": "3c7fbdf58c9822d09949379bf7e65251cd8838689a34fa4390a002c07e1304e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8d7cc7be-62ee-49eb-890e-22a25f74d006", "node_type": "1", "metadata": {"window": "We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n", "original_text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. "}, "hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "class_name": "RelatedNodeInfo"}}, "hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. ", "start_char_idx": 24840, "end_char_idx": 25460, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d7cc7be-62ee-49eb-890e-22a25f74d006": {"__data__": {"id_": "8d7cc7be-62ee-49eb-890e-22a25f74d006", "embedding": null, "metadata": {"window": "We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n", "original_text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "99568588-bad6-484f-87fc-8f11fa1b1c54", "node_type": "1", "metadata": {"window": "6.2 Model Variations\nTo evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\ndevelopment set, newstest2013.  We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "original_text": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality. "}, "hash": "fbd1b45ad9007ff7744097e66e1bf5fa59eca49b7957958227cf645707378905", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08370985-044b-4c66-b835-e727d3ce93d2", "node_type": "1", "metadata": {"window": "We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "original_text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. "}, "hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "class_name": "RelatedNodeInfo"}}, "hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. ", "start_char_idx": 25460, "end_char_idx": 25605, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08370985-044b-4c66-b835-e727d3ce93d2": {"__data__": {"id_": "08370985-044b-4c66-b835-e727d3ce93d2", "embedding": null, "metadata": {"window": "We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "original_text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8d7cc7be-62ee-49eb-890e-22a25f74d006", "node_type": "1", "metadata": {"window": "We used beam search as described in the previous section, but no\ncheckpoint averaging.  We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n", "original_text": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial. "}, "hash": "6b9c7a375e2ec1cee4fc98ae8e812110d25103ea2fedcee1b0fb9071df39d5e9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00b925ae-9e55-428d-832f-9b3f87dfb0b3", "node_type": "1", "metadata": {"window": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "original_text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n"}, "hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "class_name": "RelatedNodeInfo"}}, "hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. ", "start_char_idx": 25605, "end_char_idx": 25742, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00b925ae-9e55-428d-832f-9b3f87dfb0b3": {"__data__": {"id_": "00b925ae-9e55-428d-832f-9b3f87dfb0b3", "embedding": null, "metadata": {"window": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "original_text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08370985-044b-4c66-b835-e727d3ce93d2", "node_type": "1", "metadata": {"window": "We present these results in Table 3.\n In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "original_text": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting. "}, "hash": "a98beba31a979f96d43667c59140897bb14f74a9b564becf09b2db58801a6ee7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1aad40a5-8ab1-4b37-836e-a70ebc2a1152", "node_type": "1", "metadata": {"window": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "original_text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n"}, "hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "class_name": "RelatedNodeInfo"}}, "hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n", "start_char_idx": 25742, "end_char_idx": 25896, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1aad40a5-8ab1-4b37-836e-a70ebc2a1152": {"__data__": {"id_": "1aad40a5-8ab1-4b37-836e-a70ebc2a1152", "embedding": null, "metadata": {"window": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "original_text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00b925ae-9e55-428d-832f-9b3f87dfb0b3", "node_type": "1", "metadata": {"window": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.  While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "original_text": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n"}, "hash": "cf18c3aa14320c890ad3df77c12b44805ccc014eef188dd9d78bed0df0c981b0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54d6fca5-5b8c-4a20-ba96-ef37c88e9ede", "node_type": "1", "metadata": {"window": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization. ", "original_text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. "}, "hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "class_name": "RelatedNodeInfo"}}, "hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "start_char_idx": 25896, "end_char_idx": 26136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54d6fca5-5b8c-4a20-ba96-ef37c88e9ede": {"__data__": {"id_": "54d6fca5-5b8c-4a20-ba96-ef37c88e9ede", "embedding": null, "metadata": {"window": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization. ", "original_text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1aad40a5-8ab1-4b37-836e-a70ebc2a1152", "node_type": "1", "metadata": {"window": "While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n 5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "original_text": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n"}, "hash": "25f4e11af9181698e1a935bd81e6d39b9e923e64d3d471e3300b3a7c6c29bf9c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fcb7680e-ebe4-4982-87d6-5a9c4addafb2", "node_type": "1", "metadata": {"window": "8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n", "original_text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. "}, "hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "class_name": "RelatedNodeInfo"}}, "hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. ", "start_char_idx": 26136, "end_char_idx": 26273, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fcb7680e-ebe4-4982-87d6-5a9c4addafb2": {"__data__": {"id_": "fcb7680e-ebe4-4982-87d6-5a9c4addafb2", "embedding": null, "metadata": {"window": "8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n", "original_text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "54d6fca5-5b8c-4a20-ba96-ef37c88e9ede", "node_type": "1", "metadata": {"window": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n 8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization. ", "original_text": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers. "}, "hash": "1508d6bc84ca5dc1aa7f3c82bb9121640c5b325dece78d835af17ed16c4ce20d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ed438742-2e0e-4be1-8151-c4c988d9790b", "node_type": "1", "metadata": {"window": "Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n"}, "hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "class_name": "RelatedNodeInfo"}}, "hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. ", "start_char_idx": 26273, "end_char_idx": 26393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ed438742-2e0e-4be1-8151-c4c988d9790b": {"__data__": {"id_": "ed438742-2e0e-4be1-8151-c4c988d9790b", "embedding": null, "metadata": {"window": "Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fcb7680e-ebe4-4982-87d6-5a9c4addafb2", "node_type": "1", "metadata": {"window": "8\n\nTable 3: Variations on the Transformer architecture.  Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n", "original_text": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. "}, "hash": "766733ff9ce3936adbe070997aeab12872b78d02ce4d9375db51d99e8aedb75a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f182cf3b-2f0f-4812-b3dc-51be06836469", "node_type": "1", "metadata": {"window": "All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate. ", "original_text": "We are excited about the future of attention-based models and plan to apply them to other tasks. "}, "hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "class_name": "RelatedNodeInfo"}}, "hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "start_char_idx": 26393, "end_char_idx": 26479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f182cf3b-2f0f-4812-b3dc-51be06836469": {"__data__": {"id_": "f182cf3b-2f0f-4812-b3dc-51be06836469", "embedding": null, "metadata": {"window": "All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate. ", "original_text": "We are excited about the future of attention-based models and plan to apply them to other tasks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed438742-2e0e-4be1-8151-c4c988d9790b", "node_type": "1", "metadata": {"window": "Unlisted values are identical to those of the base\nmodel.  All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n"}, "hash": "0922c35cf87ad7f3ef5120407da42568c30a36dc5d55c1a3cfa4d8112d98ef0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ae7c82c5-c1d7-4775-b879-d7a2fd8994ce", "node_type": "1", "metadata": {"window": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n", "original_text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. "}, "hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "class_name": "RelatedNodeInfo"}}, "hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "text": "We are excited about the future of attention-based models and plan to apply them to other tasks. ", "start_char_idx": 26479, "end_char_idx": 26576, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ae7c82c5-c1d7-4775-b879-d7a2fd8994ce": {"__data__": {"id_": "ae7c82c5-c1d7-4775-b879-d7a2fd8994ce", "embedding": null, "metadata": {"window": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n", "original_text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f182cf3b-2f0f-4812-b3dc-51be06836469", "node_type": "1", "metadata": {"window": "All metrics are on the English-to-German translation development set, newstest2013.  Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate. ", "original_text": "We are excited about the future of attention-based models and plan to apply them to other tasks. "}, "hash": "fdc37ec522c56bd5cd7a3c584890e1b49c32a9882db95f61ab7a48ad3254262c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d591de8d-c1b5-430a-acce-2d9431569da2", "node_type": "1", "metadata": {"window": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "original_text": "Making generation less sequential is another research goals of ours.\n"}, "hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "class_name": "RelatedNodeInfo"}}, "hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. ", "start_char_idx": 26576, "end_char_idx": 26813, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d591de8d-c1b5-430a-acce-2d9431569da2": {"__data__": {"id_": "d591de8d-c1b5-430a-acce-2d9431569da2", "embedding": null, "metadata": {"window": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "original_text": "Making generation less sequential is another research goals of ours.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae7c82c5-c1d7-4775-b879-d7a2fd8994ce", "node_type": "1", "metadata": {"window": "Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n", "original_text": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video. "}, "hash": "6d21e47f2cb482db831579431bc368f328cef05eef15de0ceb144aee71dc59ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8708e8cf-2b4a-4669-b681-f31f27d67d25", "node_type": "1", "metadata": {"window": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le. ", "original_text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n"}, "hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "class_name": "RelatedNodeInfo"}}, "hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "text": "Making generation less sequential is another research goals of ours.\n", "start_char_idx": 26813, "end_char_idx": 26882, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8708e8cf-2b4a-4669-b681-f31f27d67d25": {"__data__": {"id_": "8708e8cf-2b4a-4669-b681-f31f27d67d25", "embedding": null, "metadata": {"window": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le. ", "original_text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d591de8d-c1b5-430a-acce-2d9431569da2", "node_type": "1", "metadata": {"window": "N d modeldffh d kdvPdrop\u03f5lstrain PPL BLEU params\nsteps (dev) (dev)\u00d7106\nbase 6 512 2048 8 64 64 0.1 0.1 100K 4.92 25.8 65\n(A)1 512 512 5.29 24.9\n4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32 16 16 5.01 25.4\n(B)16 5.16 25.1 58\n32 5.01 25.4 60\n(C)2 6.11 23.7 36\n4 5.19 25.3 50\n8 4.88 25.5 80\n256 32 32 5.75 24.5 28\n1024 128 128 4.66 26.0 168\n1024 5.12 25.4 53\n4096 4.75 26.2 90\n(D)0.0 5.77 24.6\n0.2 4.95 25.5\n0.0 4.67 25.3\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\nbig 6 1024 4096 16 0.3 300K 4.33 26.4 213\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality.  This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "original_text": "Making generation less sequential is another research goals of ours.\n"}, "hash": "4a0b5b4b7a070b34da5ce69a84be1bd4a382c5e6c9a446b7baf0d6cbeb07ccd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4992a350-a164-4071-b9ed-3c38971c8911", "node_type": "1", "metadata": {"window": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures. ", "original_text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n"}, "hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "class_name": "RelatedNodeInfo"}}, "hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n", "start_char_idx": 26882, "end_char_idx": 26995, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4992a350-a164-4071-b9ed-3c38971c8911": {"__data__": {"id_": "4992a350-a164-4071-b9ed-3c38971c8911", "embedding": null, "metadata": {"window": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures. ", "original_text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8708e8cf-2b4a-4669-b681-f31f27d67d25", "node_type": "1", "metadata": {"window": "This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be bene\ufb01cial.  We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le. ", "original_text": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n"}, "hash": "fccc33f1334891feefeae0d5f815109b7651cafd677a36bbe9f158998dd8b73d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5cae61a0-d1f1-493c-84e1-d672c31cf76b", "node_type": "1", "metadata": {"window": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n", "original_text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. "}, "hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "class_name": "RelatedNodeInfo"}}, "hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n", "start_char_idx": 26995, "end_char_idx": 27124, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5cae61a0-d1f1-493c-84e1-d672c31cf76b": {"__data__": {"id_": "5cae61a0-d1f1-493c-84e1-d672c31cf76b", "embedding": null, "metadata": {"window": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n", "original_text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4992a350-a164-4071-b9ed-3c38971c8911", "node_type": "1", "metadata": {"window": "We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-\ufb01tting.  In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures. ", "original_text": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n"}, "hash": "e5e3434b6ed532a2b93f6b6070db10f4ca38f026c1cb1025c533919c85368c18", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "203e73fe-d0b2-41ef-9a24-90a8a9429229", "node_type": "1", "metadata": {"window": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "original_text": "Layer normalization. "}, "hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "class_name": "RelatedNodeInfo"}}, "hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. ", "start_char_idx": 27124, "end_char_idx": 27196, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "203e73fe-d0b2-41ef-9a24-90a8a9429229": {"__data__": {"id_": "203e73fe-d0b2-41ef-9a24-90a8a9429229", "embedding": null, "metadata": {"window": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "original_text": "Layer normalization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5cae61a0-d1f1-493c-84e1-d672c31cf76b", "node_type": "1", "metadata": {"window": "In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [ 8], and observe nearly identical\nresults to the base model.\n 7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n", "original_text": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. "}, "hash": "123e177a5dd57651311c93f39949f73ef95ed75f68c49d918af5b1fc038deea6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1a2a7e73-f34a-44b8-bebc-1feb87381a07", "node_type": "1", "metadata": {"window": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading. ", "original_text": "arXiv preprint\narXiv:1607.06450 , 2016.\n"}, "hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "class_name": "RelatedNodeInfo"}}, "hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "text": "Layer normalization. ", "start_char_idx": 27196, "end_char_idx": 27217, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1a2a7e73-f34a-44b8-bebc-1feb87381a07": {"__data__": {"id_": "1a2a7e73-f34a-44b8-bebc-1feb87381a07", "embedding": null, "metadata": {"window": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading. ", "original_text": "arXiv preprint\narXiv:1607.06450 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "203e73fe-d0b2-41ef-9a24-90a8a9429229", "node_type": "1", "metadata": {"window": "7 Conclusion\nIn this work, we presented the Transformer, the \ufb01rst sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "original_text": "Layer normalization. "}, "hash": "70b892d689728d4ff8c6ce24d5f03e2ef3541b6f1db0253715a9428b9cd8fd03", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58249c08-36cc-40e3-9abd-32ce14267cea", "node_type": "1", "metadata": {"window": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n", "original_text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "class_name": "RelatedNodeInfo"}}, "hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "text": "arXiv preprint\narXiv:1607.06450 , 2016.\n", "start_char_idx": 27217, "end_char_idx": 27257, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58249c08-36cc-40e3-9abd-32ce14267cea": {"__data__": {"id_": "58249c08-36cc-40e3-9abd-32ce14267cea", "embedding": null, "metadata": {"window": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n", "original_text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1a2a7e73-f34a-44b8-bebc-1feb87381a07", "node_type": "1", "metadata": {"window": "For translation tasks, the Transformer can be trained signi\ufb01cantly faster than architectures based\non recurrent or convolutional layers.  On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading. ", "original_text": "arXiv preprint\narXiv:1607.06450 , 2016.\n"}, "hash": "8725918b517f262369e35c64890253ac35ff3288a099960b1cdbf4c975ce6b7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32841ff9-af49-4e58-83c1-066d55a40016", "node_type": "1", "metadata": {"window": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "original_text": "Neural machine translation by jointly\nlearning to align and translate. "}, "hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "class_name": "RelatedNodeInfo"}}, "hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. ", "start_char_idx": 27257, "end_char_idx": 27312, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32841ff9-af49-4e58-83c1-066d55a40016": {"__data__": {"id_": "32841ff9-af49-4e58-83c1-066d55a40016", "embedding": null, "metadata": {"window": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "original_text": "Neural machine translation by jointly\nlearning to align and translate. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58249c08-36cc-40e3-9abd-32ce14267cea", "node_type": "1", "metadata": {"window": "On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.  In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n", "original_text": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "dccb186938806f3071a4009c61c04e7ce58c71cacff0670453bbe366108da294", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c5b557d8-35d5-4c3b-871c-b2157fb942de", "node_type": "1", "metadata": {"window": "We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "original_text": "CoRR , abs/1409.0473, 2014.\n"}, "hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "class_name": "RelatedNodeInfo"}}, "hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "text": "Neural machine translation by jointly\nlearning to align and translate. ", "start_char_idx": 27312, "end_char_idx": 27383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c5b557d8-35d5-4c3b-871c-b2157fb942de": {"__data__": {"id_": "c5b557d8-35d5-4c3b-871c-b2157fb942de", "embedding": null, "metadata": {"window": "We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "original_text": "CoRR , abs/1409.0473, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32841ff9-af49-4e58-83c1-066d55a40016", "node_type": "1", "metadata": {"window": "In the former task our best\nmodel outperforms even all previously reported ensembles.\n We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "original_text": "Neural machine translation by jointly\nlearning to align and translate. "}, "hash": "33d3cadff4394eae05a4536da4bb536d6eb8020f2dc1f2836fb21c3aa0134ff3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ea97bfd-9f5c-461e-a5be-03be4d3de85c", "node_type": "1", "metadata": {"window": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n", "original_text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . "}, "hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "class_name": "RelatedNodeInfo"}}, "hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "text": "CoRR , abs/1409.0473, 2014.\n", "start_char_idx": 27383, "end_char_idx": 27411, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ea97bfd-9f5c-461e-a5be-03be4d3de85c": {"__data__": {"id_": "5ea97bfd-9f5c-461e-a5be-03be4d3de85c", "embedding": null, "metadata": {"window": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n", "original_text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c5b557d8-35d5-4c3b-871c-b2157fb942de", "node_type": "1", "metadata": {"window": "We are excited about the future of attention-based models and plan to apply them to other tasks.  We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "original_text": "CoRR , abs/1409.0473, 2014.\n"}, "hash": "c82324974f3d723b9734d4e254d70448d1a693338eab4d89b4fd614cb98484d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b9e6cc4-3a9d-4798-8bc3-f75e6a35386c", "node_type": "1", "metadata": {"window": "Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet. ", "original_text": "Le. "}, "hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "class_name": "RelatedNodeInfo"}}, "hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . ", "start_char_idx": 27411, "end_char_idx": 27471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b9e6cc4-3a9d-4798-8bc3-f75e6a35386c": {"__data__": {"id_": "8b9e6cc4-3a9d-4798-8bc3-f75e6a35386c", "embedding": null, "metadata": {"window": "Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet. ", "original_text": "Le. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ea97bfd-9f5c-461e-a5be-03be4d3de85c", "node_type": "1", "metadata": {"window": "We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to ef\ufb01ciently handle large inputs and outputs\nsuch as images, audio and video.  Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n", "original_text": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V . "}, "hash": "40cc5a74c9b96205b43ae910c6c5ca3ea7f192127db83336ff242a9c8cfa00ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b79efaa1-4ecd-4f4c-8502-8736c0aa2311", "node_type": "1", "metadata": {"window": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions. ", "original_text": "Massive exploration of neural\nmachine translation architectures. "}, "hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "class_name": "RelatedNodeInfo"}}, "hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "text": "Le. ", "start_char_idx": 27471, "end_char_idx": 27475, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b79efaa1-4ecd-4f4c-8502-8736c0aa2311": {"__data__": {"id_": "b79efaa1-4ecd-4f4c-8502-8736c0aa2311", "embedding": null, "metadata": {"window": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions. ", "original_text": "Massive exploration of neural\nmachine translation architectures. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b9e6cc4-3a9d-4798-8bc3-f75e6a35386c", "node_type": "1", "metadata": {"window": "Making generation less sequential is another research goals of ours.\n The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet. ", "original_text": "Le. "}, "hash": "4c452cf80d63277e26f7f5e47811502352cb8fbcf3842e6d02dccd6b6738e1cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0bc6ff8f-b568-413d-ae06-e14ff70fd289", "node_type": "1", "metadata": {"window": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n", "original_text": "CoRR , abs/1703.03906, 2017.\n"}, "hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "class_name": "RelatedNodeInfo"}}, "hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "text": "Massive exploration of neural\nmachine translation architectures. ", "start_char_idx": 27475, "end_char_idx": 27540, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bc6ff8f-b568-413d-ae06-e14ff70fd289": {"__data__": {"id_": "0bc6ff8f-b568-413d-ae06-e14ff70fd289", "embedding": null, "metadata": {"window": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n", "original_text": "CoRR , abs/1703.03906, 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b79efaa1-4ecd-4f4c-8502-8736c0aa2311", "node_type": "1", "metadata": {"window": "The code we used to train and evaluate our models is available at https://github.com/\ntensorflow/tensor2tensor .\n Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions. ", "original_text": "Massive exploration of neural\nmachine translation architectures. "}, "hash": "22621f55b19bb515cdf5ed6fb68442a150691b2c1628fce2aa49645e236d7847", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ebc10f4-6c0c-4cae-980c-e1040c454d84", "node_type": "1", "metadata": {"window": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. "}, "hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "class_name": "RelatedNodeInfo"}}, "hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "text": "CoRR , abs/1703.03906, 2017.\n", "start_char_idx": 27540, "end_char_idx": 27569, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ebc10f4-6c0c-4cae-980c-e1040c454d84": {"__data__": {"id_": "1ebc10f4-6c0c-4cae-980c-e1040c454d84", "embedding": null, "metadata": {"window": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0bc6ff8f-b568-413d-ae06-e14ff70fd289", "node_type": "1", "metadata": {"window": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitful\ncomments, corrections and inspiration.\n 9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n", "original_text": "CoRR , abs/1703.03906, 2017.\n"}, "hash": "21d2471eec46b98c6fa727e5c59e2f730acd77d13b1439f28792bf23e9ea0df5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "efbc3f05-df23-48f3-87c8-78a92a38f6a1", "node_type": "1", "metadata": {"window": "Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "original_text": "Long short-term memory-networks for machine\nreading. "}, "hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "class_name": "RelatedNodeInfo"}}, "hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. ", "start_char_idx": 27569, "end_char_idx": 27617, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "efbc3f05-df23-48f3-87c8-78a92a38f6a1": {"__data__": {"id_": "efbc3f05-df23-48f3-87c8-78a92a38f6a1", "embedding": null, "metadata": {"window": "Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "original_text": "Long short-term memory-networks for machine\nreading. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ebc10f4-6c0c-4cae-980c-e1040c454d84", "node_type": "1", "metadata": {"window": "9\n\nReferences\n[1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.  Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "original_text": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata. "}, "hash": "c18fa049b458d2bffb4450a4ebacd8286f99d3dc05a6f3f03ffa7dad6694481e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96b815cf-53ff-484e-a23e-e8336d192e5d", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n", "original_text": "arXiv preprint arXiv:1601.06733 , 2016.\n"}, "hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "class_name": "RelatedNodeInfo"}}, "hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "text": "Long short-term memory-networks for machine\nreading. ", "start_char_idx": 27617, "end_char_idx": 27670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96b815cf-53ff-484e-a23e-e8336d192e5d": {"__data__": {"id_": "96b815cf-53ff-484e-a23e-e8336d192e5d", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n", "original_text": "arXiv preprint arXiv:1601.06733 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "efbc3f05-df23-48f3-87c8-78a92a38f6a1", "node_type": "1", "metadata": {"window": "Layer normalization.  arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "original_text": "Long short-term memory-networks for machine\nreading. "}, "hash": "8ff3b3214614d19ee37750b959d3292840bcffe4f929375649ddc640cb426f06", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "903fc95c-42a2-4ffb-b6b7-123f0819423f", "node_type": "1", "metadata": {"window": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "original_text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. "}, "hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "class_name": "RelatedNodeInfo"}}, "hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "text": "arXiv preprint arXiv:1601.06733 , 2016.\n", "start_char_idx": 27670, "end_char_idx": 27710, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "903fc95c-42a2-4ffb-b6b7-123f0819423f": {"__data__": {"id_": "903fc95c-42a2-4ffb-b6b7-123f0819423f", "embedding": null, "metadata": {"window": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "original_text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96b815cf-53ff-484e-a23e-e8336d192e5d", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1607.06450 , 2016.\n [2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n", "original_text": "arXiv preprint arXiv:1601.06733 , 2016.\n"}, "hash": "d4287a74ac6d44290f1c25ee1408307be142e3ff5b41f23a09c7162a97992e46", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "566c622d-d1db-49d1-9597-ba8c6c633f17", "node_type": "1", "metadata": {"window": "Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning. ", "original_text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. "}, "hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "class_name": "RelatedNodeInfo"}}, "hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. ", "start_char_idx": 27710, "end_char_idx": 27818, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "566c622d-d1db-49d1-9597-ba8c6c633f17": {"__data__": {"id_": "566c622d-d1db-49d1-9597-ba8c6c633f17", "embedding": null, "metadata": {"window": "Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning. ", "original_text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "903fc95c-42a2-4ffb-b6b7-123f0819423f", "node_type": "1", "metadata": {"window": "[2]Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.  Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "original_text": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio. "}, "hash": "169903fa717aac56de3cfad7af01f5c06a886e20b273e73e1b39e1f59ea9de7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "796f812d-43fd-442b-b29f-cf087278580b", "node_type": "1", "metadata": {"window": "CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n", "original_text": "CoRR , abs/1406.1078, 2014.\n"}, "hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "class_name": "RelatedNodeInfo"}}, "hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. ", "start_char_idx": 27818, "end_char_idx": 27913, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "796f812d-43fd-442b-b29f-cf087278580b": {"__data__": {"id_": "796f812d-43fd-442b-b29f-cf087278580b", "embedding": null, "metadata": {"window": "CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n", "original_text": "CoRR , abs/1406.1078, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "566c622d-d1db-49d1-9597-ba8c6c633f17", "node_type": "1", "metadata": {"window": "Neural machine translation by jointly\nlearning to align and translate.  CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning. ", "original_text": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation. "}, "hash": "3bc2c3a41c34e56911d1645926085206c6f923e923013fa9a69489905e3ca7a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f118735f-16f9-4ef0-a909-e5917c64d0f2", "node_type": "1", "metadata": {"window": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves. ", "original_text": "[6]Francois Chollet. "}, "hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "class_name": "RelatedNodeInfo"}}, "hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "text": "CoRR , abs/1406.1078, 2014.\n", "start_char_idx": 27913, "end_char_idx": 27941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f118735f-16f9-4ef0-a909-e5917c64d0f2": {"__data__": {"id_": "f118735f-16f9-4ef0-a909-e5917c64d0f2", "embedding": null, "metadata": {"window": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves. ", "original_text": "[6]Francois Chollet. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "796f812d-43fd-442b-b29f-cf087278580b", "node_type": "1", "metadata": {"window": "CoRR , abs/1409.0473, 2014.\n [3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n", "original_text": "CoRR , abs/1406.1078, 2014.\n"}, "hash": "8ee35317c37a3aca1071e169e0aae0183a7c213521d03874e89ac9c06daa0391", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91087365-5115-420a-807f-1689d70ac107", "node_type": "1", "metadata": {"window": "Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks. ", "original_text": "Xception: Deep learning with depthwise separable convolutions. "}, "hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "class_name": "RelatedNodeInfo"}}, "hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "text": "[6]Francois Chollet. ", "start_char_idx": 27941, "end_char_idx": 27962, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91087365-5115-420a-807f-1689d70ac107": {"__data__": {"id_": "91087365-5115-420a-807f-1689d70ac107", "embedding": null, "metadata": {"window": "Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks. ", "original_text": "Xception: Deep learning with depthwise separable convolutions. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f118735f-16f9-4ef0-a909-e5917c64d0f2", "node_type": "1", "metadata": {"window": "[3]Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V .  Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves. ", "original_text": "[6]Francois Chollet. "}, "hash": "dd0e470d061cc48607ffd608582d4355c9396ee270eee05220f8db4dc75fe249", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ca29f0d-e9cb-46f9-a0c1-8084a3b1ec90", "node_type": "1", "metadata": {"window": "Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n", "original_text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n"}, "hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "class_name": "RelatedNodeInfo"}}, "hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "text": "Xception: Deep learning with depthwise separable convolutions. ", "start_char_idx": 27962, "end_char_idx": 28025, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ca29f0d-e9cb-46f9-a0c1-8084a3b1ec90": {"__data__": {"id_": "6ca29f0d-e9cb-46f9-a0c1-8084a3b1ec90", "embedding": null, "metadata": {"window": "Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n", "original_text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91087365-5115-420a-807f-1689d70ac107", "node_type": "1", "metadata": {"window": "Le.  Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks. ", "original_text": "Xception: Deep learning with depthwise separable convolutions. "}, "hash": "f3e42ea7dbc6bdf1e09332d5cd0a7704fb2019fb4bc40e1a7ad41880ff2484d5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3054f9d2-7736-49b1-a747-6fdbe08339f8", "node_type": "1", "metadata": {"window": "CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "original_text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "class_name": "RelatedNodeInfo"}}, "hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n", "start_char_idx": 28025, "end_char_idx": 28065, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3054f9d2-7736-49b1-a747-6fdbe08339f8": {"__data__": {"id_": "3054f9d2-7736-49b1-a747-6fdbe08339f8", "embedding": null, "metadata": {"window": "CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "original_text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ca29f0d-e9cb-46f9-a0c1-8084a3b1ec90", "node_type": "1", "metadata": {"window": "Massive exploration of neural\nmachine translation architectures.  CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n", "original_text": "arXiv\npreprint arXiv:1610.02357 , 2016.\n"}, "hash": "c1fd83125529749d1c9f1600df8888f3eb01ae66d4f041c0873560a95c0beae5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4b9cdd1d-f777-431e-82a8-eed130d2caa8", "node_type": "1", "metadata": {"window": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition. ", "original_text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. "}, "hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "class_name": "RelatedNodeInfo"}}, "hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. ", "start_char_idx": 28065, "end_char_idx": 28135, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4b9cdd1d-f777-431e-82a8-eed130d2caa8": {"__data__": {"id_": "4b9cdd1d-f777-431e-82a8-eed130d2caa8", "embedding": null, "metadata": {"window": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition. ", "original_text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3054f9d2-7736-49b1-a747-6fdbe08339f8", "node_type": "1", "metadata": {"window": "CoRR , abs/1703.03906, 2017.\n [4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "original_text": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio. "}, "hash": "ffd77b09dfb999b184e0fa9a59f847db32916e0a0a7829d5c6071b63a16c2c7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5b6db37e-3aae-4ce8-b20b-11a8e400b7df", "node_type": "1", "metadata": {"window": "Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "original_text": "CoRR , abs/1412.3555, 2014.\n"}, "hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "class_name": "RelatedNodeInfo"}}, "hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. ", "start_char_idx": 28135, "end_char_idx": 28213, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5b6db37e-3aae-4ce8-b20b-11a8e400b7df": {"__data__": {"id_": "5b6db37e-3aae-4ce8-b20b-11a8e400b7df", "embedding": null, "metadata": {"window": "Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "original_text": "CoRR , abs/1412.3555, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4b9cdd1d-f777-431e-82a8-eed130d2caa8", "node_type": "1", "metadata": {"window": "[4]Jianpeng Cheng, Li Dong, and Mirella Lapata.  Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition. ", "original_text": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling. "}, "hash": "4b5056c2b5612860fb2d6db49a0abfb833939ec018a776fe01d740e558f989fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b348f5de-0262-423c-8206-ba3dcb4403ea", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "original_text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. "}, "hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "class_name": "RelatedNodeInfo"}}, "hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "text": "CoRR , abs/1412.3555, 2014.\n", "start_char_idx": 28213, "end_char_idx": 28241, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b348f5de-0262-423c-8206-ba3dcb4403ea": {"__data__": {"id_": "b348f5de-0262-423c-8206-ba3dcb4403ea", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "original_text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5b6db37e-3aae-4ce8-b20b-11a8e400b7df", "node_type": "1", "metadata": {"window": "Long short-term memory-networks for machine\nreading.  arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "original_text": "CoRR , abs/1412.3555, 2014.\n"}, "hash": "5092f2678713e7180e9afce45371f0f0bc27a008293b8c1a7b2fa62aba13c09b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd593679-5aa2-4395-a772-f4e0368236b4", "node_type": "1", "metadata": {"window": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "original_text": "Convolu-\ntional sequence to sequence learning. "}, "hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "class_name": "RelatedNodeInfo"}}, "hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. ", "start_char_idx": 28241, "end_char_idx": 28324, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd593679-5aa2-4395-a772-f4e0368236b4": {"__data__": {"id_": "bd593679-5aa2-4395-a772-f4e0368236b4", "embedding": null, "metadata": {"window": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "original_text": "Convolu-\ntional sequence to sequence learning. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b348f5de-0262-423c-8206-ba3dcb4403ea", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1601.06733 , 2016.\n [5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "original_text": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. "}, "hash": "01fd41109d2ace60f4b30347d8500e0a54df7111d97d4a9951969318b3296b9d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "07015ea2-ec4f-4285-a40f-390d45c659d6", "node_type": "1", "metadata": {"window": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "original_text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n"}, "hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "class_name": "RelatedNodeInfo"}}, "hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "text": "Convolu-\ntional sequence to sequence learning. ", "start_char_idx": 28324, "end_char_idx": 28371, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "07015ea2-ec4f-4285-a40f-390d45c659d6": {"__data__": {"id_": "07015ea2-ec4f-4285-a40f-390d45c659d6", "embedding": null, "metadata": {"window": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "original_text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd593679-5aa2-4395-a772-f4e0368236b4", "node_type": "1", "metadata": {"window": "[5]Kyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk,\nand Yoshua Bengio.  Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "original_text": "Convolu-\ntional sequence to sequence learning. "}, "hash": "d3488b928d79489f7ad2a3db974e898f91b84b14d6ea5a07819f590d913cb9d4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "363a39c0-f95f-49fa-9ff3-7bf4903a040d", "node_type": "1", "metadata": {"window": "CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory. ", "original_text": "[9]Alex Graves. "}, "hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "class_name": "RelatedNodeInfo"}}, "hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n", "start_char_idx": 28371, "end_char_idx": 28413, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "363a39c0-f95f-49fa-9ff3-7bf4903a040d": {"__data__": {"id_": "363a39c0-f95f-49fa-9ff3-7bf4903a040d", "embedding": null, "metadata": {"window": "CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory. ", "original_text": "[9]Alex Graves. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "07015ea2-ec4f-4285-a40f-390d45c659d6", "node_type": "1", "metadata": {"window": "Learning phrase representations using rnn encoder-decoder for statistical\nmachine translation.  CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "original_text": "arXiv preprint arXiv:1705.03122v2 , 2017.\n"}, "hash": "b5a12acf0c426dd7bd853c90f836ea509be13fc0cbbe8d60c259759ef07ab8e3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e01dab66-dee6-404b-8105-02867e5d2d27", "node_type": "1", "metadata": {"window": "[6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n", "original_text": "Generating sequences with recurrent neural networks. "}, "hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "class_name": "RelatedNodeInfo"}}, "hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "text": "[9]Alex Graves. ", "start_char_idx": 28413, "end_char_idx": 28429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e01dab66-dee6-404b-8105-02867e5d2d27": {"__data__": {"id_": "e01dab66-dee6-404b-8105-02867e5d2d27", "embedding": null, "metadata": {"window": "[6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n", "original_text": "Generating sequences with recurrent neural networks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "363a39c0-f95f-49fa-9ff3-7bf4903a040d", "node_type": "1", "metadata": {"window": "CoRR , abs/1406.1078, 2014.\n [6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory. ", "original_text": "[9]Alex Graves. "}, "hash": "82e97967d048629c1ac23193bb98f94fcb93e5c5d09a53fc74b6d012def65633", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4997469-cbc7-48a7-b252-1b8cb0f335ca", "node_type": "1", "metadata": {"window": "Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "original_text": "arXiv preprint\narXiv:1308.0850 , 2013.\n"}, "hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "class_name": "RelatedNodeInfo"}}, "hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "text": "Generating sequences with recurrent neural networks. ", "start_char_idx": 28429, "end_char_idx": 28482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4997469-cbc7-48a7-b252-1b8cb0f335ca": {"__data__": {"id_": "a4997469-cbc7-48a7-b252-1b8cb0f335ca", "embedding": null, "metadata": {"window": "Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "original_text": "arXiv preprint\narXiv:1308.0850 , 2013.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e01dab66-dee6-404b-8105-02867e5d2d27", "node_type": "1", "metadata": {"window": "[6]Francois Chollet.  Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n", "original_text": "Generating sequences with recurrent neural networks. "}, "hash": "e2656cbe7df81d33833d3f583ded112bb7196eec641c1f1429655811cff9bf4d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8228eedd-e008-4c59-b16a-dd4c1240a9db", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling. ", "original_text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. "}, "hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "class_name": "RelatedNodeInfo"}}, "hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "text": "arXiv preprint\narXiv:1308.0850 , 2013.\n", "start_char_idx": 28482, "end_char_idx": 28521, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8228eedd-e008-4c59-b16a-dd4c1240a9db": {"__data__": {"id_": "8228eedd-e008-4c59-b16a-dd4c1240a9db", "embedding": null, "metadata": {"window": "arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling. ", "original_text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4997469-cbc7-48a7-b252-1b8cb0f335ca", "node_type": "1", "metadata": {"window": "Xception: Deep learning with depthwise separable convolutions.  arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "original_text": "arXiv preprint\narXiv:1308.0850 , 2013.\n"}, "hash": "7ed48550e251e20bdf137f7fa80840904c094b543b964d8c8c50cc53385d2fff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "adda93e6-d5cb-4388-9231-18fe3b7c5697", "node_type": "1", "metadata": {"window": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n", "original_text": "Deep residual learning for im-\nage recognition. "}, "hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "class_name": "RelatedNodeInfo"}}, "hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. ", "start_char_idx": 28521, "end_char_idx": 28581, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "adda93e6-d5cb-4388-9231-18fe3b7c5697": {"__data__": {"id_": "adda93e6-d5cb-4388-9231-18fe3b7c5697", "embedding": null, "metadata": {"window": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n", "original_text": "Deep residual learning for im-\nage recognition. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8228eedd-e008-4c59-b16a-dd4c1240a9db", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1610.02357 , 2016.\n [7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling. ", "original_text": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. "}, "hash": "e4c2030a579de92a53c111aae01893f7ff70d59904371cf1062fca237c76ac56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d4dfcb6a-442a-47b2-9419-5d71029e90f9", "node_type": "1", "metadata": {"window": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever. ", "original_text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n"}, "hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "class_name": "RelatedNodeInfo"}}, "hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "text": "Deep residual learning for im-\nage recognition. ", "start_char_idx": 28581, "end_char_idx": 28629, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d4dfcb6a-442a-47b2-9419-5d71029e90f9": {"__data__": {"id_": "d4dfcb6a-442a-47b2-9419-5d71029e90f9", "embedding": null, "metadata": {"window": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever. ", "original_text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "adda93e6-d5cb-4388-9231-18fe3b7c5697", "node_type": "1", "metadata": {"window": "[7]Junyoung Chung, \u00c7aglar G\u00fcl\u00e7ehre, Kyunghyun Cho, and Yoshua Bengio.  Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n", "original_text": "Deep residual learning for im-\nage recognition. "}, "hash": "1cabd403ff4500906307dbdc850b2c46ae0b2a0f11909680f2537818d057b532", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7081695e-8595-4c10-a14c-f1da2cd9233c", "node_type": "1", "metadata": {"window": "CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms. ", "original_text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. "}, "hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "class_name": "RelatedNodeInfo"}}, "hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n", "start_char_idx": 28629, "end_char_idx": 28733, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7081695e-8595-4c10-a14c-f1da2cd9233c": {"__data__": {"id_": "7081695e-8595-4c10-a14c-f1da2cd9233c", "embedding": null, "metadata": {"window": "CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms. ", "original_text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d4dfcb6a-442a-47b2-9419-5d71029e90f9", "node_type": "1", "metadata": {"window": "Empirical evaluation\nof gated recurrent neural networks on sequence modeling.  CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever. ", "original_text": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n"}, "hash": "a404023ed4b5ce64998a194575b382df36e970b227c33e1071d58c8123cb5926", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4432497f-92b4-4e61-8659-d0a39c496275", "node_type": "1", "metadata": {"window": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n", "original_text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n"}, "hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "class_name": "RelatedNodeInfo"}}, "hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. ", "start_char_idx": 28733, "end_char_idx": 28810, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4432497f-92b4-4e61-8659-d0a39c496275": {"__data__": {"id_": "4432497f-92b4-4e61-8659-d0a39c496275", "embedding": null, "metadata": {"window": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n", "original_text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7081695e-8595-4c10-a14c-f1da2cd9233c", "node_type": "1", "metadata": {"window": "CoRR , abs/1412.3555, 2014.\n [8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms. ", "original_text": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber. "}, "hash": "88f6a353bc55c497dcc7f686b0648de6e49d7b54326717729cfcaacfeb6536fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a2e34b43-2d9d-4707-8ef8-35f2ec8c9457", "node_type": "1", "metadata": {"window": "Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "original_text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. "}, "hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "class_name": "RelatedNodeInfo"}}, "hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n", "start_char_idx": 28810, "end_char_idx": 28898, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2e34b43-2d9d-4707-8ef8-35f2ec8c9457": {"__data__": {"id_": "a2e34b43-2d9d-4707-8ef8-35f2ec8c9457", "embedding": null, "metadata": {"window": "Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "original_text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4432497f-92b4-4e61-8659-d0a39c496275", "node_type": "1", "metadata": {"window": "[8]Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.  Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n", "original_text": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n"}, "hash": "d781bee53a67270a632a72876e073a37aaef3d2df02e4c83cec416fcbcdc4649", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dde8d362-146a-4023-8775-600fa0bb6ae6", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time. ", "original_text": "Long short-term memory. "}, "hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "class_name": "RelatedNodeInfo"}}, "hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. ", "start_char_idx": 28898, "end_char_idx": 28943, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dde8d362-146a-4023-8775-600fa0bb6ae6": {"__data__": {"id_": "dde8d362-146a-4023-8775-600fa0bb6ae6", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time. ", "original_text": "Long short-term memory. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a2e34b43-2d9d-4707-8ef8-35f2ec8c9457", "node_type": "1", "metadata": {"window": "Convolu-\ntional sequence to sequence learning.  arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "original_text": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber. "}, "hash": "795355719d9b0fdae581ee7442974e32702b168b843b8c63ffce735ff8ba22b5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5a4dbdf-a7be-47c7-bae9-e58e3e8e8ed1", "node_type": "1", "metadata": {"window": "[9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "original_text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n"}, "hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "class_name": "RelatedNodeInfo"}}, "hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "text": "Long short-term memory. ", "start_char_idx": 28943, "end_char_idx": 28967, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5a4dbdf-a7be-47c7-bae9-e58e3e8e8ed1": {"__data__": {"id_": "f5a4dbdf-a7be-47c7-bae9-e58e3e8e8ed1", "embedding": null, "metadata": {"window": "[9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "original_text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dde8d362-146a-4023-8775-600fa0bb6ae6", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.03122v2 , 2017.\n [9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time. ", "original_text": "Long short-term memory. "}, "hash": "a0f321df2b901ed5d730e9b62ed5d425b1f801a8ad6590477f3de2cebf42ae2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "509f8b9b-c228-4002-b5d0-6111bcfedfc8", "node_type": "1", "metadata": {"window": "Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "original_text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. "}, "hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "class_name": "RelatedNodeInfo"}}, "hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n", "start_char_idx": 28967, "end_char_idx": 29010, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "509f8b9b-c228-4002-b5d0-6111bcfedfc8": {"__data__": {"id_": "509f8b9b-c228-4002-b5d0-6111bcfedfc8", "embedding": null, "metadata": {"window": "Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "original_text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5a4dbdf-a7be-47c7-bae9-e58e3e8e8ed1", "node_type": "1", "metadata": {"window": "[9]Alex Graves.  Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "original_text": "Neural computation ,\n9(8):1735\u20131780, 1997.\n"}, "hash": "50222a420294ec3a3a69ac06951ef2efacd9b7d3ee5560aa0769bc5d29c1309e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3dbd88c1-bde1-4415-83f5-c2d1152f0418", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n", "original_text": "Exploring\nthe limits of language modeling. "}, "hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "class_name": "RelatedNodeInfo"}}, "hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. ", "start_char_idx": 29010, "end_char_idx": 29093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3dbd88c1-bde1-4415-83f5-c2d1152f0418": {"__data__": {"id_": "3dbd88c1-bde1-4415-83f5-c2d1152f0418", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n", "original_text": "Exploring\nthe limits of language modeling. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "509f8b9b-c228-4002-b5d0-6111bcfedfc8", "node_type": "1", "metadata": {"window": "Generating sequences with recurrent neural networks.  arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "original_text": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. "}, "hash": "5a52d267d11b1de47c4d527e0f79babf8a2c48cc7e8d11029e26317356feccd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93394fe7-8570-4e49-ba01-9bfacf663170", "node_type": "1", "metadata": {"window": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n", "original_text": "arXiv preprint arXiv:1602.02410 , 2016.\n"}, "hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "class_name": "RelatedNodeInfo"}}, "hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "text": "Exploring\nthe limits of language modeling. ", "start_char_idx": 29093, "end_char_idx": 29136, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93394fe7-8570-4e49-ba01-9bfacf663170": {"__data__": {"id_": "93394fe7-8570-4e49-ba01-9bfacf663170", "embedding": null, "metadata": {"window": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n", "original_text": "arXiv preprint arXiv:1602.02410 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3dbd88c1-bde1-4415-83f5-c2d1152f0418", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1308.0850 , 2013.\n [10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n", "original_text": "Exploring\nthe limits of language modeling. "}, "hash": "460bf525d21d1216760ce2fcb57f7d6a37fcd5b303a649248c8d0a49524c338c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b1647d6b-33cd-4b05-b5d0-c36b7a3660bd", "node_type": "1", "metadata": {"window": "Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba. ", "original_text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. "}, "hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "class_name": "RelatedNodeInfo"}}, "hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "text": "arXiv preprint arXiv:1602.02410 , 2016.\n", "start_char_idx": 29136, "end_char_idx": 29176, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b1647d6b-33cd-4b05-b5d0-c36b7a3660bd": {"__data__": {"id_": "b1647d6b-33cd-4b05-b5d0-c36b7a3660bd", "embedding": null, "metadata": {"window": "Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba. ", "original_text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93394fe7-8570-4e49-ba01-9bfacf663170", "node_type": "1", "metadata": {"window": "[10] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.  Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n", "original_text": "arXiv preprint arXiv:1602.02410 , 2016.\n"}, "hash": "8c2079623ca110c8c0dc8abf494a5d03e05cd2239fb3e7a2ab27a1613b924e22", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c88b8339-c723-415b-add3-57ab3c893cdc", "node_type": "1", "metadata": {"window": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization. ", "original_text": "Neural GPUs learn algorithms. "}, "hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "class_name": "RelatedNodeInfo"}}, "hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. ", "start_char_idx": 29176, "end_char_idx": 29215, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c88b8339-c723-415b-add3-57ab3c893cdc": {"__data__": {"id_": "c88b8339-c723-415b-add3-57ab3c893cdc", "embedding": null, "metadata": {"window": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization. ", "original_text": "Neural GPUs learn algorithms. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1647d6b-33cd-4b05-b5d0-c36b7a3660bd", "node_type": "1", "metadata": {"window": "Deep residual learning for im-\nage recognition.  In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba. ", "original_text": "[14] \u0141ukasz Kaiser and Ilya Sutskever. "}, "hash": "09765487c107ec6afee4e664e9c982f7c5792185f002032ec8f951501bb7abb7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05ed8a38-2c7d-4a07-85c0-5124a1467b49", "node_type": "1", "metadata": {"window": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n", "original_text": "In International Conference\non Learning Representations (ICLR) , 2016.\n"}, "hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "class_name": "RelatedNodeInfo"}}, "hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "text": "Neural GPUs learn algorithms. ", "start_char_idx": 29215, "end_char_idx": 29245, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05ed8a38-2c7d-4a07-85c0-5124a1467b49": {"__data__": {"id_": "05ed8a38-2c7d-4a07-85c0-5124a1467b49", "embedding": null, "metadata": {"window": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n", "original_text": "In International Conference\non Learning Representations (ICLR) , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c88b8339-c723-415b-add3-57ab3c893cdc", "node_type": "1", "metadata": {"window": "In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition , pages 770\u2013778, 2016.\n [11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization. ", "original_text": "Neural GPUs learn algorithms. "}, "hash": "06f67c475f7b7bb138cd6a776cda45ebf4836079f04f5ebfa7d99ec2bf0f2cd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "179e2c34-7920-47bb-a1aa-97a738860b99", "node_type": "1", "metadata": {"window": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg. ", "original_text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. "}, "hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "class_name": "RelatedNodeInfo"}}, "hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "text": "In International Conference\non Learning Representations (ICLR) , 2016.\n", "start_char_idx": 29245, "end_char_idx": 29316, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "179e2c34-7920-47bb-a1aa-97a738860b99": {"__data__": {"id_": "179e2c34-7920-47bb-a1aa-97a738860b99", "embedding": null, "metadata": {"window": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg. ", "original_text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05ed8a38-2c7d-4a07-85c0-5124a1467b49", "node_type": "1", "metadata": {"window": "[11] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and J\u00fcrgen Schmidhuber.  Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n", "original_text": "In International Conference\non Learning Representations (ICLR) , 2016.\n"}, "hash": "92e7925e91d774dec22eb833f4d51f61cd85fea969a49ce836d6a992a38d7f12", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5ddee1a2-baa9-4f30-9e21-7871ae5974c3", "node_type": "1", "metadata": {"window": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks. ", "original_text": "Neural machine translation in linear time. "}, "hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "class_name": "RelatedNodeInfo"}}, "hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. ", "start_char_idx": 29316, "end_char_idx": 29429, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5ddee1a2-baa9-4f30-9e21-7871ae5974c3": {"__data__": {"id_": "5ddee1a2-baa9-4f30-9e21-7871ae5974c3", "embedding": null, "metadata": {"window": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks. ", "original_text": "Neural machine translation in linear time. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "179e2c34-7920-47bb-a1aa-97a738860b99", "node_type": "1", "metadata": {"window": "Gradient \ufb02ow in\nrecurrent nets: the dif\ufb01culty of learning long-term dependencies, 2001.\n [12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg. ", "original_text": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu. "}, "hash": "a2f9fbaf86608c53a072c97123e6337f863b77e2137b058fd4f3a520545407de", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83d7f8f4-e6cf-4e3b-b57a-4a83243606cc", "node_type": "1", "metadata": {"window": "Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n", "original_text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n"}, "hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "class_name": "RelatedNodeInfo"}}, "hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "text": "Neural machine translation in linear time. ", "start_char_idx": 29429, "end_char_idx": 29472, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83d7f8f4-e6cf-4e3b-b57a-4a83243606cc": {"__data__": {"id_": "83d7f8f4-e6cf-4e3b-b57a-4a83243606cc", "embedding": null, "metadata": {"window": "Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n", "original_text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5ddee1a2-baa9-4f30-9e21-7871ae5974c3", "node_type": "1", "metadata": {"window": "[12] Sepp Hochreiter and J\u00fcrgen Schmidhuber.  Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks. ", "original_text": "Neural machine translation in linear time. "}, "hash": "3d9950ff4ef538e829524dd8c95fa1b1d0417048c3a14fed629b686b3aaa2639", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e8496b95-dd64-4ae7-b25c-ddfaac52e72a", "node_type": "1", "metadata": {"window": "Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "original_text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. "}, "hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "class_name": "RelatedNodeInfo"}}, "hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n", "start_char_idx": 29472, "end_char_idx": 29514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e8496b95-dd64-4ae7-b25c-ddfaac52e72a": {"__data__": {"id_": "e8496b95-dd64-4ae7-b25c-ddfaac52e72a", "embedding": null, "metadata": {"window": "Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "original_text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83d7f8f4-e6cf-4e3b-b57a-4a83243606cc", "node_type": "1", "metadata": {"window": "Long short-term memory.  Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n", "original_text": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n"}, "hash": "b5fff022a789043db00a7c597d4cfb23b099ec9a53ac594242cda41ba4a5c308", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58ad677d-1799-4e0a-9055-2683830c16a9", "node_type": "1", "metadata": {"window": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding. ", "original_text": "Structured attention networks.\n"}, "hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "class_name": "RelatedNodeInfo"}}, "hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. ", "start_char_idx": 29514, "end_char_idx": 29578, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58ad677d-1799-4e0a-9055-2683830c16a9": {"__data__": {"id_": "58ad677d-1799-4e0a-9055-2683830c16a9", "embedding": null, "metadata": {"window": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding. ", "original_text": "Structured attention networks.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8496b95-dd64-4ae7-b25c-ddfaac52e72a", "node_type": "1", "metadata": {"window": "Neural computation ,\n9(8):1735\u20131780, 1997.\n [13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "original_text": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. "}, "hash": "7b9ed686ac1958b34112925d9b9c8e40f6d65f338421c1e99817240783908aff", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6ab00fb3-1f30-4d3b-a37c-30e649ad80df", "node_type": "1", "metadata": {"window": "Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n", "original_text": "InInternational Conference on Learning Representations , 2017.\n"}, "hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "class_name": "RelatedNodeInfo"}}, "hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "text": "Structured attention networks.\n", "start_char_idx": 29578, "end_char_idx": 29609, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6ab00fb3-1f30-4d3b-a37c-30e649ad80df": {"__data__": {"id_": "6ab00fb3-1f30-4d3b-a37c-30e649ad80df", "embedding": null, "metadata": {"window": "Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n", "original_text": "InInternational Conference on Learning Representations , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58ad677d-1799-4e0a-9055-2683830c16a9", "node_type": "1", "metadata": {"window": "[13] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.  Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding. ", "original_text": "Structured attention networks.\n"}, "hash": "117f5543113803601ffeb7317aa53892402537a1cedaef7ecf7044236266c224", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e2b0ac5-fde9-45f1-b9d1-2e4283f0d0fb", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser. ", "original_text": "[17] Diederik Kingma and Jimmy Ba. "}, "hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "class_name": "RelatedNodeInfo"}}, "hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "text": "InInternational Conference on Learning Representations , 2017.\n", "start_char_idx": 29609, "end_char_idx": 29672, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e2b0ac5-fde9-45f1-b9d1-2e4283f0d0fb": {"__data__": {"id_": "9e2b0ac5-fde9-45f1-b9d1-2e4283f0d0fb", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser. ", "original_text": "[17] Diederik Kingma and Jimmy Ba. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6ab00fb3-1f30-4d3b-a37c-30e649ad80df", "node_type": "1", "metadata": {"window": "Exploring\nthe limits of language modeling.  arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n", "original_text": "InInternational Conference on Learning Representations , 2017.\n"}, "hash": "e5587c14bb1c785f0cd2c5b001841fdec1d13a332c7b8c16b9cf7468a6beefdb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "968c7d14-dda0-47a5-9495-5872c4a83f85", "node_type": "1", "metadata": {"window": "[14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention? ", "original_text": "Adam: A method for stochastic optimization. "}, "hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "class_name": "RelatedNodeInfo"}}, "hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "text": "[17] Diederik Kingma and Jimmy Ba. ", "start_char_idx": 29672, "end_char_idx": 29707, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "968c7d14-dda0-47a5-9495-5872c4a83f85": {"__data__": {"id_": "968c7d14-dda0-47a5-9495-5872c4a83f85", "embedding": null, "metadata": {"window": "[14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention? ", "original_text": "Adam: A method for stochastic optimization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9e2b0ac5-fde9-45f1-b9d1-2e4283f0d0fb", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1602.02410 , 2016.\n [14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser. ", "original_text": "[17] Diederik Kingma and Jimmy Ba. "}, "hash": "5f21b5ade964b29b9ce2f5aca55165da4dd427b284835e15ef0cb1286949f625", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc5506e2-2579-4862-bbbd-99ec11eee537", "node_type": "1", "metadata": {"window": "Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "original_text": "In ICLR , 2015.\n"}, "hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "class_name": "RelatedNodeInfo"}}, "hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "text": "Adam: A method for stochastic optimization. ", "start_char_idx": 29707, "end_char_idx": 29751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc5506e2-2579-4862-bbbd-99ec11eee537": {"__data__": {"id_": "fc5506e2-2579-4862-bbbd-99ec11eee537", "embedding": null, "metadata": {"window": "Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "original_text": "In ICLR , 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "968c7d14-dda0-47a5-9495-5872c4a83f85", "node_type": "1", "metadata": {"window": "[14] \u0141ukasz Kaiser and Ilya Sutskever.  Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention? ", "original_text": "Adam: A method for stochastic optimization. "}, "hash": "573d09428f2a5e0bb3151fe3793940ec4b67f55902d8bc1fb8f72a4393ead003", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "163b3f41-e986-4472-8f5c-170797f5b5c3", "node_type": "1", "metadata": {"window": "In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "original_text": "[18] Oleksii Kuchaiev and Boris Ginsburg. "}, "hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "class_name": "RelatedNodeInfo"}}, "hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "text": "In ICLR , 2015.\n", "start_char_idx": 29751, "end_char_idx": 29767, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "163b3f41-e986-4472-8f5c-170797f5b5c3": {"__data__": {"id_": "163b3f41-e986-4472-8f5c-170797f5b5c3", "embedding": null, "metadata": {"window": "In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "original_text": "[18] Oleksii Kuchaiev and Boris Ginsburg. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc5506e2-2579-4862-bbbd-99ec11eee537", "node_type": "1", "metadata": {"window": "Neural GPUs learn algorithms.  In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "original_text": "In ICLR , 2015.\n"}, "hash": "94dd10c01f6046ee2838e1ddf05953be18bab415fddf874eea098a9da3d4589a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dd08a741-9b1b-4576-a801-5d576ba48d21", "node_type": "1", "metadata": {"window": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation. ", "original_text": "Factorization tricks for LSTM networks. "}, "hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "class_name": "RelatedNodeInfo"}}, "hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "text": "[18] Oleksii Kuchaiev and Boris Ginsburg. ", "start_char_idx": 29767, "end_char_idx": 29809, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dd08a741-9b1b-4576-a801-5d576ba48d21": {"__data__": {"id_": "dd08a741-9b1b-4576-a801-5d576ba48d21", "embedding": null, "metadata": {"window": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation. ", "original_text": "Factorization tricks for LSTM networks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "163b3f41-e986-4472-8f5c-170797f5b5c3", "node_type": "1", "metadata": {"window": "In International Conference\non Learning Representations (ICLR) , 2016.\n [15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "original_text": "[18] Oleksii Kuchaiev and Boris Ginsburg. "}, "hash": "8260d5eb48eab0d5dda988913650e66ac17e139e1afc9849a5bcf8c4cba21f3b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8be71a40-c790-482d-b524-2d56f44e0444", "node_type": "1", "metadata": {"window": "Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n", "original_text": "arXiv preprint\narXiv:1703.10722 , 2017.\n"}, "hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "class_name": "RelatedNodeInfo"}}, "hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "text": "Factorization tricks for LSTM networks. ", "start_char_idx": 29809, "end_char_idx": 29849, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8be71a40-c790-482d-b524-2d56f44e0444": {"__data__": {"id_": "8be71a40-c790-482d-b524-2d56f44e0444", "embedding": null, "metadata": {"window": "Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n", "original_text": "arXiv preprint\narXiv:1703.10722 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dd08a741-9b1b-4576-a801-5d576ba48d21", "node_type": "1", "metadata": {"window": "[15] Nal Kalchbrenner, Lasse Espeholt, Karen Simonyan, Aaron van den Oord, Alex Graves, and Ko-\nray Kavukcuoglu.  Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation. ", "original_text": "Factorization tricks for LSTM networks. "}, "hash": "cf09885299915b665c470af2d737028ab7760ad2ecf637dd60515e78e31ac1ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "57f96e43-9e41-4606-9219-d8876c44189b", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "original_text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. "}, "hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "class_name": "RelatedNodeInfo"}}, "hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "text": "arXiv preprint\narXiv:1703.10722 , 2017.\n", "start_char_idx": 29849, "end_char_idx": 29889, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57f96e43-9e41-4606-9219-d8876c44189b": {"__data__": {"id_": "57f96e43-9e41-4606-9219-d8876c44189b", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "original_text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8be71a40-c790-482d-b524-2d56f44e0444", "node_type": "1", "metadata": {"window": "Neural machine translation in linear time.  arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n", "original_text": "arXiv preprint\narXiv:1703.10722 , 2017.\n"}, "hash": "183ae038ffea3987704dd72a1671bf72fa7bb512bec53f5a7774e16d55c29ade", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d86f4ba7-3f3e-4452-a0f2-a8a96702710c", "node_type": "1", "metadata": {"window": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel. ", "original_text": "A structured self-attentive sentence embedding. "}, "hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "class_name": "RelatedNodeInfo"}}, "hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. ", "start_char_idx": 29889, "end_char_idx": 29998, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d86f4ba7-3f3e-4452-a0f2-a8a96702710c": {"__data__": {"id_": "d86f4ba7-3f3e-4452-a0f2-a8a96702710c", "embedding": null, "metadata": {"window": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel. ", "original_text": "A structured self-attentive sentence embedding. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "57f96e43-9e41-4606-9219-d8876c44189b", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1610.10099v2 ,\n2017.\n [16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "original_text": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio. "}, "hash": "246308e1099769cb013f963ceee06d7135feb3cf3e14ae7672192fa573871177", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78a62316-5fb4-40e0-932d-49ef6d1dd50d", "node_type": "1", "metadata": {"window": "Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n", "original_text": "arXiv preprint\narXiv:1703.03130 , 2017.\n"}, "hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "class_name": "RelatedNodeInfo"}}, "hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "text": "A structured self-attentive sentence embedding. ", "start_char_idx": 29998, "end_char_idx": 30046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78a62316-5fb4-40e0-932d-49ef6d1dd50d": {"__data__": {"id_": "78a62316-5fb4-40e0-932d-49ef6d1dd50d", "embedding": null, "metadata": {"window": "Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n", "original_text": "arXiv preprint\narXiv:1703.03130 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d86f4ba7-3f3e-4452-a0f2-a8a96702710c", "node_type": "1", "metadata": {"window": "[16] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.  Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel. ", "original_text": "A structured self-attentive sentence embedding. "}, "hash": "1180762e40df6f752a6e6b648f907675a50b530fe99a71000ffa2140bab60d7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d684ab6a-bf39-4287-b9f3-b35110c5e67d", "node_type": "1", "metadata": {"window": "InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "original_text": "[20] Samy Bengio \u0141ukasz Kaiser. "}, "hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "class_name": "RelatedNodeInfo"}}, "hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "text": "arXiv preprint\narXiv:1703.03130 , 2017.\n", "start_char_idx": 30046, "end_char_idx": 30086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d684ab6a-bf39-4287-b9f3-b35110c5e67d": {"__data__": {"id_": "d684ab6a-bf39-4287-b9f3-b35110c5e67d", "embedding": null, "metadata": {"window": "InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "original_text": "[20] Samy Bengio \u0141ukasz Kaiser. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "78a62316-5fb4-40e0-932d-49ef6d1dd50d", "node_type": "1", "metadata": {"window": "Structured attention networks.\n InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n", "original_text": "arXiv preprint\narXiv:1703.03130 , 2017.\n"}, "hash": "29d42d82ecd78869a85d7e01793b26b333b85d958f4ab4b3b681c5e6dad4b591", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2b42d31b-8e26-4af4-b621-620e7e8a7c23", "node_type": "1", "metadata": {"window": "[17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization. ", "original_text": "Can active memory replace attention? "}, "hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "class_name": "RelatedNodeInfo"}}, "hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "text": "[20] Samy Bengio \u0141ukasz Kaiser. ", "start_char_idx": 30086, "end_char_idx": 30118, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2b42d31b-8e26-4af4-b621-620e7e8a7c23": {"__data__": {"id_": "2b42d31b-8e26-4af4-b621-620e7e8a7c23", "embedding": null, "metadata": {"window": "[17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization. ", "original_text": "Can active memory replace attention? "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d684ab6a-bf39-4287-b9f3-b35110c5e67d", "node_type": "1", "metadata": {"window": "InInternational Conference on Learning Representations , 2017.\n [17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "original_text": "[20] Samy Bengio \u0141ukasz Kaiser. "}, "hash": "4deefae022c2cc3be3ae2061f68969c65bdc66557bff4273a3512b20cef09270", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b321aa2-2920-45e0-a4f1-d95f91c204aa", "node_type": "1", "metadata": {"window": "Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n", "original_text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n"}, "hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "class_name": "RelatedNodeInfo"}}, "hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "text": "Can active memory replace attention? ", "start_char_idx": 30118, "end_char_idx": 30155, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b321aa2-2920-45e0-a4f1-d95f91c204aa": {"__data__": {"id_": "8b321aa2-2920-45e0-a4f1-d95f91c204aa", "embedding": null, "metadata": {"window": "Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n", "original_text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2b42d31b-8e26-4af4-b621-620e7e8a7c23", "node_type": "1", "metadata": {"window": "[17] Diederik Kingma and Jimmy Ba.  Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization. ", "original_text": "Can active memory replace attention? "}, "hash": "018b7dcc4410f8227df3ae3a9c84912c8a94d30ac9d02239fad76d6ce69eb967", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "315320fd-bd2b-4a9f-92f5-7c51bbeb11b7", "node_type": "1", "metadata": {"window": "In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf. ", "original_text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. "}, "hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "class_name": "RelatedNodeInfo"}}, "hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n", "start_char_idx": 30155, "end_char_idx": 30224, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "315320fd-bd2b-4a9f-92f5-7c51bbeb11b7": {"__data__": {"id_": "315320fd-bd2b-4a9f-92f5-7c51bbeb11b7", "embedding": null, "metadata": {"window": "In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf. ", "original_text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b321aa2-2920-45e0-a4f1-d95f91c204aa", "node_type": "1", "metadata": {"window": "Adam: A method for stochastic optimization.  In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n", "original_text": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n"}, "hash": "486af60de8a4567e62e78f3df382c1019185f3c211a9707ad39039972427718e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9d85bc6e-6b1f-424c-92de-fffa207038f1", "node_type": "1", "metadata": {"window": "[18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models. ", "original_text": "Effective approaches to attention-\nbased neural machine translation. "}, "hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "class_name": "RelatedNodeInfo"}}, "hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. ", "start_char_idx": 30224, "end_char_idx": 30289, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d85bc6e-6b1f-424c-92de-fffa207038f1": {"__data__": {"id_": "9d85bc6e-6b1f-424c-92de-fffa207038f1", "embedding": null, "metadata": {"window": "[18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models. ", "original_text": "Effective approaches to attention-\nbased neural machine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "315320fd-bd2b-4a9f-92f5-7c51bbeb11b7", "node_type": "1", "metadata": {"window": "In ICLR , 2015.\n [18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf. ", "original_text": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. "}, "hash": "4f112800aeb916f4cac83e87e659f89b3fb0ca0a0e4aa24acd55217d40b87f38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32a28b6a-7988-40fa-9e26-cb891834466b", "node_type": "1", "metadata": {"window": "Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n", "original_text": "arXiv preprint arXiv:1508.04025 , 2015.\n"}, "hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "class_name": "RelatedNodeInfo"}}, "hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "text": "Effective approaches to attention-\nbased neural machine translation. ", "start_char_idx": 30289, "end_char_idx": 30358, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32a28b6a-7988-40fa-9e26-cb891834466b": {"__data__": {"id_": "32a28b6a-7988-40fa-9e26-cb891834466b", "embedding": null, "metadata": {"window": "Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n", "original_text": "arXiv preprint arXiv:1508.04025 , 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d85bc6e-6b1f-424c-92de-fffa207038f1", "node_type": "1", "metadata": {"window": "[18] Oleksii Kuchaiev and Boris Ginsburg.  Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models. ", "original_text": "Effective approaches to attention-\nbased neural machine translation. "}, "hash": "8f91c10261859501fd4cce6c161f3f8521c137af653443bb4faaaa735a42853f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6360555-1115-49a6-9d73-c9ca10018c2b", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "original_text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. "}, "hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "class_name": "RelatedNodeInfo"}}, "hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "text": "arXiv preprint arXiv:1508.04025 , 2015.\n", "start_char_idx": 30358, "end_char_idx": 30398, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6360555-1115-49a6-9d73-c9ca10018c2b": {"__data__": {"id_": "c6360555-1115-49a6-9d73-c9ca10018c2b", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "original_text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32a28b6a-7988-40fa-9e26-cb891834466b", "node_type": "1", "metadata": {"window": "Factorization tricks for LSTM networks.  arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n", "original_text": "arXiv preprint arXiv:1508.04025 , 2015.\n"}, "hash": "a81067f34db359a9585ae46f23bf2dfca91692d5a011632938017f0e4da62005", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b111868a-d451-4cab-ada9-ba83e75e81a1", "node_type": "1", "metadata": {"window": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units. ", "original_text": "A decomposable attention\nmodel. "}, "hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "class_name": "RelatedNodeInfo"}}, "hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. ", "start_char_idx": 30398, "end_char_idx": 30469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b111868a-d451-4cab-ada9-ba83e75e81a1": {"__data__": {"id_": "b111868a-d451-4cab-ada9-ba83e75e81a1", "embedding": null, "metadata": {"window": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units. ", "original_text": "A decomposable attention\nmodel. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6360555-1115-49a6-9d73-c9ca10018c2b", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.10722 , 2017.\n [19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "original_text": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit. "}, "hash": "7a35c690d7e56e46dcbed04496845407baa2f161fd691e9fa6be17f0e02bf695", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89b4dad0-d748-4791-b5e4-f2ee3e52ac72", "node_type": "1", "metadata": {"window": "A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n", "original_text": "In Empirical Methods in Natural Language Processing , 2016.\n"}, "hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "class_name": "RelatedNodeInfo"}}, "hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "text": "A decomposable attention\nmodel. ", "start_char_idx": 30469, "end_char_idx": 30501, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89b4dad0-d748-4791-b5e4-f2ee3e52ac72": {"__data__": {"id_": "89b4dad0-d748-4791-b5e4-f2ee3e52ac72", "embedding": null, "metadata": {"window": "A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n", "original_text": "In Empirical Methods in Natural Language Processing , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b111868a-d451-4cab-ada9-ba83e75e81a1", "node_type": "1", "metadata": {"window": "[19] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing Xiang, Bowen\nZhou, and Yoshua Bengio.  A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units. ", "original_text": "A decomposable attention\nmodel. "}, "hash": "404d5720fbe1a2f65be72624baaccdec18be98d11a506693b6899c24699a9579", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dc702538-eec2-4ece-ab43-0c405e512ec1", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "original_text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. "}, "hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "class_name": "RelatedNodeInfo"}}, "hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "text": "In Empirical Methods in Natural Language Processing , 2016.\n", "start_char_idx": 30501, "end_char_idx": 30561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dc702538-eec2-4ece-ab43-0c405e512ec1": {"__data__": {"id_": "dc702538-eec2-4ece-ab43-0c405e512ec1", "embedding": null, "metadata": {"window": "arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "original_text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "89b4dad0-d748-4791-b5e4-f2ee3e52ac72", "node_type": "1", "metadata": {"window": "A structured self-attentive sentence embedding.  arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n", "original_text": "In Empirical Methods in Natural Language Processing , 2016.\n"}, "hash": "c7643487f9d905a55efa000585513dbde3c936bc7fc953a25206fb6f552711e5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "68c1b35c-36a5-4ab2-94cd-58c6458409b7", "node_type": "1", "metadata": {"window": "[20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "original_text": "A deep reinforced model for abstractive\nsummarization. "}, "hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "class_name": "RelatedNodeInfo"}}, "hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. ", "start_char_idx": 30561, "end_char_idx": 30616, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "68c1b35c-36a5-4ab2-94cd-58c6458409b7": {"__data__": {"id_": "68c1b35c-36a5-4ab2-94cd-58c6458409b7", "embedding": null, "metadata": {"window": "[20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "original_text": "A deep reinforced model for abstractive\nsummarization. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dc702538-eec2-4ece-ab43-0c405e512ec1", "node_type": "1", "metadata": {"window": "arXiv preprint\narXiv:1703.03130 , 2017.\n [20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "original_text": "[23] Romain Paulus, Caiming Xiong, and Richard Socher. "}, "hash": "09a023e77cdbf2a347c5c1353451209588bef9c01230a38d3c6c111dc823e514", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1a3e28b-f22d-45e4-8b35-0a8a4d05b25a", "node_type": "1", "metadata": {"window": "Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n", "original_text": "arXiv preprint arXiv:1705.04304 , 2017.\n"}, "hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "class_name": "RelatedNodeInfo"}}, "hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "text": "A deep reinforced model for abstractive\nsummarization. ", "start_char_idx": 30616, "end_char_idx": 30671, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1a3e28b-f22d-45e4-8b35-0a8a4d05b25a": {"__data__": {"id_": "f1a3e28b-f22d-45e4-8b35-0a8a4d05b25a", "embedding": null, "metadata": {"window": "Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n", "original_text": "arXiv preprint arXiv:1705.04304 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "68c1b35c-36a5-4ab2-94cd-58c6458409b7", "node_type": "1", "metadata": {"window": "[20] Samy Bengio \u0141ukasz Kaiser.  Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "original_text": "A deep reinforced model for abstractive\nsummarization. "}, "hash": "45442b8693292c5ace07225f00f222dea04a13676bfe8452d4f91a1b02f30cea", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a69dcc3d-4e83-4753-9daa-e2e2694d3051", "node_type": "1", "metadata": {"window": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "original_text": "[24] O\ufb01r Press and Lior Wolf. "}, "hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "class_name": "RelatedNodeInfo"}}, "hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "text": "arXiv preprint arXiv:1705.04304 , 2017.\n", "start_char_idx": 30671, "end_char_idx": 30711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a69dcc3d-4e83-4753-9daa-e2e2694d3051": {"__data__": {"id_": "a69dcc3d-4e83-4753-9daa-e2e2694d3051", "embedding": null, "metadata": {"window": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "original_text": "[24] O\ufb01r Press and Lior Wolf. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1a3e28b-f22d-45e4-8b35-0a8a4d05b25a", "node_type": "1", "metadata": {"window": "Can active memory replace attention?  In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n", "original_text": "arXiv preprint arXiv:1705.04304 , 2017.\n"}, "hash": "53672315d8741822e266b320d9cf7b0bba1945a61a8e5aa416d2f7a95718936c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dcc54757-3884-4d69-964c-0976c0a85958", "node_type": "1", "metadata": {"window": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "original_text": "Using the output embedding to improve language models. "}, "hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "class_name": "RelatedNodeInfo"}}, "hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "text": "[24] O\ufb01r Press and Lior Wolf. ", "start_char_idx": 30711, "end_char_idx": 30741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dcc54757-3884-4d69-964c-0976c0a85958": {"__data__": {"id_": "dcc54757-3884-4d69-964c-0976c0a85958", "embedding": null, "metadata": {"window": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "original_text": "Using the output embedding to improve language models. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a69dcc3d-4e83-4753-9daa-e2e2694d3051", "node_type": "1", "metadata": {"window": "In Advances in Neural\nInformation Processing Systems, (NIPS) , 2016.\n 10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "original_text": "[24] O\ufb01r Press and Lior Wolf. "}, "hash": "af4336490effd15eb975ec7caa31c5bce7b06a65849507af5f3817b504b236da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ebf6072-0910-4320-b5b3-2b77464c441f", "node_type": "1", "metadata": {"window": "Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "original_text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n"}, "hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "class_name": "RelatedNodeInfo"}}, "hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "text": "Using the output embedding to improve language models. ", "start_char_idx": 30741, "end_char_idx": 30796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ebf6072-0910-4320-b5b3-2b77464c441f": {"__data__": {"id_": "7ebf6072-0910-4320-b5b3-2b77464c441f", "embedding": null, "metadata": {"window": "Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "original_text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dcc54757-3884-4d69-964c-0976c0a85958", "node_type": "1", "metadata": {"window": "10\n\n[21] Minh-Thang Luong, Hieu Pham, and Christopher D Manning.  Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "original_text": "Using the output embedding to improve language models. "}, "hash": "8ceff36f2dc939f07c5af650f65dc372afa788c65162e1a693dc1f89d0cb5298", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8d7ff329-4777-44c8-9538-d1f971625291", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "original_text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. "}, "hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "class_name": "RelatedNodeInfo"}}, "hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n", "start_char_idx": 30796, "end_char_idx": 30836, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8d7ff329-4777-44c8-9538-d1f971625291": {"__data__": {"id_": "8d7ff329-4777-44c8-9538-d1f971625291", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "original_text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ebf6072-0910-4320-b5b3-2b77464c441f", "node_type": "1", "metadata": {"window": "Effective approaches to attention-\nbased neural machine translation.  arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "original_text": "arXiv\npreprint arXiv:1608.05859 , 2016.\n"}, "hash": "9785f2e909625d3376a78608f4591a4c1fc0104f1391b2cb4fb2f03c56416674", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "60d3fde6-9501-4c40-b2eb-b864114d8c0b", "node_type": "1", "metadata": {"window": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks. ", "original_text": "Neural machine translation of rare words\nwith subword units. "}, "hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "class_name": "RelatedNodeInfo"}}, "hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. ", "start_char_idx": 30836, "end_char_idx": 30891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "60d3fde6-9501-4c40-b2eb-b864114d8c0b": {"__data__": {"id_": "60d3fde6-9501-4c40-b2eb-b864114d8c0b", "embedding": null, "metadata": {"window": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks. ", "original_text": "Neural machine translation of rare words\nwith subword units. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8d7ff329-4777-44c8-9538-d1f971625291", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.04025 , 2015.\n [22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "original_text": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch. "}, "hash": "9364e112064773c1408ed0b657f2e07eff9d2ac0a9a20d4a559da6c3a13696a3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a15caed1-a72d-43fa-a70f-fa4ea0aee986", "node_type": "1", "metadata": {"window": "A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "original_text": "arXiv preprint arXiv:1508.07909 , 2015.\n"}, "hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "class_name": "RelatedNodeInfo"}}, "hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "text": "Neural machine translation of rare words\nwith subword units. ", "start_char_idx": 30891, "end_char_idx": 30952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a15caed1-a72d-43fa-a70f-fa4ea0aee986": {"__data__": {"id_": "a15caed1-a72d-43fa-a70f-fa4ea0aee986", "embedding": null, "metadata": {"window": "A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "original_text": "arXiv preprint arXiv:1508.07909 , 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "60d3fde6-9501-4c40-b2eb-b864114d8c0b", "node_type": "1", "metadata": {"window": "[22] Ankur Parikh, Oscar T\u00e4ckstr\u00f6m, Dipanjan Das, and Jakob Uszkoreit.  A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks. ", "original_text": "Neural machine translation of rare words\nwith subword units. "}, "hash": "80ee7b6a0cd6dacba8428e47ce8da9a6ccce449d1a1778789cc654b34b92c6e6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "486054be-2d0f-4aa3-b3e0-eb8efaef9e34", "node_type": "1", "metadata": {"window": "In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n", "original_text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. "}, "hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "class_name": "RelatedNodeInfo"}}, "hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "text": "arXiv preprint arXiv:1508.07909 , 2015.\n", "start_char_idx": 30952, "end_char_idx": 30992, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "486054be-2d0f-4aa3-b3e0-eb8efaef9e34": {"__data__": {"id_": "486054be-2d0f-4aa3-b3e0-eb8efaef9e34", "embedding": null, "metadata": {"window": "In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n", "original_text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a15caed1-a72d-43fa-a70f-fa4ea0aee986", "node_type": "1", "metadata": {"window": "A decomposable attention\nmodel.  In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "original_text": "arXiv preprint arXiv:1508.07909 , 2015.\n"}, "hash": "219cdd430e3c13aa868f4d4916e37242c8693730739550c713695098a7abaa3f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d1c9a9c0-b418-48f5-a3f9-f6a3388aab04", "node_type": "1", "metadata": {"window": "[23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "original_text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. "}, "hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "class_name": "RelatedNodeInfo"}}, "hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. ", "start_char_idx": 30992, "end_char_idx": 31102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d1c9a9c0-b418-48f5-a3f9-f6a3388aab04": {"__data__": {"id_": "d1c9a9c0-b418-48f5-a3f9-f6a3388aab04", "embedding": null, "metadata": {"window": "[23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "original_text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "486054be-2d0f-4aa3-b3e0-eb8efaef9e34", "node_type": "1", "metadata": {"window": "In Empirical Methods in Natural Language Processing , 2016.\n [23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n", "original_text": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean. "}, "hash": "9f9bc668c73f476a2e6f2a3f11589a8819afb3371597ca64ec58e5ae0ad03c6f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bd6972b6-68c3-4e13-bd27-84e1c72e0574", "node_type": "1", "metadata": {"window": "A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks. ", "original_text": "arXiv preprint arXiv:1701.06538 , 2017.\n"}, "hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "class_name": "RelatedNodeInfo"}}, "hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. ", "start_char_idx": 31102, "end_char_idx": 31183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bd6972b6-68c3-4e13-bd27-84e1c72e0574": {"__data__": {"id_": "bd6972b6-68c3-4e13-bd27-84e1c72e0574", "embedding": null, "metadata": {"window": "A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks. ", "original_text": "arXiv preprint arXiv:1701.06538 , 2017.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d1c9a9c0-b418-48f5-a3f9-f6a3388aab04", "node_type": "1", "metadata": {"window": "[23] Romain Paulus, Caiming Xiong, and Richard Socher.  A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "original_text": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer. "}, "hash": "4769b76b34777ccf4cb458cf07c86551c3ce17b8df853fb1495e059085e48ca4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ed74d86-8770-431b-bf5d-d58da0d8f7be", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "original_text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. "}, "hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "class_name": "RelatedNodeInfo"}}, "hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "text": "arXiv preprint arXiv:1701.06538 , 2017.\n", "start_char_idx": 31183, "end_char_idx": 31223, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ed74d86-8770-431b-bf5d-d58da0d8f7be": {"__data__": {"id_": "3ed74d86-8770-431b-bf5d-d58da0d8f7be", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "original_text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bd6972b6-68c3-4e13-bd27-84e1c72e0574", "node_type": "1", "metadata": {"window": "A deep reinforced model for abstractive\nsummarization.  arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks. ", "original_text": "arXiv preprint arXiv:1701.06538 , 2017.\n"}, "hash": "fc2f1b06d4f159d5e17c547c0afb2ee2e4a72231a5aeb0697148965ba8b88103", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29741c28-4a1b-4435-b4eb-a8f13d14add1", "node_type": "1", "metadata": {"window": "[24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "original_text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. "}, "hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "class_name": "RelatedNodeInfo"}}, "hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. ", "start_char_idx": 31223, "end_char_idx": 31327, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29741c28-4a1b-4435-b4eb-a8f13d14add1": {"__data__": {"id_": "29741c28-4a1b-4435-b4eb-a8f13d14add1", "embedding": null, "metadata": {"window": "[24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "original_text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3ed74d86-8770-431b-bf5d-d58da0d8f7be", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1705.04304 , 2017.\n [24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "original_text": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov. "}, "hash": "89321761187a089ee5768e4643c3e11978e50dcc4a76258480109988364a805b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8e2891d6-4013-4d25-a37d-be6ad0d73752", "node_type": "1", "metadata": {"window": "Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision. ", "original_text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n"}, "hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "class_name": "RelatedNodeInfo"}}, "hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. ", "start_char_idx": 31327, "end_char_idx": 31393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8e2891d6-4013-4d25-a37d-be6ad0d73752": {"__data__": {"id_": "8e2891d6-4013-4d25-a37d-be6ad0d73752", "embedding": null, "metadata": {"window": "Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision. ", "original_text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29741c28-4a1b-4435-b4eb-a8f13d14add1", "node_type": "1", "metadata": {"window": "[24] O\ufb01r Press and Lior Wolf.  Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "original_text": "Dropout: a simple way to prevent neural networks from over\ufb01tting. "}, "hash": "305ee3dfbe78dd0b169fb6c912a8e2e4f1d5d67b0644d0d40bfea95563ec9a79", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e3a244d-a95e-42a1-b859-e0e92596d603", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n", "original_text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. "}, "hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "class_name": "RelatedNodeInfo"}}, "hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n", "start_char_idx": 31393, "end_char_idx": 31455, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e3a244d-a95e-42a1-b859-e0e92596d603": {"__data__": {"id_": "2e3a244d-a95e-42a1-b859-e0e92596d603", "embedding": null, "metadata": {"window": "arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n", "original_text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8e2891d6-4013-4d25-a37d-be6ad0d73752", "node_type": "1", "metadata": {"window": "Using the output embedding to improve language models.  arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision. ", "original_text": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n"}, "hash": "48d71c81ad9d7238263cd8e6fb21bbb47409b3af852b1f93814d0f48f82a30d0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ffb2e25f-7208-4d2a-a0b5-8ea05e4f404d", "node_type": "1", "metadata": {"window": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "original_text": "End-to-end memory\nnetworks. "}, "hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "class_name": "RelatedNodeInfo"}}, "hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. ", "start_char_idx": 31455, "end_char_idx": 31526, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ffb2e25f-7208-4d2a-a0b5-8ea05e4f404d": {"__data__": {"id_": "ffb2e25f-7208-4d2a-a0b5-8ea05e4f404d", "embedding": null, "metadata": {"window": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "original_text": "End-to-end memory\nnetworks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e3a244d-a95e-42a1-b859-e0e92596d603", "node_type": "1", "metadata": {"window": "arXiv\npreprint arXiv:1608.05859 , 2016.\n [25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n", "original_text": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus. "}, "hash": "c89f231309182292b91b09bc9fcd1d792d73c15a5599410dcdd746ff46921dbf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "545fcc65-ce45-46dd-a9f2-73b207443f85", "node_type": "1", "metadata": {"window": "Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "original_text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. "}, "hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "class_name": "RelatedNodeInfo"}}, "hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "text": "End-to-end memory\nnetworks. ", "start_char_idx": 31526, "end_char_idx": 31554, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "545fcc65-ce45-46dd-a9f2-73b207443f85": {"__data__": {"id_": "545fcc65-ce45-46dd-a9f2-73b207443f85", "embedding": null, "metadata": {"window": "Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "original_text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ffb2e25f-7208-4d2a-a0b5-8ea05e4f404d", "node_type": "1", "metadata": {"window": "[25] Rico Sennrich, Barry Haddow, and Alexandra Birch.  Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "original_text": "End-to-end memory\nnetworks. "}, "hash": "5611e1c73e60a90b6d5684bd3414c83ebd49b8d29cb85cdbf1fbd3fa9a6038d3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "363ce7bb-a1b0-4b9c-8da2-97cfd851b667", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n", "original_text": "Curran Associates,\nInc., 2015.\n"}, "hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "class_name": "RelatedNodeInfo"}}, "hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. ", "start_char_idx": 31554, "end_char_idx": 31705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "363ce7bb-a1b0-4b9c-8da2-97cfd851b667": {"__data__": {"id_": "363ce7bb-a1b0-4b9c-8da2-97cfd851b667", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n", "original_text": "Curran Associates,\nInc., 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "545fcc65-ce45-46dd-a9f2-73b207443f85", "node_type": "1", "metadata": {"window": "Neural machine translation of rare words\nwith subword units.  arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "original_text": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448. "}, "hash": "d04cc25c3458d2ed5c36b99398ad29b01a27efa02d2eed389926cc9a627cc4eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6e580363-1d1b-4a81-95d1-9011a518884e", "node_type": "1", "metadata": {"window": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "original_text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. "}, "hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "class_name": "RelatedNodeInfo"}}, "hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "text": "Curran Associates,\nInc., 2015.\n", "start_char_idx": 31705, "end_char_idx": 31736, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6e580363-1d1b-4a81-95d1-9011a518884e": {"__data__": {"id_": "6e580363-1d1b-4a81-95d1-9011a518884e", "embedding": null, "metadata": {"window": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "original_text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "363ce7bb-a1b0-4b9c-8da2-97cfd851b667", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1508.07909 , 2015.\n [26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n", "original_text": "Curran Associates,\nInc., 2015.\n"}, "hash": "aaf44f09a32eedbdfe637ab6b58f741fd7f74c379f3462ee822cb09a1b2e5ca9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db82123e-b504-44b7-8649-0c3d9d0cfd7f", "node_type": "1", "metadata": {"window": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation. ", "original_text": "Sequence to sequence learning with neural\nnetworks. "}, "hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "class_name": "RelatedNodeInfo"}}, "hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. ", "start_char_idx": 31736, "end_char_idx": 31788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db82123e-b504-44b7-8649-0c3d9d0cfd7f": {"__data__": {"id_": "db82123e-b504-44b7-8649-0c3d9d0cfd7f", "embedding": null, "metadata": {"window": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation. ", "original_text": "Sequence to sequence learning with neural\nnetworks. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6e580363-1d1b-4a81-95d1-9011a518884e", "node_type": "1", "metadata": {"window": "[26] Noam Shazeer, Azalia Mirhoseini, Krzysztof Maziarz, Andy Davis, Quoc Le, Geoffrey Hinton,\nand Jeff Dean.  Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "original_text": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. "}, "hash": "6d3035584c41dad472f10d785bc0f775b1ce3098d63644c29d573819127a688e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4121176-b93a-435c-bde6-f726f8cbb478", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n", "original_text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n"}, "hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "class_name": "RelatedNodeInfo"}}, "hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "text": "Sequence to sequence learning with neural\nnetworks. ", "start_char_idx": 31788, "end_char_idx": 31840, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4121176-b93a-435c-bde6-f726f8cbb478": {"__data__": {"id_": "a4121176-b93a-435c-bde6-f726f8cbb478", "embedding": null, "metadata": {"window": "arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n", "original_text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db82123e-b504-44b7-8649-0c3d9d0cfd7f", "node_type": "1", "metadata": {"window": "Outrageously large neural networks: The sparsely-gated mixture-of-experts\nlayer.  arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation. ", "original_text": "Sequence to sequence learning with neural\nnetworks. "}, "hash": "b48cfae04daab153a76682c256345fc6983e2a549d7dd44c9feef8e8f8e7c71e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "740520eb-f580-43f3-9745-8b72e788b401", "node_type": "1", "metadata": {"window": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n"}, "hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "class_name": "RelatedNodeInfo"}}, "hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n", "start_char_idx": 31840, "end_char_idx": 31918, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "740520eb-f580-43f3-9745-8b72e788b401": {"__data__": {"id_": "740520eb-f580-43f3-9745-8b72e788b401", "embedding": null, "metadata": {"window": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4121176-b93a-435c-bde6-f726f8cbb478", "node_type": "1", "metadata": {"window": "arXiv preprint arXiv:1701.06538 , 2017.\n [27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n", "original_text": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n"}, "hash": "ddbe975b886e8828100a292e2058fd9c63dd6747126bca331f5a192edcd57cc6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ac957156-1efd-465f-b54f-aa9d3b05fcf9", "node_type": "1", "metadata": {"window": "Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Rethinking the inception architecture for computer vision. "}, "hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "class_name": "RelatedNodeInfo"}}, "hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n", "start_char_idx": 31918, "end_char_idx": 32012, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ac957156-1efd-465f-b54f-aa9d3b05fcf9": {"__data__": {"id_": "ac957156-1efd-465f-b54f-aa9d3b05fcf9", "embedding": null, "metadata": {"window": "Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Rethinking the inception architecture for computer vision. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "740520eb-f580-43f3-9745-8b72e788b401", "node_type": "1", "metadata": {"window": "[27] Nitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi-\nnov.  Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n"}, "hash": "00ad81b7dc0968462b7d524184dea99a757a5f9a869b05f8518374d568c4774f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f86ab7cf-e2df-40c3-814f-ea609edfd60c", "node_type": "1", "metadata": {"window": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1512.00567, 2015.\n"}, "hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "class_name": "RelatedNodeInfo"}}, "hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "text": "Rethinking the inception architecture for computer vision. ", "start_char_idx": 32012, "end_char_idx": 32071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f86ab7cf-e2df-40c3-814f-ea609edfd60c": {"__data__": {"id_": "f86ab7cf-e2df-40c3-814f-ea609edfd60c", "embedding": null, "metadata": {"window": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1512.00567, 2015.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ac957156-1efd-465f-b54f-aa9d3b05fcf9", "node_type": "1", "metadata": {"window": "Dropout: a simple way to prevent neural networks from over\ufb01tting.  Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Rethinking the inception architecture for computer vision. "}, "hash": "34046bf29173f07c0d65c2e51118cecce31173d8460de2f2b0df1e3d0a0963ee", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c256bccb-e675-4377-850b-89e2e45e86f8", "node_type": "1", "metadata": {"window": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. "}, "hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "class_name": "RelatedNodeInfo"}}, "hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "text": "CoRR , abs/1512.00567, 2015.\n", "start_char_idx": 32071, "end_char_idx": 32100, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c256bccb-e675-4377-850b-89e2e45e86f8": {"__data__": {"id_": "c256bccb-e675-4377-850b-89e2e45e86f8", "embedding": null, "metadata": {"window": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f86ab7cf-e2df-40c3-814f-ea609edfd60c", "node_type": "1", "metadata": {"window": "Journal of Machine\nLearning Research , 15(1):1929\u20131958, 2014.\n [28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1512.00567, 2015.\n"}, "hash": "75333085b2125bba838ce7bbdf6a03dbc35fd4c85841754f991289b39df1b8dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fab1119d-7ef9-48c2-aa1e-5d3013867f12", "node_type": "1", "metadata": {"window": "End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. "}, "hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "class_name": "RelatedNodeInfo"}}, "hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. ", "start_char_idx": 32100, "end_char_idx": 32250, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fab1119d-7ef9-48c2-aa1e-5d3013867f12": {"__data__": {"id_": "fab1119d-7ef9-48c2-aa1e-5d3013867f12", "embedding": null, "metadata": {"window": "End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c256bccb-e675-4377-850b-89e2e45e86f8", "node_type": "1", "metadata": {"window": "[28] Sainbayar Sukhbaatar, arthur szlam, Jason Weston, and Rob Fergus.  End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al. "}, "hash": "3aab43eaa62d5162ebdd852516d5db21d3a213433f5388110a83294961cd18bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d28b47a1-f83c-4db7-9449-22631e08c2e0", "node_type": "1", "metadata": {"window": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "arXiv preprint\narXiv:1609.08144 , 2016.\n"}, "hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "class_name": "RelatedNodeInfo"}}, "hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. ", "start_char_idx": 32250, "end_char_idx": 32350, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d28b47a1-f83c-4db7-9449-22631e08c2e0": {"__data__": {"id_": "d28b47a1-f83c-4db7-9449-22631e08c2e0", "embedding": null, "metadata": {"window": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "arXiv preprint\narXiv:1609.08144 , 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fab1119d-7ef9-48c2-aa1e-5d3013867f12", "node_type": "1", "metadata": {"window": "End-to-end memory\nnetworks.  In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation. "}, "hash": "ba9e2743b750515e21add050e43a1d245c9837a2f36b753cdb30742b28c12f35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7574ef0a-a488-4576-a092-5351910fc9ff", "node_type": "1", "metadata": {"window": "Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. "}, "hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "class_name": "RelatedNodeInfo"}}, "hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "text": "arXiv preprint\narXiv:1609.08144 , 2016.\n", "start_char_idx": 32350, "end_char_idx": 32390, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7574ef0a-a488-4576-a092-5351910fc9ff": {"__data__": {"id_": "7574ef0a-a488-4576-a092-5351910fc9ff", "embedding": null, "metadata": {"window": "Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d28b47a1-f83c-4db7-9449-22631e08c2e0", "node_type": "1", "metadata": {"window": "In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28 , pages 2440\u20132448.  Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "arXiv preprint\narXiv:1609.08144 , 2016.\n"}, "hash": "35292aa79d6021e7eb7068dacb44d4c5081b99db868eb78aaef5ef3b3f3318d9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cb41785a-a3e8-49b9-930c-1dc800437014", "node_type": "1", "metadata": {"window": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Deep recurrent models with\nfast-forward connections for neural machine translation. "}, "hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "class_name": "RelatedNodeInfo"}}, "hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. ", "start_char_idx": 32390, "end_char_idx": 32450, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cb41785a-a3e8-49b9-930c-1dc800437014": {"__data__": {"id_": "cb41785a-a3e8-49b9-930c-1dc800437014", "embedding": null, "metadata": {"window": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Deep recurrent models with\nfast-forward connections for neural machine translation. "}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7574ef0a-a488-4576-a092-5351910fc9ff", "node_type": "1", "metadata": {"window": "Curran Associates,\nInc., 2015.\n [29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "[32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. "}, "hash": "7eddf95a744b541fb8ec108d8028ad6cfcbda69ba9fee45a294b53fcecccef01", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d7ec28a6-5cca-48bf-a6f0-eec890286238", "node_type": "1", "metadata": {"window": "Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1606.04199, 2016.\n"}, "hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "class_name": "RelatedNodeInfo"}}, "hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "text": "Deep recurrent models with\nfast-forward connections for neural machine translation. ", "start_char_idx": 32450, "end_char_idx": 32534, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d7ec28a6-5cca-48bf-a6f0-eec890286238": {"__data__": {"id_": "d7ec28a6-5cca-48bf-a6f0-eec890286238", "embedding": null, "metadata": {"window": "Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1606.04199, 2016.\n"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cb41785a-a3e8-49b9-930c-1dc800437014", "node_type": "1", "metadata": {"window": "[29] Ilya Sutskever, Oriol Vinyals, and Quoc VV Le.  Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "Deep recurrent models with\nfast-forward connections for neural machine translation. "}, "hash": "7fc88ef260f0422ea573a53e91baa5c168b6fa0f63c2150e6f5dad0ad2c8c118", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72b72c2c-a8ab-4ab7-adfb-908b1f50b53d", "node_type": "1", "metadata": {"window": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "11"}, "hash": "8d77459b8be2b95ef185499fabf082d83096113e57464684ceec6de056d85888", "class_name": "RelatedNodeInfo"}}, "hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "text": "CoRR , abs/1606.04199, 2016.\n", "start_char_idx": 32534, "end_char_idx": 32563, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72b72c2c-a8ab-4ab7-adfb-908b1f50b53d": {"__data__": {"id_": "72b72c2c-a8ab-4ab7-adfb-908b1f50b53d", "embedding": null, "metadata": {"window": "In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "11"}, "excluded_embed_metadata_keys": ["window", "original_text"], "excluded_llm_metadata_keys": ["window", "original_text"], "relationships": {"1": {"node_id": "df132f2e-94f2-4d84-965d-ad59bb949c65", "node_type": "4", "metadata": {}, "hash": "ce025ecf245cb0eb6e6fa023196105294c91ce10485128899c3386702958df3e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d7ec28a6-5cca-48bf-a6f0-eec890286238", "node_type": "1", "metadata": {"window": "Sequence to sequence learning with neural\nnetworks.  In Advances in Neural Information Processing Systems , pages 3104\u20133112, 2014.\n [30] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna.\n Rethinking the inception architecture for computer vision.  CoRR , abs/1512.00567, 2015.\n [31] Yonghui Wu, Mike Schuster, Zhifeng Chen, Quoc V Le, Mohammad Norouzi, Wolfgang\nMacherey, Maxim Krikun, Yuan Cao, Qin Gao, Klaus Macherey, et al.  Google\u2019s neural machine\ntranslation system: Bridging the gap between human and machine translation.  arXiv preprint\narXiv:1609.08144 , 2016.\n [32] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.  Deep recurrent models with\nfast-forward connections for neural machine translation.  CoRR , abs/1606.04199, 2016.\n 11", "original_text": "CoRR , abs/1606.04199, 2016.\n"}, "hash": "2d4547a7c976379527033973ed24a56dcb365fb827a7539c918f29b73a9db3ca", "class_name": "RelatedNodeInfo"}}, "hash": "8d77459b8be2b95ef185499fabf082d83096113e57464684ceec6de056d85888", "text": "11", "start_char_idx": 4980, "end_char_idx": 4982, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"df132f2e-94f2-4d84-965d-ad59bb949c65": {"node_ids": ["9b782640-5e17-4657-98ad-c01a0dfee6bf", "85d23c14-d06c-49a6-8da7-9f47c142876e", "1dbc5daa-ad1f-477c-b07c-ae21ead197cb", "8429bb22-6394-4d3a-a00e-1fceea1ebaf2", "b62d339e-49ab-4288-8e69-ad79ff334b4e", "9924325b-70cb-468f-aab0-4d7a7f8cba8f", "03eba757-12e2-4071-8c47-de8811876737", "e815df02-d232-4a78-ad95-d2d51c3efc35", "8fa0acf5-f6ab-4c8f-a4dd-1b170a9bc3dd", "0e03ead4-0af7-4a30-be2e-41c428edb5c9", "1847cc45-329a-4113-a3c1-867f3075a227", "7904065f-6c94-4ba8-ac1d-576b6e05c3bf", "7bf8b76f-a598-4c16-b996-ef10b9302477", "e11529ac-a810-4e32-bb8f-5dd1156c12b4", "a6560458-0d55-4cad-b04f-ea210f3723b2", "ef2e3abf-c6cc-44ee-ae21-91c29f4f7632", "783e270a-fecf-4433-a6d0-0ee411572e72", "11c726e2-bd4a-4117-8e04-83a8c6f5bde1", "aaad2c88-bd79-42ee-ae6b-53ca393dbf82", "b44c2162-be79-416c-863f-f699da3b6c82", "cf0d57ff-9c19-46ee-901b-f07c4ef8d0f2", "879ce961-680b-4552-b9c7-fda2f249a0a2", "1ed11b5f-ac3f-47bb-8be6-7811cfa1bd4e", "96df6cdf-fc7c-4696-ba55-dd7c257925f8", "f818e615-229c-45ca-a236-ecc7f448249d", "e4922561-1cdb-456b-b361-2af8599eb926", "2110b5a0-c4c2-40a3-b40e-d349f8650eba", "c9f598ca-e327-4323-a222-6667bb87f1eb", "66715fcb-5d8a-4219-9681-6af3bc4a85c0", "7cb2157d-072e-4283-be89-5a0587e366f9", "0abde137-9581-47fe-ab2d-2fd80ea3d1d7", "560584d3-212b-40a7-8457-c42546dea158", "750bdd6c-98ed-4f17-b4b4-2b9765ba1331", "382caf15-1219-43bd-aa14-816a978bcec2", "c03a7fb5-1fc9-4099-8fac-814ca152c076", "be58ff04-02b8-40bb-bf74-f4aaf42c87dd", "c75b8402-e992-4508-841e-6db2176951c0", "90abe1f3-e1ef-40fb-9b69-68c6b98c94c1", "2118354c-a337-4932-8378-504554a73521", "54ff56a1-d2ed-4b94-9ef4-e72ab7402d63", "1f426cc9-b35a-46a4-bbab-ef43caa90414", "3573c531-5d79-4d70-abba-14a58c9a267e", "0f4eb185-172d-4d9d-88a5-1f1f02b9fda1", "39e14af8-b845-4b09-a213-45a13b70cfde", "eaead8a4-19c6-46fa-a005-9175ed6f9426", "c356f552-3ee7-450e-b674-0e5ec03cc6ca", "5205e22e-1825-44ff-a7ab-240962938666", "94524f83-7f1e-461a-af58-b20fcd2375d2", "38d90384-248f-485c-aa12-b76ef73c48dd", "93ffdcaf-4666-4b0c-9d56-0afb087db09f", "7c676aef-7eca-4095-a07c-4d8ba031f5c0", "f44f85df-50a7-4937-b279-2de87c420b4d", "a8819e9d-5a34-4994-9d9a-04c829a6efa7", "850fa3da-6f18-40d8-816a-242ce66c2ffb", "c10ed964-2ac2-4920-a57f-386913c921fd", "8912afda-d1dc-47fa-bb8b-693fafe63ecf", "322068ba-0686-4f63-a6a7-9d87fa7cd457", "46ada6da-7562-4233-902f-081d1a7e1948", "e4ef5cc6-ac95-474a-9ac7-4d5583240e7d", "2418f743-c43a-4c0b-a73e-690a8cf3b845", "6bd0687b-16f2-49ce-a53f-ef2605d563d3", "4434355b-9e1e-436a-94e3-1b8a3767901a", "c7fff715-bc6e-4917-8376-087eb3fa111e", "ea16bd9b-46db-45b3-ae04-5295c964714c", "52a06a94-3968-4e00-a70b-41ff88806adb", "8742531e-db1d-40e1-851b-a4fba6775be1", "b8c77f61-6a0d-4808-bc43-2826ba69ee4f", "fb804dc8-bd6d-4879-9ae4-f2799c2920c2", "504a27a0-0be0-4ec0-8962-264ac87a6e20", "62ca82d7-d56f-4f05-883e-c9f21fd2baa1", "9ea62d73-1a8f-42fd-ae14-194b11247ecd", "2875b50f-885e-4b27-9b06-1de3786ab628", "737ae3be-d1bb-4d1e-9cc1-bfd245c2c708", "5349de03-65c4-4922-91a5-568c415f2b97", "af9553c3-10a3-432c-8b86-cb91c591a94e", "106268ac-158f-43fc-ac86-2ae6dbbf16f1", "1319640b-bac2-4a1c-a988-b306f5d8f6f2", "2365a2cc-8b96-4b02-8cd0-17664b3ac46c", "b10b4ffc-66aa-4f68-ae02-84f702259fe2", "6c8cd392-2298-42f6-9022-7a96b39d707c", "63f5213b-eb9a-4ee6-9915-37ed7cbadc14", "e187906c-cb19-48a7-a306-2882fbb12fbc", "80e67723-1fc9-49aa-ad5a-4ca102337034", "fd39f755-4c0d-4882-ab55-c08256aaa6e3", "6f7ed974-5e50-48a1-ae6a-ac1094314397", "ca3e729d-8c02-400a-9f31-c9a614fa07ba", "0ab9328c-5c9e-490f-b39c-8dd63f1530f6", "e6ad8570-24bf-4fe5-abf6-1537aa20a3af", "e8a7a8b1-0d29-4e41-9870-22e277c8f31c", "02e2ea6c-5c2a-435a-858f-7a8adcd6cd91", "9dc40ba8-96ca-461a-9202-43148577868b", "ee1d72e0-af42-431c-bd62-7b13e798ddcf", "c390db15-7666-483a-b188-a3fcdef52af4", "570a174d-fdaf-464b-99e2-66f13545542c", "a9784e91-ac88-45a5-8db6-72d55eee9019", "4791765e-b3ee-4c1e-8cee-713d5c936f79", "c0099095-88eb-4e52-b63f-1e36652cf804", "413a6aae-9fee-490c-8d3a-1ff7eb814902", "c0f33c05-8e73-489f-86e8-672fa1080260", "53613ea1-8d93-4c3e-8768-86634fbbdfa3", "bf50f521-eb58-463c-84d3-5a2715b13cfe", "3615680b-d044-4a09-bfc5-cdcd0c727e4e", "15fe6a3a-1602-4d8a-84b0-01f6eb131640", "92131648-8e47-43b5-84a4-1db4f3af581a", "3f2c9c60-b596-4565-aa32-ca7a071b920d", "d6ee8c9b-3933-4f90-aa8e-9bc71403ed09", "86aa99af-33d2-4179-8ef6-cb581086d8d5", "1d66d418-b7d8-4a10-bac3-4054605b1a69", "dafd35ad-9edc-467b-8ffd-be534843a6c9", "ebd6199c-71e8-4fd8-a43a-b92e4bfd915d", "1f67df46-269c-49a5-affe-fc8078790a17", "3f1898a6-9203-4848-a8eb-28f6e2e9b3ec", "c1b5137f-76ee-45b8-8ea1-cf728fd310a7", "882828a4-f7ec-4698-a90a-4674c7dee4c4", "580da277-88d0-4101-afdf-11b4dcf73ffd", "263d30f5-78c7-4d86-bad6-4dcb231901f1", "4a07ed97-06fc-42bd-8a04-3d688f556883", "ff609b26-d1a9-4ad2-8ef5-4c8f4176f8a3", "53010cad-9311-417c-aa39-d0e805341ecb", "e1848976-3c11-4bca-8c4e-975a41ad727a", "d5b783f5-e601-4116-b833-3038b9a4cbdd", "87ebe4f0-4d05-4ac9-beee-442497561d54", "c94b1678-4776-4d23-90ea-dea9391551a0", "8f8f4d78-5d0b-4b79-b253-fceae48d972c", "98345b2a-dfe9-41c7-92d0-e4691b06ce53", "7779737e-275f-4b09-9f99-e0d9f7e22e4b", "c54d80cd-05bd-4999-8256-de0f6ea2dc90", "01c9783d-ba55-4c1d-b84c-5558f1c905dd", "4e4187e7-22cb-49a9-90c7-ef7047cee7d0", "cbb2148d-710a-4a00-b3f7-3e4f3fe90998", "7a536d39-5f70-480b-a0d7-fcc09598f4bf", "f5a5fe64-f77a-4a75-91fd-3eb584e8ace0", "60d8e55e-b55f-4a6d-8d31-8ed9a87ff484", "55e59a12-5d09-4dae-a3ef-1f124b6b2993", "28d3b3cf-217b-4c1e-a588-2a34d8ec5d75", "f35d94b3-77c6-47b5-bbb8-8a79c05c44e3", "52363fe7-ecb3-4560-acd6-3f45e5323060", "13a079dd-1f60-40e7-9740-2570b1b8faec", "530b36cb-704a-4f7b-a777-1ec23ac2a016", "5ed5e532-219b-4654-8106-e7a87fa1ff9d", "14be4b8f-6991-4af6-8431-076873c40e62", "6c83bff9-1ee4-4481-9678-8c6af7ee1e90", "4d574b40-0c45-4761-8ee7-715a1b9aae61", "bd5bfbc4-3447-41fc-b250-3aa423dc1e48", "aebb237a-1534-4003-b344-232f7c9ab9d7", "072bfee2-835b-4b60-9064-436926fce916", "1524a306-67bd-4fff-8aed-1219007d7ccd", "06247d7d-2979-4780-ad5f-a3d18b823517", "87581fd2-7647-4740-98a1-31ce05effcde", "e0fe4dd3-188d-4dea-b443-d8fdec58eaf7", "e36d7722-1ad6-4a92-97bf-196a91262898", "64931f1d-0a7b-4934-b986-a6a52439b557", "de799068-b091-40f1-84e5-a1d99b48fbd3", "f9dea4d2-595e-46ff-a9d1-166915873a89", "ac7c065f-7516-42a4-acc5-8c386121b72b", "03b5b432-d541-48ac-8034-39e2ab5100b4", "b271b430-4b12-4d36-8764-062429c0c402", "c765f383-bcb4-4372-9e14-b14bc4ec5e33", "9b7fd2d1-8bee-41f3-9c4f-2ce84b0ce44c", "b7189a4a-641f-4889-abf5-d6280d2deaba", "06009291-a1c0-45e1-a994-1456d1983b61", "256ee85f-f8d2-4a11-8bbf-d5ea92011840", "2f78ce25-ba07-43b8-ab04-4237cf5eb06a", "74f4cdb6-7ced-4cf8-ae1e-401b42903c78", "cab4fcbe-2de3-4e57-a056-2b751a239107", "39add761-96fb-4dbd-baf4-1e89470afd76", "0685392b-72e6-4830-b31c-f8e0da8ecb40", "bf3a3296-1c00-491c-9d29-bfef83f3f52e", "4c3cac43-a877-4594-9e87-0686e9ea47f6", "f62f4d6b-86f3-4cf3-9a7e-200173a52b24", "b98eb14b-783c-443f-943a-e01cc422db93", "65ade81e-276c-4d94-9de4-371a63c4c90b", "76a66884-4a86-4abd-b913-06246e6ec4e1", "67c7d03c-9aad-40eb-8957-c754ffa7bc43", "99568588-bad6-484f-87fc-8f11fa1b1c54", "8d7cc7be-62ee-49eb-890e-22a25f74d006", "08370985-044b-4c66-b835-e727d3ce93d2", "00b925ae-9e55-428d-832f-9b3f87dfb0b3", "1aad40a5-8ab1-4b37-836e-a70ebc2a1152", "54d6fca5-5b8c-4a20-ba96-ef37c88e9ede", "fcb7680e-ebe4-4982-87d6-5a9c4addafb2", "ed438742-2e0e-4be1-8151-c4c988d9790b", "f182cf3b-2f0f-4812-b3dc-51be06836469", "ae7c82c5-c1d7-4775-b879-d7a2fd8994ce", "d591de8d-c1b5-430a-acce-2d9431569da2", "8708e8cf-2b4a-4669-b681-f31f27d67d25", "4992a350-a164-4071-b9ed-3c38971c8911", "5cae61a0-d1f1-493c-84e1-d672c31cf76b", "203e73fe-d0b2-41ef-9a24-90a8a9429229", "1a2a7e73-f34a-44b8-bebc-1feb87381a07", "58249c08-36cc-40e3-9abd-32ce14267cea", "32841ff9-af49-4e58-83c1-066d55a40016", "c5b557d8-35d5-4c3b-871c-b2157fb942de", "5ea97bfd-9f5c-461e-a5be-03be4d3de85c", "8b9e6cc4-3a9d-4798-8bc3-f75e6a35386c", "b79efaa1-4ecd-4f4c-8502-8736c0aa2311", "0bc6ff8f-b568-413d-ae06-e14ff70fd289", "1ebc10f4-6c0c-4cae-980c-e1040c454d84", "efbc3f05-df23-48f3-87c8-78a92a38f6a1", "96b815cf-53ff-484e-a23e-e8336d192e5d", "903fc95c-42a2-4ffb-b6b7-123f0819423f", "566c622d-d1db-49d1-9597-ba8c6c633f17", "796f812d-43fd-442b-b29f-cf087278580b", "f118735f-16f9-4ef0-a909-e5917c64d0f2", "91087365-5115-420a-807f-1689d70ac107", "6ca29f0d-e9cb-46f9-a0c1-8084a3b1ec90", "3054f9d2-7736-49b1-a747-6fdbe08339f8", "4b9cdd1d-f777-431e-82a8-eed130d2caa8", "5b6db37e-3aae-4ce8-b20b-11a8e400b7df", "b348f5de-0262-423c-8206-ba3dcb4403ea", "bd593679-5aa2-4395-a772-f4e0368236b4", "07015ea2-ec4f-4285-a40f-390d45c659d6", "363a39c0-f95f-49fa-9ff3-7bf4903a040d", "e01dab66-dee6-404b-8105-02867e5d2d27", "a4997469-cbc7-48a7-b252-1b8cb0f335ca", "8228eedd-e008-4c59-b16a-dd4c1240a9db", "adda93e6-d5cb-4388-9231-18fe3b7c5697", "d4dfcb6a-442a-47b2-9419-5d71029e90f9", "7081695e-8595-4c10-a14c-f1da2cd9233c", "4432497f-92b4-4e61-8659-d0a39c496275", "a2e34b43-2d9d-4707-8ef8-35f2ec8c9457", "dde8d362-146a-4023-8775-600fa0bb6ae6", "f5a4dbdf-a7be-47c7-bae9-e58e3e8e8ed1", "509f8b9b-c228-4002-b5d0-6111bcfedfc8", "3dbd88c1-bde1-4415-83f5-c2d1152f0418", "93394fe7-8570-4e49-ba01-9bfacf663170", "b1647d6b-33cd-4b05-b5d0-c36b7a3660bd", "c88b8339-c723-415b-add3-57ab3c893cdc", "05ed8a38-2c7d-4a07-85c0-5124a1467b49", "179e2c34-7920-47bb-a1aa-97a738860b99", "5ddee1a2-baa9-4f30-9e21-7871ae5974c3", "83d7f8f4-e6cf-4e3b-b57a-4a83243606cc", "e8496b95-dd64-4ae7-b25c-ddfaac52e72a", "58ad677d-1799-4e0a-9055-2683830c16a9", "6ab00fb3-1f30-4d3b-a37c-30e649ad80df", "9e2b0ac5-fde9-45f1-b9d1-2e4283f0d0fb", "968c7d14-dda0-47a5-9495-5872c4a83f85", "fc5506e2-2579-4862-bbbd-99ec11eee537", "163b3f41-e986-4472-8f5c-170797f5b5c3", "dd08a741-9b1b-4576-a801-5d576ba48d21", "8be71a40-c790-482d-b524-2d56f44e0444", "57f96e43-9e41-4606-9219-d8876c44189b", "d86f4ba7-3f3e-4452-a0f2-a8a96702710c", "78a62316-5fb4-40e0-932d-49ef6d1dd50d", "d684ab6a-bf39-4287-b9f3-b35110c5e67d", "2b42d31b-8e26-4af4-b621-620e7e8a7c23", "8b321aa2-2920-45e0-a4f1-d95f91c204aa", "315320fd-bd2b-4a9f-92f5-7c51bbeb11b7", "9d85bc6e-6b1f-424c-92de-fffa207038f1", "32a28b6a-7988-40fa-9e26-cb891834466b", "c6360555-1115-49a6-9d73-c9ca10018c2b", "b111868a-d451-4cab-ada9-ba83e75e81a1", "89b4dad0-d748-4791-b5e4-f2ee3e52ac72", "dc702538-eec2-4ece-ab43-0c405e512ec1", "68c1b35c-36a5-4ab2-94cd-58c6458409b7", "f1a3e28b-f22d-45e4-8b35-0a8a4d05b25a", "a69dcc3d-4e83-4753-9daa-e2e2694d3051", "dcc54757-3884-4d69-964c-0976c0a85958", "7ebf6072-0910-4320-b5b3-2b77464c441f", "8d7ff329-4777-44c8-9538-d1f971625291", "60d3fde6-9501-4c40-b2eb-b864114d8c0b", "a15caed1-a72d-43fa-a70f-fa4ea0aee986", "486054be-2d0f-4aa3-b3e0-eb8efaef9e34", "d1c9a9c0-b418-48f5-a3f9-f6a3388aab04", "bd6972b6-68c3-4e13-bd27-84e1c72e0574", "3ed74d86-8770-431b-bf5d-d58da0d8f7be", "29741c28-4a1b-4435-b4eb-a8f13d14add1", "8e2891d6-4013-4d25-a37d-be6ad0d73752", "2e3a244d-a95e-42a1-b859-e0e92596d603", "ffb2e25f-7208-4d2a-a0b5-8ea05e4f404d", "545fcc65-ce45-46dd-a9f2-73b207443f85", "363ce7bb-a1b0-4b9c-8da2-97cfd851b667", "6e580363-1d1b-4a81-95d1-9011a518884e", "db82123e-b504-44b7-8649-0c3d9d0cfd7f", "a4121176-b93a-435c-bde6-f726f8cbb478", "740520eb-f580-43f3-9745-8b72e788b401", "ac957156-1efd-465f-b54f-aa9d3b05fcf9", "f86ab7cf-e2df-40c3-814f-ea609edfd60c", "c256bccb-e675-4377-850b-89e2e45e86f8", "fab1119d-7ef9-48c2-aa1e-5d3013867f12", "d28b47a1-f83c-4db7-9449-22631e08c2e0", "7574ef0a-a488-4576-a092-5351910fc9ff", "cb41785a-a3e8-49b9-930c-1dc800437014", "d7ec28a6-5cca-48bf-a6f0-eec890286238", "72b72c2c-a8ab-4ab7-adfb-908b1f50b53d"], "metadata": {"window": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.  The best\nperforming models also connect the encoder and decoder through an attention\nmechanism.  We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.  Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring signi\ufb01cantly\nless time to train.  Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.  On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.0 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n 1 Introduction\nRecurrent neural networks, long short-term memory [ 12] and gated recurrent [ 7] neural networks\nin particular, have been \ufb01rmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [ 29,2,5].  Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [31, 21, 13].\n \u2217Equal contribution.  Listing order is random. ", "original_text": "Attention Is All You Need\nAshish Vaswani\u2217\nGoogle Brain\navaswani@google.comNoam Shazeer\u2217\nGoogle Brain\nnoam@google.comNiki Parmar\u2217\nGoogle Research\nnikip@google.comJakob Uszkoreit\u2217\nGoogle Research\nusz@google.com\nLlion Jones\u2217\nGoogle Research\nllion@google.comAidan N. Gomez\u2217\u2020\nUniversity of Toronto\naidan@cs.toronto.edu\u0141ukasz Kaiser\u2217\nGoogle Brain\nlukaszkaiser@google.com\nIllia Polosukhin\u2217\u2021\nillia.polosukhin@gmail.com\nAbstract\nThe dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. "}}}}